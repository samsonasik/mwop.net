<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Blog Entries :: phly, boy, phly</title>
  <updated>2012-11-17T13:53:00+0000</updated>
  <generator uri="http://framework.zend.com" version="2.0.3">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog-atom.xml"/>
  <id>http://mwop.net/blog.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[My ZendCon Beautiful Software Talk]]></title>
    <published>2012-11-17T13:53:00+0000</published>
    <updated>2012-11-17T13:53:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-11-17-zendcon-beautiful-software.html"/>
    <id>http://mwop.net/blog/2012-11-17-zendcon-beautiful-software.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Once again, I spoke at <xhtml:a href="http://www.zendcon.com/">ZendCon</xhtml:a> this year; in talking with
<xhtml:a href="http://twitter.com/chwenz">Christian Wenz</xhtml:a>, we're
pretty sure that the two of us and <xhtml:a href="http://andigutmans.blogspot.com">Andi</xhtml:a> are the only ones who
have spoken at all eight events.</xhtml:p>
<xhtml:p>Unusually for me, I did not speak on a Zend Framework topic, and
had only one regular slot (I also co-presented a Design Patterns
tutorial with my team). That slot, however, became one of my
favorite talks I've delivered: "Designing Beautiful Software". I've
given this talk a couple times before, but I completely rewrote it
for this conference in order to better convey my core message:
beautiful software is maintainable and extensible; writing software
is a craft.</xhtml:p>
<xhtml:p>I discovered today that not only was it recorded, but it's been
<xhtml:a href="http://youtu.be/mQsQ6QZ4dGg">posted on YouTube</xhtml:a>:</xhtml:p>
<xhtml:iframe width="420" height="315" src="http://www.youtube.com/embed/mQsQ6QZ4dGg" frameborder="0" allowfullscreen=""/>
<xhtml:p>I've also <xhtml:a href="/slides/2012-10-25-BeautifulSoftware/BeautifulSoftware.html">posted
the slides</xhtml:a>.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend Server, ZF2, and Page Caching]]></title>
    <published>2012-11-05T21:25:00+0000</published>
    <updated>2012-11-05T21:25:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-11-05-zend-server-caching.html"/>
    <id>http://mwop.net/blog/2012-11-05-zend-server-caching.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Zend Server has a very cool <xhtml:a href="http://www.youtube.com/watch_v=i2XXn2SA5zM.html" target="_blank">Page Caching feature</xhtml:a>. Basically, you can provide URLs
or URL regular expressions, and tell Zend Server to provide
full-page caching of those pages. This can provide a tremendous
performance boost, without needing to change anything in your
application structure; simply enable it for a set of pages, and sit
back and relax.</xhtml:p>
<xhtml:p style="text-align: center;"><xhtml:img style="max-width: 100%; max-height: 100%;" src="/images/blog/2012-11-04-Server-CachingRule.png" alt="Zend Server Page Caching" title="Zend Server Page Caching"/></xhtml:p>
<xhtml:p>However, this feature is not entirely straight-forward when
using a framework that provides its own routing, such as ZF2. The
reason is because it assumes by default that each match maps to a
specific file on the filesystem, and prepares the caching based on
the actual <xhtml:em>file</xhtml:em> it hits. What this means for ZF2 and other
similar frameworks is that any page that matches will return the
cached version for the <xhtml:em>first</xhtml:em> match that also matches the
same <xhtml:em>file</xhtml:em> -- i.e., <xhtml:code>index.php</xhtml:code> in ZF2. That's
every page the framework handles. As an example, if I match on
<xhtml:code>/article/\d+</xhtml:code>, it matches this to the file
<xhtml:code>index.php</xhtml:code>, and then any other match that resolves to
<xhtml:code>index.php</xhtml:code> gets served that same page. Not handy.</xhtml:p>
<xhtml:p>The good part is that there's a way around this.</xhtml:p>
<xhtml:p>When creating or modifying a caching rule, simply look for the
text, "Create a separate cached page for each value of:" and click
the "Add Parameter" button. Select <xhtml:code>_SERVER</xhtml:code> from the
dropdown, and type <xhtml:code>[REQUEST_URI]</xhtml:code> for the value. Once
saved, each page that matches the pattern will be cached
separately.</xhtml:p>
<xhtml:p><xhtml:img style="max-width: 100%; max-height: 100%;" src="/images/blog/2012-11-04-Server-Caching-Request.png" alt="Zend Server Page Caching by Request" title="Zend Server Page Caching by Request"/></xhtml:p>
<xhtml:p>Note: the <xhtml:code>_SERVER</xhtml:code> key may vary based on what
environment/OS you're deployed in. Additionally, it may differ
based on how you define rewrite rules -- some frameworks and CMS
systems will append to the query string, for instance, in which
case you may want to select the "entire query string" parameter
instead of <xhtml:code>_SERVER</xhtml:code>; the point is, there's likely a way
for you to configure it.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[OpenShift, ZF2, and Composer]]></title>
    <published>2012-11-01T20:25:00+0000</published>
    <updated>2012-11-01T20:25:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-11-01-openshift-zf2-composer.html"/>
    <id>http://mwop.net/blog/2012-11-01-openshift-zf2-composer.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I was recently shopping around for inexpensive cloud hosting; I
want to try out a couple of ideas that may or may not have much
traffic, but which aren't suited for my VPS setup (the excellent
<xhtml:a href="http://servergrove.com/">ServerGrove</xhtml:a>); additionally,
I'm unsure how long I will maintain these projects. My budget for
this is quite small as a result; I'm already paying for hosting,
and am quite happy with it, so this is really for experimental
stuff.</xhtml:p>
<xhtml:p>I considered Amazon, Orchestra.io, and a few others, but was
concerned about the idea of a ~$50/month cost for something I'm
uncertain about.</xhtml:p>
<xhtml:p>When I asked in <xhtml:a href="irc://irc.freenode.net/zftalk.dev">#zftalk.dev</xhtml:a>, someone
suggested <xhtml:a href="http://openshift.redhat.com/">OpenShift</xhtml:a> as
an idea, and coincidentally, the very next day <xhtml:a href="http://www.zend.com/en/company/news/press/379_red-hat-expands-openshift-ecosystem-with-zend-partnership-to-offer-professional-grade-environment-for-php-developers">
Zend announced a partnership with RedHat surrounding OpenShift</xhtml:a>.
The stars were in alignment.</xhtml:p>
<xhtml:p>In the past month, in the few spare moments I've had (which
included an excellent OpenShift hackathon at ZendCon), I've created
a quick application that I've deployed and tested in OpenShift.
These are my findings.</xhtml:p>
<xhtml:h2>ZF2</xhtml:h2>
<xhtml:p>I didn't really have to do anything different to have <xhtml:a href="http://framework.zend.com/">zf2</xhtml:a> work; the standard
<xhtml:code>.htaccess</xhtml:code> provided in the skeleton application worked
flawlessly the first time (I've worked with some cloud environments
where this is not the case).</xhtml:p>
<xhtml:p>The only frustration I had was the default directory structure
OpenShift foists upon us:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
data/
libs/
misc/
php/
</xhtml:pre></xhtml:div>
<xhtml:p>This is not terrible, by any stretch. However, it's attempting
to dictate the application structure, which I'm not terribly happy
with -- particularly as my structure may vary based on the
framework I'm using (or not!), and because I may already have a
project written that I simply want to deploy.</xhtml:p>
<xhtml:p>In particular, the <xhtml:code>php</xhtml:code> directory is galling -- it's
simply the document root. Most frameworks I've used or seen call
the equivalent directory <xhtml:code>public</xhtml:code>, or <xhtml:code>web</xhtml:code>,
or <xhtml:code>html</xhtml:code> -- but never <xhtml:code>php</xhtml:code> (in large part
because the only PHP file under the document root in most
frameworks is the <xhtml:code>index.php</xhtml:code> that acts as the front
controller). It would be nice if this were configurable.</xhtml:p>
<xhtml:p>This conflicts a bit with how a ZF2 app is structured. I ended
up doing the following:</xhtml:p>
<xhtml:ul>
<xhtml:li>Removed <xhtml:code>php</xhtml:code> and symlinked my <xhtml:code>public</xhtml:code>
directory to it.</xhtml:li>
<xhtml:li>Removed <xhtml:code>libs</xhtml:code> and symlinked my <xhtml:code>vendor</xhtml:code>
directory to it.</xhtml:li>
<xhtml:li>Removed <xhtml:code>misc</xhtml:code> as I had no need to it.</xhtml:li>
</xhtml:ul>
<xhtml:p>Nothing too big, thankfully -- but problematic from the
perspective of, "I've already developed this app, but now I have to
make changes for it to work on a specific cloud vendor."</xhtml:p>
<xhtml:h2>Composer</xhtml:h2>
<xhtml:p>My next question was how to use <xhtml:a href="http://getcomposer.org/">Composer</xhtml:a> during my deployment
process, and some some googling <xhtml:a href="https://openshift.redhat.com/community/content/support-for-git-clone-on-the-server-aka-support-php-composerphar">
found some answers for me</xhtml:a>.</xhtml:p>
<xhtml:p>Basically, I needed to create a <xhtml:code>deploy</xhtml:code> task that
does two things:</xhtml:p>
<xhtml:ul>
<xhtml:li>Unset the <xhtml:code>GIT_DIR</xhtml:code> environment variable. Evidently,
the build process operates as part of a git hook, and since
Composer often uses git repositories, this can lead to
problems.</xhtml:li>
<xhtml:li>Change directory to <xhtml:code>OPENSHIFT_REPO_DIR</xhtml:code>, which is
where the application root (not document root!) lives.</xhtml:li>
</xhtml:ul>
<xhtml:p>Once I did those, I could run my normal composer installation.
The <xhtml:code>deploy</xhtml:code> task looks like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
#!/bin/bash
# .openshift/action_hooks/deploy
( unset GIT_DIR ; cd $OPENSHIFT_REPO_DIR ; /usr/local/zend/bin/php composer.phar install )
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>This leads into my next topic.</xhtml:p>
<xhtml:h2>Deployment</xhtml:h2>
<xhtml:p>First off, as you probably guessed from that last secton, there
<xhtml:strong>are</xhtml:strong> hooks for deployment -- it doesn't have to be
simply git. I like this, as I may have additional things I want to
do during deployment, such as retrieving and installing
site-specific configuration files, installing Composer-defined
dependencies (as already noted), etc.</xhtml:p>
<xhtml:p>Over all, this is pretty seamless, but it's not without issues.
I've been told that some of my issues are being worked on, so those
I won't bring up here. The ones that were a bit strange, and which
caught me by surprise, though, were:</xhtml:p>
<xhtml:ul>
<xhtml:li>Though the build process creates the site build from git, your
<xhtml:strong>submodules are not updated recursively</xhtml:strong>. This
tripped me up, as I was using <xhtml:a href="https://github.com/EvanDotPro/EdpMarkdown">EdpMarkdown</xhtml:a>, and
had installed it as a submodule. I ended up having to import it,
and its own submodule, directly into my project so that it would
work.</xhtml:li>
<xhtml:li>I installed the <xhtml:a href="http://www.mongodb.org/">MongoDB</xhtml:a>
cartridge. Ironically, it was not then enabled in Zend Server, and
I had to go do this. This should be turnkey.</xhtml:li>
<xhtml:li><xhtml:code>/usr/bin/php</xhtml:code> is not the same as
<xhtml:code>/usr/local/zend/bin/php</xhtml:code>. This makes no sense to me if
I've installed Zend Server as my base gear. Considering they're
different versions, this can be hugely misleading and lead to
errors. I understand there are reasons to have both -- so simply be
aware that if you use the Zend Server gear, your tasks likely
should use <xhtml:code>/usr/local/zend/bin/php</xhtml:code>.</xhtml:li>
</xhtml:ul>
<xhtml:h2>The good parts?</xhtml:h2>
<xhtml:ul>
<xhtml:li><xhtml:a href="https://openshift.redhat.com/community/faq/i-have-deployed-my-app-but-i-don%E2%80%99t-like-telling-people-to-visit-myapp-myusernamerhcloudcom-how-c">
You can alias an application to a DNS CNAME</xhtml:a> -- meaning you can
point your domain name to your OpenShift applications.
Awesome!</xhtml:li>
<xhtml:li>Simplicity of adding capabilities, such as Mongo, MySQL, Cron,
and others. In most cases, this is simply a "click on the button"
and it's installed and available.</xhtml:li>
<xhtml:li><xhtml:a href="http://www.zend.com/en/products/server">Zend
Server</xhtml:a>. For most PHP extensions, I can turn them on or off with
a few mouse clicks. If I want page-level caching, I don't have to
do anything to my application; I can simply setup some rules in the
Zend Server interface and get on with it, and enjoy tremendous
boosts to performance. I used to enjoy taming and tuning servers;
most days anymore, I just want them to work.</xhtml:li>
<xhtml:li><xhtml:a href="https://openshift.redhat.com/community/developers/remote-access">SSH</xhtml:a>
access to the server, with a number of commands to which I've been
given <xhtml:code>sudoer</xhtml:code> access. If you're going to sandbox
somebody, this is a fantastic way to do it. Oh, also: SSH tunnels
to services like Mongo and MySQL just work (via the
<xhtml:code>rhc-port-forward</xhtml:code> command).</xhtml:li>
</xhtml:ul>
<xhtml:h2>Summary</xhtml:h2>
<xhtml:p>Over all, I'm quite pleased. While it took me a bit to find the
various incantations I needed, the service is quite flexible. For
my needs, considering I'm doing experimental stuff, the price can't
be beat (the current developer preview is free). Considering most
stuff I do will fall into this or the basic tier, and that most
cartridges do not end up counting against your alotment of gears,
the pricing ($0.05/hour) is extremely competitive.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Screencasting on Linux]]></title>
    <published>2012-09-20T22:30:00+0000</published>
    <updated>2012-09-20T22:30:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-09-20-screencasting-on-linux.html"/>
    <id>http://mwop.net/blog/2012-09-20-screencasting-on-linux.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I've been wanting to do screencasts on Linux for some time now,
and my big stumbling block has been determining what tools to
use.</xhtml:p>
<xhtml:p>The <xhtml:strong>tl;dr</xhtml:strong>:</xhtml:p>
<xhtml:ul>
<xhtml:li>Use <xhtml:code>recordMyDesktop</xhtml:code> to record video clips, but
afterwards, re-encode them to AVI (<xhtml:a href="#script">see the script
I used</xhtml:a>)</xhtml:li>
<xhtml:li>Record audio to WAV, or convert compressed audio to WAV format
afterwards.</xhtml:li>
<xhtml:li>Use OpenShot to stitch clips together and layer audio and video
tracks.</xhtml:li>
<xhtml:li>Remember to reset the video length if you change the playback
rate.</xhtml:li>
<xhtml:li>Export to a Web + Vimeo profile for best results.</xhtml:li>
</xhtml:ul>
<xhtml:h2 id="toc_1.1">Stumbling Blocks</xhtml:h2>
<xhtml:p><xhtml:code>recordMyDesktop</xhtml:code> is a fairly simple tool, and allows
you to record actions you're taking, and simultaneously capture
audio. However, it creates an ".ogv" (Ogg Vorbis video file) --
which is basically useless for anybody not on Linux or FreeBSD.
Additionally, I often like to record in segments; this makes it
less likely that I'll make mistakes, and, if I do, I only need to
record a small segment again, not the entire thing.
<xhtml:code>recordMyDesktop</xhtml:code> is only for creating screencasts, not
merging them.</xhtml:p>
<xhtml:p>So, <xhtml:code>recordMyDesktop</xhtml:code> went into my toolbox for the
purpose of recording the video portion of my screencasts.</xhtml:p>
<xhtml:p>Which brings me to the next point: I also prefer to record the
audio separately from the screencast portion itself; this way I
don't get typing sounds in the recording, and I'm less likely to
lose my train of thought as I'm speaking. To this end, I ended up
using quite simply the "Sound Recorder" utility
(<xhtml:code>gnome-sound-recorder</xhtml:code>). It's not great, but with a
reasonable microphone, it gets the job done. I chose to record the
audio as MP3 files.</xhtml:p>
<xhtml:p>However, this means that I now have video and audio tracks. So
my toolbox needed a utility for overlaying tracks and laying them
out on a timeline independently.</xhtml:p>
<xhtml:p>I looked at a few different free tools for Linux, including
<xhtml:code>Avidemux</xhtml:code>, <xhtml:code>Cinelerra</xhtml:code>, and
<xhtml:code>PiTiVi</xhtml:code>. <xhtml:code>Avidemux</xhtml:code> was not featurful
enough, <xhtml:code>Cinelerra</xhtml:code> was too difficult to learn (it's
more of an advanced user's tool), and <xhtml:code>PiTiVi</xhtml:code> kept
crashing on me. So, I used the lazyweb, and tweeted a question
asking what others were using -- and the unanimous response was
<xhtml:code>OpenShot</xhtml:code> (<xhtml:a href="http://www.openshotvideo.com/">http://www.openshotvideo.com/</xhtml:a>).</xhtml:p>
<xhtml:p><xhtml:code>OpenShot</xhtml:code> hit the sweet spot for me -- it was easy
to pick up, and didn't crash. However, I discovered problems when I
exported my project to a video file. My video, regardless of
whether or not I changed the playback rate, always played at about
2X normal speed. The audio always truncated 1 to 2 seconds before
completion.</xhtml:p>
<xhtml:p>In doing some research, I discovered:</xhtml:p>
<xhtml:ul>
<xhtml:li>There are known issues with Ogg Vorbis video files. Evidently,
the compression creates issues when re-encoding the video to
another format.</xhtml:li>
<xhtml:li>Similarly, compressed audio can lead to issues such as
truncation.</xhtml:li>
</xhtml:ul>
<xhtml:p>Since <xhtml:code>recordMyDesktop</xhtml:code> doesn't allow you to select
an alternate video codec, I had to use <xhtml:code>mencoder</xhtml:code> to
transcode it to another format. I chose AVI (Audio Video
Interleave, a video container format developed by Microsoft), as I
knew it had widespread support, using an mpeg4 codec (also widely
supported). I used the following script, found at <xhtml:a href="http://askubuntu.com/questions/17309/video-converter-ogv-to-avi-or-another-more-common-format">
http://askubuntu.com/questions/17309/video-converter-ogv-to-avi-or-another-more-common-format</xhtml:a>,
in order to encode my files:</xhtml:p>
<xhtml:div id="script" class="example">
<xhtml:pre>
<xhtml:code language="bash">
for f in *.ogv;do
newFile=${f%.*}
mencoder "$f" -o "$newFile.avi" -oac mp3lame -lameopts fast:preset=standard -ovc lavc -lavcopts vcodec=mpeg4:vbitrate=4000
done
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>That solved the video issue, but I still had to solve the audio
issues. I quickly re-recorded one audio segment in Sound Recorder,
and told it to use the "Voice,Lossless (.wav type)". When I used
this version of the audio, I had no issues, other than the audio
length being mis-reported within <xhtml:code>OpenShot</xhtml:code>. Instead of
re-recording all segments, I installed the "Sound Converter"
utility (`sudo aptitude isntall soundconverter`), and used that to
convert all my MP3 files to WAV. Interestingly,
<xhtml:code>OpenShot</xhtml:code> reported the audio lengths correctly this
time; go figure.</xhtml:p>
<xhtml:p>Once that was done, I was able to start stitching everything
together. A few notes, in the hopes others learn from my
mistakes:</xhtml:p>
<xhtml:ul>
<xhtml:li>Several times, I wanted my video to playback slower. This is
very easy to do: right click on the clip, select "Properties", and
select the "Speed" tab, and adjust as necessary. However, that's
not all you need to do; you need to also re-adjust the
<xhtml:em>length</xhtml:em> of the clip. Simply take the existing length, and
divide it by the rate of play. As an example, if the length is 44
seconds, and you specify a 1/2 rate (0.5), you'd do 44 / 0.5 = 88,
and set the length of the clip to 88s.</xhtml:li>
<xhtml:li>If you find that <xhtml:code>OpenShot</xhtml:code> is reporting your audio
clip lengths incorrectly, use another tool to find the accurate
length, and then set the length to that. I typically rounded up to
the next second, as most tools were giving the floor value from
rounding.</xhtml:li>
<xhtml:li>I chose to export using the Web + Vimeo HD profile. This worked
perfectly for me. It created an mpeg4 file that I could preview in
a browser, and then upload without issues. Your mileage may
vary.</xhtml:li>
</xhtml:ul>
<xhtml:p>Hopefully, this will serve as a reasonable guide for others
foraying into screencasts on Linux!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[ZF2 Modules Quickstart (Screencast)]]></title>
    <published>2012-09-19T18:10:00+0000</published>
    <updated>2012-09-19T18:10:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-09-19-zf2-module-screencast.html"/>
    <id>http://mwop.net/blog/2012-09-19-zf2-module-screencast.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>One of the exciting features of the newly released Zend
Framework 2 is the new module system.</xhtml:p>
<xhtml:p>While ZF1 had modules, they were difficult to manage. All
resources for all modules were initialized on each request, and
bootstrapping modules was an onerous task. Due to the difficulties,
modules were never truly "plug-and-play", and thus no ecosystem
ever evolved for sharing modules.</xhtml:p>
<xhtml:p>In Zend Framework 2, we've architected the MVC from the ground
up to make modular applications as easy as possible. Within ZF2,
the MVC simply cares about events and services — and controllers
are simply one kind of service. As such, modules are primarily
about telling the MVC about services and wiring event
listeners.</xhtml:p>
<xhtml:p>To give you an example, in this tutorial, I'll show you how to
install the Zend Framework 2 skeleton application, and we'll then
install a module and see how easy it is to add it to the
application and then configure it.</xhtml:p>
<xhtml:p>To keep things simple, I'm using a unix-like environment. As
such, if you are on Windows, you may not have the same command-line
tools available. If you are in such a situation, perhaps try this
inside a Linux virtual machine.</xhtml:p>
<xhtml:iframe src="http://player.vimeo.com/video/49775540" width="500" height="281" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""/>
<xhtml:p><xhtml:a href="http://vimeo.com/49775540">Zend Framework 2 Module
Quickstart</xhtml:a></xhtml:p>
<xhtml:p>Let's start by creating a new project. We'll execute a few
commands to download a skeleton application archive and extract
it.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
% mkdir newproject
% cd newproject
% wget https://github.com/zendframework/ZendSkeletonApplication/tarball/master \
    -O ZendSkeletonApplication.tgz
% tar xzf ZendSkeletonApplication.tgz --strip-components=1
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The Zend Framework skeleton application can be downloaded
directly off of <xhtml:a href="https://github.com">GitHub</xhtml:a>. I'm
showing using the download from master, but you can also download a
tarball or zipball for individual tags as well. Because the
download URL does not include an extension, I use the
<xhtml:code>-O</xhtml:code> switch to tell <xhtml:code>wget</xhtml:code> what filename to
save to.</xhtml:p>
<xhtml:p><xhtml:code>tar</xhtml:code> has a nice option,
`<xhtml:code>--strip-components</xhtml:code>`, which allows you to tell it to
descend a certain number of levels deep into the archive when
deflating. Since I know the tarball has a top-level directory named
after the repository and a sha1, I'm simply telling
<xhtml:code>tar</xhtml:code> to skip that and give me the contents of its child
directory.</xhtml:p>
<xhtml:p>At this point you have the skeleton application, but it has no
dependencies — not even Zend Framework itself! Let's rectify that
situation. We'll use the dependency management tool <xhtml:a href="https://getcomposer.org/">Composer</xhtml:a> to do this. We include the
Composer phar file within the skeleton application to make this
fairly easy. Simply execute the following:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
% php composer.phar install
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>You may get a notice indicating that the composer version is
older, and to run "self-update"; you can ignore that for now.</xhtml:p>
<xhtml:p>If all goes well, you should now have Zend Framework installed.
Let's test it out. I'm going to use the built-in web server in PHP
5.4 to demonstrate.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
% cd public
% php -S localhost:8080
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>If I browse to <xhtml:code>http://localhost:8080</xhtml:code> I should now
see the landing page for the skeleton application.</xhtml:p>
<xhtml:img src="/images/screencasts/2012-09-19-zf2-module-screencast-01-zsa.png" style="width: 100%; height: 100%;"/>
<xhtml:p>Let's add a module to the application. Many sites require a
contact form. I've written one as a module some time ago, and
called it <xhtml:a href="https://github.com/weierophinney/PhlyContact">PhlyContact</xhtml:a>. To
install it, I'll edit my project's <xhtml:code>composer.json</xhtml:code> and
tell it about that dependency:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="json">
{
    "require": {
        "php": "&gt;=5.3.3",
        "zendframework/zendframework": "dev-master",
        "phly/phly-contact": "dev-master"
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>I know the name of the component from <xhtml:a href="http://packagist.org/">http://packagist.org/</xhtml:a>, and I'm telling
Composer that I want to use whatever the latest version is on its
master branch on GitHub. I happen to also know that PhlyContact
requires a dev-master version of Zend Framework, so I'll alter that
dependency for now.</xhtml:p>
<xhtml:p>Now, we need to tell composer to update our dependencies.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
% php composer.phar update
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>After executing the command, we should now see that it has
installed; this may take a little while.</xhtml:p>
<xhtml:p>You need to inform the application about the module. This is so
that we don't have to perform expensive file-system scanning
operations, but also to make it explicit in your code what modules
you're actually using. Enabling a module is usually as easy as
adding an entry to <xhtml:code>config\application.config.php</xhtml:code>:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
'modules' =&gt; array(
    'Application',
    'PhlyContact',
),
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>This particular module provides some reasonable defaults. In
particular, it uses a CAPTCHA adapter that doesn't require
additional configuration, and assumes that you will want to use the
default <xhtml:code>Sendmail</xhtml:code> mail transport. As such, we can
simply browse to it now. I happen to know that the module defines a
<xhtml:code>/contact</xhtml:code> end point. Let's fire up our PHP web server
again, and browse to that URL.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
% cd public
% php -S localhost:8080
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:img src="/images/screencasts/2012-09-19-zf2-module-screencast-02-contact.png" style="width: 100%; height: 100%;"/>
<xhtml:p>It just works!</xhtml:p>
<xhtml:p>One philosophy we have for distributable modules in Zend
Framework 2 is that you should not need to touch the code in
modules you install in your application. Instead, you should be
able to configure and override behavior within the application
configuration or in your application's site-specific modules. Let's
alter the contact module to:</xhtml:p>
<xhtml:ul>
<xhtml:li>first, change the URL it responds to, and</xhtml:li>
<xhtml:li>second, use the "file" mail transport.</xhtml:li>
</xhtml:ul>
<xhtml:p>Let's look at the default configuration. I'll browse to
<xhtml:code>vendor/phly/phly-contact/config/</xhtml:code> and look at the
<xhtml:code>module.config.php</xhtml:code> file.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
return array(
    'phly_contact' =&gt; array(
        'captcha' =&gt; array(
            'class' =&gt; 'dumb',
        ),
        'form' =&gt; array(
            'name' =&gt; 'contact',
        ),
        'mail_transport' =&gt; array(
            'class' =&gt; 'Zend\Mail\Transport\Sendmail',
            'options' =&gt; array(
            )
        ),
        'message' =&gt; array(
            /*
            'to' =&gt; array(
                'EMAIL HERE' =&gt; 'NAME HERE',
            ),
            'sender' =&gt; array(
                'address' =&gt; 'EMAIL HERE',
                'name'    =&gt; 'NAME HERE',
            ),
            'from' =&gt; array(
                'EMAIL HERE' =&gt; 'NAME HERE',
            ),
             */
        ),
    ),

    /* ... */

    'router' =&gt; array(
        'routes' =&gt; array(
            'contact' =&gt; array(
                'type' =&gt; 'Literal',
                'options' =&gt; array(
                    'route' =&gt; '/contact',
                    'defaults' =&gt; array(
                        '__NAMESPACE__' =&gt; 'PhlyContact\Controller',
                        'controller'    =&gt; 'Contact',
                        'action'        =&gt; 'index',
                    ),
                ),
                'may_terminate' =&gt; true,
                'child_routes' =&gt; array(
                    'process' =&gt; array(
                        'type' =&gt; 'Literal',
                        'options' =&gt; array(
                            'route' =&gt; '/process',
                            'defaults' =&gt; array(
                                'action' =&gt; 'process',
                            ),
                        ),
                    ),
                    'thank-you' =&gt; array(
                        'type' =&gt; 'Literal',
                        'options' =&gt; array(
                            'route' =&gt; '/thank-you',
                            'defaults' =&gt; array(
                                'action' =&gt; 'thank-you',
                            ),
                        ),
                    ),
                ),
            ),
        ),
    ),
    /* ... */
);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Okay, that's interesting. I can define the captcha and options
to use, the name of the contact form, the mail transport I want to
use, and even who the email is sent from and who it goes to. In
addition, it defines some routes.</xhtml:p>
<xhtml:p>I'll create a new file,
<xhtml:code>config/autoload/phly-contact.local.php</xhtml:code>. This is a
local configuration file that will not be checked into my version
control system. Now, let's add some configuration. First, I'll
configure my mail transport.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
return array(
    'phly_contact' =&gt; array(
        'mail_transport' =&gt; array(
            'class'   =&gt; 'Zend\Mail\Transport\File',
            'options' =&gt; array(
                'path' =&gt; 'data/mail/',
            ),
        ),
    ),
);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>I'm telling the module to use the <xhtml:code>File</xhtml:code> mail
transport, and telling the transport where I want messages written.
By default, Zend Framework calls <xhtml:code>chdir()</xhtml:code> to change
directory to the project root, so I can reference a directory
relative to that. I'm simply going to write to a
<xhtml:code>data/mail/</xhtml:code> directory. Let's create that, and make it
world-writable for now to ensure the web server can write to it.
(In production, you'd only want it writable by the web server
user.)</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
% mkdir -p data/mail
% chmod a+rwX data/mail
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Now, let's change the base URL the contact form responds to; I
want it to respond to <xhtml:code>/contact-us</xhtml:code>. Another principle
of re-usable modules in ZF2 is that we recommend creating tree
routes for each module, with the root of the tree being a literal
route. This makes it easy to alter the base for routing, without
needing to redefine all the routes in the module.</xhtml:p>
<xhtml:p>I'll add the following to my local configuration, then. I'll
simply override the parent route for my module, named "contact",
and point it at a different URL.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
'router' =&gt; array(
    'routes' =&gt; array(
        'contact' =&gt; array(
            'options' =&gt; array(
                'route' =&gt; '/contact-us',
            ),
        ),
    ),
),
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Let's see if all this worked! Once again, I'll fire up PHP's
built-in web server.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
% cd public
% php -S localhost:8080
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Now, let's browse to
<xhtml:code>http://localhost:8080/contact-us</xhtml:code> -- looks good! Just
as an experiment, let's try the previously configured URL,
<xhtml:code>http://localhost:8080/contact</xhtml:code>. We get a 404 now!</xhtml:p>
<xhtml:img src="/images/screencasts/2012-09-19-zf2-module-screencast-03-config.png" style="width: 100%; height: 100%;"/> <xhtml:img src="/images/screencasts/2012-09-19-zf2-module-screencast-04-404.png" style="width: 100%; height: 100%;"/>
<xhtml:p>Now, let's submit the form. I'll fill in some information; it's
asking for my email address, a subject line, and a message, as well
as for me to solve a simple CAPTCHA. Once I've done all that, I can
send it.</xhtml:p>
<xhtml:p>If all is well, we should now have a mail file in our data
directory. Let's check.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
% ls -l data/mail/
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>And now let's look at it.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="bash">
% cat data/mail/ZendMail_1347989389_1009740165.tmp
Date: Tue, 18 Sep 2012 12:29:49 -0500
From: me@mwop.net
Reply-To: me@mwop.net
Subject: [Contact Form] Suspense!

Suspenseful, isn't it?
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Looks good!</xhtml:p>
<xhtml:p>Zend Framework 2 provides a wonderful modular architecture that
will enable an ecosystem of 3rd party modules that should save you
time and energy when developing your applications. I've
demonstrated a simple one, a contact form, but many, many more
already exist, and with a stable release now available, you should
see that number grow. This is truly a wonderful step forward for
developers, and I hope you find it as exciting as I do.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[On Microframeworks]]></title>
    <published>2012-08-17T16:00:00+0000</published>
    <updated>2012-08-17T16:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-08-17-on-microframeworks.html"/>
    <id>http://mwop.net/blog/2012-08-17-on-microframeworks.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>A number of months ago, <xhtml:a href="http://funkatron.com/">Ed
Finkler</xhtml:a> started a discussion in the PHP community about
“<xhtml:a href="http://microphp.org/">MicroPHP</xhtml:a>”; to summarize, the
movement is about:</xhtml:p>
<xhtml:ul>
<xhtml:li>Building small, single-purpose libraries.</xhtml:li>
<xhtml:li>Using small things that work together to solve larger
problems.</xhtml:li>
</xhtml:ul>
<xhtml:p>I think there are some really good ideas that have come out of
this, and also a number of questionable practices<xhtml:sup><xhtml:a name="t1" href="#f1">1</xhtml:a></xhtml:sup>.</xhtml:p>
<xhtml:p>One piece in particular I've focussed on is the concept of
so-called “microframeworks”.</xhtml:p>
<xhtml:h2>What is a microframework?</xhtml:h2>
<xhtml:p>PHP has had microframeworks for quite some time<xhtml:sup><xhtml:a name="t2" href="#f2">2</xhtml:a></xhtml:sup>, though I only really first saw the term
being used around 3 years ago. The “grand-daddy” of modern-day
microframeworks can actually be traced to Ruby, however, and
specifically <xhtml:a href="http://www.sinatrarb.com">Sinatra</xhtml:a>.</xhtml:p>
<xhtml:p>Sinatra is not so much a framework as it is a domain-specific
language (DSL). The language and structure it created, however,
have been re-created in the vast majority of microframeworks you
see currently in the PHP arena. Specifically, it describes how to
map HTTP request methods and paths to the code that will handle
them. It borrowed route matching ideas from <xhtml:a href="http://rubyonrails.org/">Ruby on Rails</xhtml:a>, and relied on the fact
that Ruby uses the last value of a block as the return value.</xhtml:p>
<xhtml:p>As some simple examples:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="ruby">
get '/hello/:name' do |n|
    "Hello #{n}!"
end

post '/address'
    # create address
end

put '/address/:id' |i|
    # update address
end

get '/feed.?:format?', :provides =&gt; ['rss', 'atom', 'xml'] do
    builder :feed
end
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The language is expressive, and allows the developer to focus on
two things:</xhtml:p>
<xhtml:ul>
<xhtml:li>What are the specific entry points (URIs) for the
application?</xhtml:li>
<xhtml:li>What needs to be done for each specific entry point?</xhtml:li>
</xhtml:ul>
<xhtml:p>I'd argue that the above two points are the defining
characteristics of modern microframeworks. Typically, the entry
points are given the term “routing ”, and the second corresponds to
“controllers”.</xhtml:p>
<xhtml:h2>PHP implementations</xhtml:h2>
<xhtml:p>I'd argue one of the earliest microframework implementations,
though it wasn't termed as such, was <xhtml:a href="http://dev.horde.org/routes/">Horde Routes</xhtml:a><xhtml:sup><xhtml:a name="t3" href="#f3">3</xhtml:a></xhtml:sup> (which was itself inspired by <xhtml:a href="http://routes.readthedocs.org/en/latest/index.html">Python
Routes</xhtml:a>, in turn inspired by the Rails routing system, like
Sinatra). It follows the two principles I outlined above: it allows
defining routes (entry points), and mapping them to controllers.
Controllers for Routes are simply classes, and a route must provide
both a controller and an action in the match, with the latter
corresponding to a method on the controller class.</xhtml:p>
<xhtml:p>Since around 2009, I've seen an increasing number of new PHP
microframeworks<xhtml:sup><xhtml:a name="t4" href="#f4">4</xhtml:a></xhtml:sup> that follow
in the steps of Sinatra and Horde. In the various implementations
I've looked at, instead of using a DSL, the authors have all opted
for either a procedural or OOP interface. Starting with PHP 5.3,
most authors have also primarily targetted any PHP callable as a
controller, favoring callbacks specifically. The fundamental ideas
remain the same as Sinatra, however:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
/* Procedural */
get('/hello/:name', function ($n) {
    return "Hello {$n}!";
});

post('/address', function () {
    // create address
});

put('/address/:id' function ($i) {
    // update address
});

get('/feed.?:format?', function($feed, $format) {
    return builder($feed, $format);
});

/* OOP */
$app-&gt;get('/hello/:name', function ($n) {
    return "Hello {$n}!";
});

$app-&gt;post('/address', function () {
    // create address
});
end

$app-&gt;put('/address/:id', function ($i) {
    // update address
});

$app-&gt;get('/feed.?:format?', function ($feed, $format) use ($app) {
    return $app-&gt;builder($feed, $format);
})-&gt;constraints(['format' =&gt; '/^(rss|atom|xml)$/']);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>One key difference I've witnessed in the implementations is
surrounding how route matches are passed to the callback. In the
examples above, they are passed as individual arguments to the
handler. Some, however, opt for an approach more like Sinatra,
which passes a single "params" argument into the scope of the
handler. This approach tends to be more expedient both from an
implementation standpoint as well as a performance standpoint, as
it does not require reflection to determine name and position of
arguments, and makes handling wildcard arguments simpler. I've seen
this latter approach handled several ways:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
// Pass in route match parameters as an argument.
$app-&gt;get('/feed.:format', function ($params) {
    $format = $params['format'];
});

// Pass in the $app instance, and retrieve route 
// match parameters from it.
$app-&gt;get('/feed.:format', function ($app) {
    $format = $app-&gt;params('format');
});

// Curry in the $app instance when desired, and 
// retrieve route match parameters from it.
$app-&gt;get('/feed.:format', function () use ($app) {
    $format = $app-&gt;params('format');
});
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Another difference I've seen is in how route constraints,
defaults, and names are handled. The most elegant solutions usually
allow chaining method calls in order to alter this data:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
$app-&gt;get('/feed.:format', function ($app) {
  })-&gt;constraints(['format' =&gt; '/^(atom|xml|json)$/'])
    -&gt;name('feed');
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>One common feature I've seen is the ability to generate URLs
based on the defined routes. Most commonly, this is a function or
method <xhtml:code>urlTo()</xhtml:code>, which takes a route name, and an
associative array of replacements.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
echo $app-&gt;urlTo('feed', ['format' =&gt; 'atom']);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>That's it in a nutshell: the ability to match HTTP request
methods and path information, and map it to controllers/handlers,
and to generate URLs based on those present in the application.</xhtml:p>
<xhtml:h2>What are they good for?</xhtml:h2>
<xhtml:p>In my research and experience, microframeworks have three
typical use cases:</xhtml:p>
<xhtml:ol>
<xhtml:li><xhtml:b>Prototyping.</xhtml:b> Because of their simplicity,
microframeworks are fantastic for prototyping a basic website. Very
often, in the early stages of a site, you have a limited number of
pages, and most often simply need to render a template with limited
variable substitutions. Microframeworks are a perfect fit for
this.</xhtml:li>
<xhtml:li><xhtml:b>APIs</xhtml:b>. API needs are usually quite well-defined, and
often involve a small, finite number of URLs. The logic required is
usually already encapsulated in business objects, so the
application layer is simply for filtering and returning a
representation. Microframeworks again offer a nice fit.</xhtml:li>
<xhtml:li><xhtml:b>Small, mostly static sites</xhtml:b>. Similar to the first point,
if you know the site will be relatively small and mostly static,
then the minimal overhead of a microframework is often a good
fit.</xhtml:li>
</xhtml:ol>
<xhtml:h2>Where do microframeworks fail?</xhtml:h2>
<xhtml:p>Because of the rather declarative nature of microframeworks, and
the typically 1:1 mapping of a route to a controller,
microframeworks do not tend to promote code re-use. Additionally,
this extends to how microframework applications are organized:
usually, there are no clear guidelines on how to organize routes
and controllers, much less separate them into multiple files. This
can lead to maintenance issues as the application grows, as well as
logistical issues whenever you need to add new routes and
controllers (do they go at the top, or bottom? are there other
routes that could potentially match as well? etc.).</xhtml:p>
<xhtml:p>Additionally, though many frameworks offer ways to alter the
workflow of the application either via hooks, events, or
“middleware”<xhtml:sup><xhtml:a name="t5" href="#f5">5</xhtml:a></xhtml:sup>, most of these
are limited in scope, often non-reusable, and often non-stackable.
As such, comprehensive manipulation of the application workflow is
out of reach.</xhtml:p>
<xhtml:p>One other area that is overlooked, however, is one I find
curious, particularly in light of the MicroPHP movement: so much of
the underlying plumbing is basically the same, yet every
microframework re-implements it. Specifically:</xhtml:p>
<xhtml:ul>
<xhtml:li>Routing is basically the same across most implementations,
following the same basic specifications outlined in Rails. There
are very few differences in the public APIs.</xhtml:li>
<xhtml:li>Request and Response object abstraction is largely the same as
well, providing access to query/post/cookie/session/etc. parameters
through roughly equivalent APIs.</xhtml:li>
<xhtml:li>Many implement their own view layers.<xhtml:sup><xhtml:a name="t6" href="f6">6</xhtml:a></xhtml:sup></xhtml:li>
</xhtml:ul>
<xhtml:p>Most of this code should be considered commodity code at this
point. There are several outstanding view layers and templating
engines available (Smarty, Twig, Savant, Zend\View). Standalone
routing libraries exist such as Horde Routes, and even those
bundled with frameworks are often available separately via Composer
or Pyrus; the same is true with Request and Response object
abstraction. It seems to me that a few microframework authors
should be working on abstracting these concerns, and then focussing
their efforts on differentiators in their own microframeworks.</xhtml:p>
<xhtml:h2>An experiment</xhtml:h2>
<xhtml:p>Building on my last point, I looked at the APIs of <xhtml:a href="http://limonade-php.github.com/">Limonade</xhtml:a> and <xhtml:a href="http://www.slimframework.com/">Slim Framework</xhtml:a>, and built up a
specification for a microframework. I then matched as many pieces
of it as possible to existing components in <xhtml:a href="http://packages.zendframework.com/">ZF2</xhtml:a>, and started
building.</xhtml:p>
<xhtml:p>In a matter of a few hours, I had written up a complete test
suite<xhtml:sup><xhtml:a name="t7" href="#f7">7</xhtml:a></xhtml:sup> and all code for a
microframework, featuring the following (this is basically the
testdox output from the unit test suite):</xhtml:p>
<xhtml:ul>
<xhtml:li>Lazy loads request</xhtml:li>
<xhtml:li>Lazy loads response</xhtml:li>
<xhtml:li>Request is injectible</xhtml:li>
<xhtml:li>Response is injectible</xhtml:li>
<xhtml:li>Halt should raise halt exception</xhtml:li>
<xhtml:li>Response should contain status provided to halt</xhtml:li>
<xhtml:li>Response should contain message provided to halt</xhtml:li>
<xhtml:li>Stop should raise halt exception</xhtml:li>
<xhtml:li>Response should remain unaltered after stop</xhtml:li>
<xhtml:li>Redirect should raise halt exception</xhtml:li>
<xhtml:li>Redirect should set 302 response status by default</xhtml:li>
<xhtml:li>Redirect should set response status based on provided status
code</xhtml:li>
<xhtml:li>Redirect should set location header</xhtml:li>
<xhtml:li>Map creates a segment route when provided with a string
route</xhtml:li>
<xhtml:li>Map can receive a route object</xhtml:li>
<xhtml:li>Passing invalid route raises exception</xhtml:li>
<xhtml:li>Map can receive a callable</xhtml:li>
<xhtml:li>Passing invalid controller to route does not immediately raise
exception</xhtml:li>
<xhtml:li>Accessing invalid controller raises exception</xhtml:li>
<xhtml:li>Passing invalid method to route via method raises
exception</xhtml:li>
<xhtml:li>Can set methods route responds to singly</xhtml:li>
<xhtml:li>Can set methods route responds to as array</xhtml:li>
<xhtml:li>Can set methods route responds to as multiple arguments</xhtml:li>
<xhtml:li>Can specify additional method types to respond to</xhtml:li>
<xhtml:li>Can specify route name</xhtml:li>
<xhtml:li>Adding route using method type creates route that responds to
that method type</xhtml:li>
<xhtml:li>Running with no matching routes raises page not found
exception</xhtml:li>
<xhtml:li>Routing sets list of named routes</xhtml:li>
<xhtml:li>Routing sets lists of routes by method</xhtml:li>
<xhtml:li>Successful routing dispatches controller</xhtml:li>
<xhtml:li>Unsuccessful routing triggers 404 event</xhtml:li>
<xhtml:li>Calling halt triggers halt event</xhtml:li>
<xhtml:li>Invalid controller triggers 501 event</xhtml:li>
<xhtml:li>Exception raised in controller triggers 500 event</xhtml:li>
<xhtml:li>Can pass to next matching route</xhtml:li>
<xhtml:li>Url for helper assembles url based on name provided</xhtml:li>
<xhtml:li>Url for helper assembles url based on name and params
provided</xhtml:li>
<xhtml:li>Url for helper assembles url based on current route match when
no name provided</xhtml:li>
<xhtml:li>Composes logger instance by default</xhtml:li>
<xhtml:li>Can inject specific logger instance</xhtml:li>
<xhtml:li>Mustache view is used by default</xhtml:li>
<xhtml:li>Can inject alternate view instance</xhtml:li>
<xhtml:li>Render renders a template to the response</xhtml:li>
<xhtml:li>View model returns mustache view model by default</xhtml:li>
<xhtml:li>Subsequent calls to view model return separate instances</xhtml:li>
<xhtml:li>Can provide view model prototype</xhtml:li>
</xhtml:ul>
<xhtml:p>I utilized ZF2's routing library from its MVC component, the
request and response objects from its HTTP component, its Log
component, and the Session component. These had a few other
dependencies, but nothing terribly onerous.</xhtml:p>
<xhtml:p>For the view, I used my own <xhtml:a href="http://weierophinney.github.com/phly_mustache">phly_mustache</xhtml:a>,
and provided a basic "view model" implementation that receives the
application instance, thus allowing the ability to call application
helpers (such as url generation).</xhtml:p>
<xhtml:p>To make installation simple, I used <xhtml:a href="http://getcomposer.org">Composer</xhtml:a> to manage my dependencies on
specific ZF2 components and for phly_mustache. The microframework
contains only the code it needs to get its work done, leveraging
the work of others whenever possible.</xhtml:p>
<xhtml:p>This post is not meant as a way to announce a new
microframework, however.<xhtml:sup><xhtml:a name="t8" href="#f8">8</xhtml:a></xhtml:sup>
The point of the experiment was to prove something: microframeworks
are trivially easy to write, <xhtml:em>particularly if you follow the
principals of MicroPHP, and re-use existing code</xhtml:em>. Just because
code comes from a framework or a third-party library does not make
it suspect or inferior; in fact, whenever possible, you should
leverage such code so you can focus on <xhtml:em>writing awesome
applications</xhtml:em>.</xhtml:p>
<xhtml:h2>Lessons learned</xhtml:h2>
<xhtml:p>I really like microframeworks for specific problems:
prototyping, APIs, and small, simple sites. I think they are
ideally suited for these tasks. That said, I'd love to see some
solid libraries targetting the fundamental, shared aspects of these
efforts: routing, request and response abstraction, etc. With
dependency management tools such as Composer and Pyrus, having
required dependencies is not a big deal anymore, and re-use should
be encouraged.</xhtml:p>
<xhtml:p>Also, writing a microframework is an excellent coding exercise.
It helps a developer appreciate the complexities of abstraction
while limiting the number of moving parts. I highly recommend it as
an exercise -- but do it using available components, and be
prepared to throw it away and instead collaborate with others, or
adopt something which better solves both the problems you have and
the problems you anticipate.</xhtml:p>
<xhtml:p>In sum: <xhtml:em>Use the right tool for the job</xhtml:em>. If you foresee
expanding requirements in your project's future, you may want to
evaluate a full-stack framework,<xhtml:sup><xhtml:a name="t9" href="#f9">9</xhtml:a></xhtml:sup> or consider building something robust that suits
your specific project's needs. Use microframeworks where and when
they make sense.</xhtml:p>
<xhtml:h4>Afterword</xhtml:h4>
<xhtml:p>I'm well aware that Fabien Potencier has written <xhtml:a href="http://fabien.potencier.org/article/50/create-your-own-framework-on-top-of-the-symfony2-components-part-1">
a comprehensive series of posts on creating a microframework using
Symfony 2 components</xhtml:a>. I deliberately chose not to read them
until (a) ZF2 was almost ready to release, and (b) I'd had a chance
to formulate my own opinions on microframeworks. They're an
excellent read, however, and show a nice progression of development
from flat PHP to a fully functional microframework; click the link
and see for yourself.</xhtml:p>
<xhtml:h4>Footnotes</xhtml:h4>
<xhtml:ul>
<xhtml:li><xhtml:sup><xhtml:a name="f1" href="#t1">1</xhtml:a></xhtml:sup> In particular, I feel
that the movement (a) disparages components from larger libraries
simply because they originate from a larger library, and (b)
distrust any code that has additional dependencies. This latter I
find truly puzzling, as I'd think it fits the idea of “use small
things that work together to solve larger problems.” If the code
solves a particular problem and allows you to focus on a larger
problem, where it originates and the number of dependencies should
not be an issue.</xhtml:li>
<xhtml:li><xhtml:sup><xhtml:a name="f2" href="#t2">2</xhtml:a></xhtml:sup> In fact, my first
foray into MVC in PHP was writing a clone of Perl's <xhtml:a href="http://cgi-app.org/">CGI::Application</xhtml:a>, which in many ways is
also a microframework.</xhtml:li>
<xhtml:li><xhtml:sup><xhtml:a name="f3" href="#t3">3</xhtml:a></xhtml:sup> Trivia: Both authors
of Horde Routes worked at Zend when I first started at the company,
and Mike Naberezny wrote the very first lines of code for Zend
Framework.</xhtml:li>
<xhtml:li><xhtml:sup><xhtml:a name="f4" href="#t4">4</xhtml:a></xhtml:sup> I swear, you see new
ones on Github daily, and on <xhtml:a href="http://phpdeveloper.org/">PHP
Developer</xhtml:a> at least once a week.</xhtml:li>
<xhtml:li><xhtml:sup><xhtml:a name="f5" href="#t5">5</xhtml:a></xhtml:sup> <xhtml:a href="http://www.slimframework.com">Slim</xhtml:a> has this concept.
Basically, any callables placed between the route string and the
last callable when defining a route -- i.e., the “middle”
arguments, and thus middleware -- will be executed in order prior
to attempting to execute the controller.</xhtml:li>
<xhtml:li><xhtml:sup><xhtml:a name="f6" href="#t6">6</xhtml:a></xhtml:sup> <xhtml:a href="http://www.slimframework.com">Slim</xhtml:a> is an outlier here, as it
utilizes <xhtml:a href="http://twig.sensiolabs.org/">Twig</xhtml:a> by
default.</xhtml:li>
<xhtml:li><xhtml:sup><xhtml:a name="f7" href="#t7">7</xhtml:a></xhtml:sup> I'm sure that my TDD
experiment will warm the soul of <xhtml:a href="http://www.littlehart.net/atthekeyboard/" alt="Chris Hartjes">the
Grumpy Programmer</xhtml:a>.</xhtml:li>
<xhtml:li><xhtml:sup><xhtml:a name="f8" href="#t8">8</xhtml:a></xhtml:sup> That said, if you want
to look at the results, you can <xhtml:a href="http://github.com/weierophinney/phlyty">find Phlyty on
Github</xhtml:a>.</xhtml:li>
<xhtml:li><xhtml:sup><xhtml:a name="f9" href="#t9">9</xhtml:a></xhtml:sup> As you may guess, I'm
biased towards <xhtml:a href="http://framework.zend.com/">Zend
Framework</xhtml:a>. However, you should always carefully evaluate a
framework against your project's needs.</xhtml:li>
</xhtml:ul>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[ZF2's New Controller::init()]]></title>
    <published>2012-07-30T20:40:00+0000</published>
    <updated>2012-07-31T02:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-07-30-the-new-init.html"/>
    <id>http://mwop.net/blog/2012-07-30-the-new-init.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>In Zend Framework 1, controller's had an <xhtml:code>init()</xhtml:code>
method, which was called after the controller was instantiated. The
reason for it was to encourage developers not to override the
constructor, and thus potentially break some of the functionality
(as a number of objects were injected via the constructor).
<xhtml:code>init()</xhtml:code> was useful for doing additional object
initialization.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
class MyController extends Zend_Controller_Action
{
    public function init()
    {
        // do some stuff!
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>But this feature is missing from ZF2; how can we accomplish this
sort of pattern?</xhtml:p>
<xhtml:h2>Constructor Overriding</xhtml:h2>
<xhtml:p>Why didn't we add the <xhtml:code>init()</xhtml:code> method in Zend
Framework 2? Because we don't have a constructor by default, and
also to reduce overall method calls; if a controller won't be
overriding the method, there's no reason to make the call in the
first place. So, that means, in ZF2, unlike ZF1, to do the same
thing, you can simply define a constructor in your controller:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
use Zend\Mvc\Controller\AbstractActionController;

class MyController extends AbstractActionController
{
    public function __construct()
    {
        // do some stuff!
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Except there's one specific and often-needed use case where this
fails: if you want to wire listeners to the controller's event
manager.</xhtml:p>
<xhtml:h2>Events</xhtml:h2>
<xhtml:p>Why does this fail with the event manager? Because when we're in
the constructor, we don't yet have an <xhtml:code>EventManager</xhtml:code>
instance! The event manager instance is injected after
instantiation. As such, we need to attach to it once we know we
have an event manager. Which is... when it's set. This can be done
very simply by overriding the <xhtml:code>setEventManager()</xhtml:code>
method. In the next example, we'll define a listener for the
"dispatch" event that redirects if certain criteria is not met.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
use Zend\EventManager\EventManagerInterface;
use Zend\Mvc\Controller\AbstractActionController;

class MyController extends AbstractActionController
{
    public function setEventManager(EventManagerInterface $events)
    {
        parent::setEventManager($events);

        $controller = $this;
        $events-&gt;attach('dispatch', function ($e) use ($controller) {
            $request = $e-&gt;getRequest();
            $method  = $request-&gt;getMethod();
            if (!in_array($method, array('PUT', 'DELETE', 'PATCH'))) {
                // nothing to do
                return;
            }

            if ($controller-&gt;params()-&gt;fromRoute('id', false)) {
                // nothing to do
                return;
            }

            // Missing identifier! Redirect.
            return $controller-&gt;redirect()-&gt;toRoute(/* ... */);
        }, 100); // execute before executing action logic
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The beauty of this is that we only override when we need to, and
we override in the specific context we're trying to influence.
Additionally, we're only registering the event listener if this
particular controller is instantiated -- which helps reduce our
overall number of listeners, and thus shapes our call graph based
on the controller invoked.</xhtml:p>
<xhtml:h2>Other dependencies</xhtml:h2>
<xhtml:p>As you'll likely note, the event manager is not the only case
where you may need to follow a similar pattern. Any time your
initialization logic may be based on a dependency, you'll want to
override the setter in which that dependency is injected.</xhtml:p>
<xhtml:p><xhtml:em>Got any ZF2 tips of your own to share? Blog them!</xhtml:em></xhtml:p>
<xhtml:h2>Update: ServiceManager</xhtml:h2>
<xhtml:p>A few folks in the comments were remarking that the felt that
omitting the <xhtml:code>init()</xhtml:code> method makes it harder for
developers to identify when and where to do initialization logic,
particularly when you may be working with multiple
dependencies.</xhtml:p>
<xhtml:p>Which made me realize there's another place I missed, one that's
potentially even better suited to initialization: the
<xhtml:code>ServiceManager</xhtml:code>.</xhtml:p>
<xhtml:p>Basically, if you find yourself having complex initialization
needs, or many dependencies, you should be building a factory for
your controller, and wiring it to the <xhtml:code>ServiceManager</xhtml:code>.
This can happen in one of several places, but my preference is in
my module's <xhtml:code>Module</xhtml:code> class, in the
<xhtml:code>getControllerConfig()</xhtml:code> method. This method returns
configuration for the controller manager that instantiates,
validate, and injects controllers; it's basically a type of
<xhtml:code>ServiceManager</xhtml:code>, and, in fact, has access to the main
application's instance. I'll take the previous example, and wire it
in the context of a factory:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
namespace My

use Zend\EventManager\EventManagerInterface;

class Module
{
    /*
     * Assume some other methods, such as getConfig(), etc.
     * Also assume that a route will return a controller named
     * "My\Controller\My" which we assume will reference a controller
     * within our current namespace.
     */

    public function getControllerConfig()
    {
        return array('factories' =&gt; array(
            'My\Controller\My' =&gt; function ($controllers) {
                $services   = $controllers-&gt;getServiceLocator();
                $controller = new Controller\MyController();
                $events     = $services-&gt;get('EventManager')

                $events-&gt;attach('dispatch', function ($e) use ($controller) {
                    $request = $e-&gt;getRequest();
                    $method  = $request-&gt;getMethod();
                    if (!in_array($method, array('PUT', 'DELETE', 'PATCH'))) {
                        // nothing to do
                        return;
                    }

                    if ($controller-&gt;params()-&gt;fromRoute('id', false)) {
                        // nothing to do
                        return;
                    }

                    // Missing identifier! Redirect.
                    return $controller-&gt;redirect()-&gt;toRoute(/* ... */);
                }, 100); // execute before executing action logic

                $controller-&gt;setEventManager($events);
                return $controller;
            };
        ));
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The above will create the controller, grab an event manager
instance, attach the listener, and then inject the event manager
into the controller. If you wanted to do more complex work, you
definitely could -- and this would be the place to do it.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[ZF2 Forms in Beta5]]></title>
    <published>2012-07-05T20:40:00+0000</published>
    <updated>2012-07-05T20:40:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-07-02-zf2-beta5-forms.html"/>
    <id>http://mwop.net/blog/2012-07-02-zf2-beta5-forms.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Forms are a nightmare for web development. They break the
concept of separation of concerns:</xhtml:p>
<xhtml:ul>
<xhtml:li>They have a <xhtml:em>display</xhtml:em> aspect (the actual HTML form)</xhtml:li>
<xhtml:li>They have a <xhtml:em>validation</xhtml:em> aspect</xhtml:li>
<xhtml:li>And the two mix, as you need to display validation error
messages.</xhtml:li>
</xhtml:ul>
<xhtml:p>On top of that, the submitted data is often directly related to
your domain models, causing more issues:</xhtml:p>
<xhtml:ul>
<xhtml:li>Not all elements will have a 1:1 mapping to the domain model --
buttons, CSRF protection, CAPTCHAs, etc. usually are
application-level concerns, but not domain issues.</xhtml:li>
<xhtml:li>Names valid for your domain model may not be valid names for
HTML entities.</xhtml:li>
</xhtml:ul>
<xhtml:p>Add to this that the validation logic may be re-usable outside
of a forms context, and you've got a rather complex problem.</xhtml:p>
<xhtml:h2>Forms in ZF2</xhtml:h2>
<xhtml:p>Starting in 2.0.0beta4, we offerred a completely rewritten Form
component. In fact, it's not just a Form component -- a new
component, InputFilter, was also added. InputFilter is a component
that provides re-usable validation and normalization logic, and can
be used with forms or your domain model. The Form component is
basically a bridge between domain models/validation and the view
layer.</xhtml:p>
<xhtml:p>However, this means a bit more complexity for the end-user. You
now must:</xhtml:p>
<xhtml:ul>
<xhtml:li>Create your form, which consists of elements and
fieldsets.</xhtml:li>
<xhtml:li>Create an input filter, consisting of inputs.</xhtml:li>
<xhtml:li>Inform the form of the input filter.</xhtml:li>
</xhtml:ul>
<xhtml:p>It's a bit of work. And there's more: we wanted to simplify the
process of getting your validated values into your domain objects.
For this, we added a concept of <xhtml:em>hydrators</xhtml:em>, which map the
validated form values to an object you <xhtml:em>bind</xhtml:em> to the form.
Now you have <xhtml:em>three</xhtml:em> pieces to keep track of -- form (and
its elements), input filter (and its inputs), and a hydrator.</xhtml:p>
<xhtml:p>So, a few developers had an idea: use annotations on the domain
model objects to define these items, letting you keep it all in one
place.</xhtml:p>
<xhtml:p>While I'm not normally a fan of annotations, I immediately saw
the appeal in this particular situation.</xhtml:p>
<xhtml:h2>An Example</xhtml:h2>
<xhtml:p>Let's consider a very simple example. The following domain
object represents data for a user, and includes a variety of
elements we'd represent in a form.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
namespace MyVendor\Model;

use Zend\Form\Annotation;

/**
 * @Annotation\Hydrator("Zend\Stdlib\Hydrator\ObjectProperty")
 * @Annotation\Name("user")
 */
class User
{
    /**
     * @Annotation\Attributes({"type":"text" })
     * @Annotation\Validator({"type":"Regex","options":{"regex":"/^[a-zA-Z][a-zA-Z0-9_-]{1,19}/"}})
     * @Annotation\Options({"label":"Username:"})
     */
    public $username;

    /**
     * @Annotation\Required(false)
     * @Annotation\Attributes({"type":"text" })
     * @Annotation\Options({"label":"Your full name:"})
     */
    public $fullname;

    /**
     * @Annotation\Type("Zend\Form\Element\Email")
     * @Annotation\Options({"label":"Your email address:"})
     */
    public $email;

    /**
     * @Annotation\Type("Zend\Form\Element\Url")
     * @Annotation\Options({"label":"Your home page:"})
     */
    public $uri;
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>So, what does the above do?</xhtml:p>
<xhtml:ul>
<xhtml:li>The "name" annotation gives a form or element a specific
name.</xhtml:li>
<xhtml:li>The "attributes" annotation indicates what attributes to
compose into the form or element.</xhtml:li>
<xhtml:li>Similarly, the "options" annotation specifies options to
compose into an element. These typically include the label, but may
include other configuration that doesn't have an exact analog in
the HTML attributes.</xhtml:li>
<xhtml:li>The "validator" annotation indicates a validator to compose for
the input for a given element. We also ship a "filter"
annotation.</xhtml:li>
<xhtml:li>The "type" annotation indicates a class to use for that
particular form or element. In the specific cases used above, the
elements actually provide default filters and validators,
simplifying setup further!</xhtml:li>
<xhtml:li>Last, but not least, the "hydrator" annotation indicates a
<xhtml:code>Zend\Stdlib\Hydrator</xhtml:code> implementation to use to relay
data between the form and the object. I'll cover this more
shortly.</xhtml:li>
</xhtml:ul>
<xhtml:p>So, let's now turn to creating a form and consuming it.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
use MyVendor\Model\User;
use Zend\Form\Annotation\AnnotationBuilder;

$user    = new User();
$builder = new AnnotationBuilder();
$form    = $builder-&gt;createForm($user);

$form-&gt;bind($user);
$form-&gt;setData($dataFromSomewhere);
if ($form-&gt;isValid()) {
    // $user is now populated!
    echo $form-&gt;username;
    return;
} else {
    // probably need to render the form now.
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>You're not quite done, really -- most likely, you'll need to
include a submit button of some sort, and it's always good practice
to include a token to prevent CSRF injections. But with the above,
you've accomplished the major headaches of setting up a form -- and
using the data -- with minimal fuss.</xhtml:p>
<xhtml:h2>Much more!</xhtml:h2>
<xhtml:p>The form support in ZF2 offers a ton of other features, some of
which are not specific to forms even.</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:p>ZF2 supports a variety of hydration strategies, which allow you
to pass data to and from objects. The example above uses one that
suggests a 1:1 mapping between the inputs and the object
properties; other strategies include using
<xhtml:code>ArrayObject</xhtml:code>, using class mutator methods, and
more.</xhtml:p>
<xhtml:p>At this point, you can hydrate an entire form, as well as
individual fieldsets!</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>You can provide custom annotations. While this feature is not
documented yet, you can tell the <xhtml:code>AnnotationBuilder</xhtml:code>
about additional annotation classes, as well as provide listeners
for those annotations so that they can interact with the form
construction process. As an example, one contributor has already
used these features to utilize <xhtml:a href="http://doctrine-project.org">Doctrine</xhtml:a> annotations to inform
the builder about the name of a property, as well as indicate
validators. (Side note: ZF2 now uses Doctrine's annotation syntax
and parser by default.)</xhtml:p>
</xhtml:li>
<xhtml:li>
<xhtml:p>There are a number of features targetting collections, so that
your client-side code can return arbitrary numbers of a specific
fieldset type (e.g., collecting addresses for an applicant), and
the form will be able to validate each. You can <xhtml:a href="http://www.michaelgallego.fr/blog/?p=190">read more about those
features from the author himself</xhtml:a>.</xhtml:p>
</xhtml:li>
</xhtml:ul>
<xhtml:p>These features are all now available starting with the newly
released 2.0.0beta5 version, which you can grab from the <xhtml:a href="http://packages.zendframework.com/">ZF2 packages site</xhtml:a>.</xhtml:p>
<xhtml:p>I'm really excited with the solutions we've created in ZF2, and
even more excited to see people put them to use!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[On Visibility in OOP]]></title>
    <published>2012-06-29T02:20:00+0000</published>
    <updated>2012-06-30T15:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-06-28-oop-visibility.html"/>
    <id>http://mwop.net/blog/2012-06-28-oop-visibility.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I'm a big proponent of object oriented programming. OOP done
right helps ease code maintenance and enables code re-use.</xhtml:p>
<xhtml:p>Starting in PHP, OOP enthusiasts got a whole bunch of new tools,
and new tools keep coming into the language for us with each minor
release. One feature that has had a huge impact on frameworks and
libraries has been available since the earliest PHP 5 versions:
visibility.</xhtml:p>
<xhtml:h2>Theory</xhtml:h2>
<xhtml:p>The visibility keywords include <xhtml:em>private</xhtml:em>,
<xhtml:em>protected</xhtml:em>, and <xhtml:em>public</xhtml:em>, often referred to as
<xhtml:strong>PPP</xhtml:strong>. There's an additional keyword I often lump in
with them, <xhtml:em>final</xhtml:em>.</xhtml:p>
<xhtml:p>Public visibility is the default, and equivalent to the only
visibility available to PHP prior to version 5: any member declared
public is accessible from any scope. This means the following:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class Foo
{
    public $bar = 'bar';

    public function baz() 
    {
        // I can access within my own scope
        return $this-&gt;bar;
    }
}

class FooBar extends Foo
{
    public function doThat()
    {
        // I have access to members in my parent
        return $this-&gt;bar . $this-&gt;baz();
    }
}

$foo = new Foo();

// I can access public members from an instance
echo $foo-&gt;bar . $foo-&gt;baz();
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Basically, public visibility means that I can access the member
from within the object, within an extending class, or from simply
an instance.</xhtml:p>
<xhtml:p>Protected visibility starts to tighten things down a little.
With protected visibility, only the class itself, or an extending
class, can access the member:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class Foo
{
    protected $bar = 'bar';

    protected function baz() 
    {
        // I can access within my own scope
        return $this-&gt;bar;
    }
}

class FooBar extends Foo
{
    public function doThat()
    {
        // I can access protected members in my parent
        return $this-&gt;bar . $this-&gt;baz();
    }
}

$foo = new FooBar();

// This works, as I'm calling a public member of an extending class:
$foo-&gt;doThat();

// But these are both illegal:
echo $foo-&gt;bar . $foo-&gt;baz();
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Protected visibility is nice for hiding things from those
consuming your class. It can be used to hide implementation
details, and to prevent direct modification of public properties --
something important to consider, if a property may be the product
of calculation, or if a particular type is required.</xhtml:p>
<xhtml:p>Private visibility locks things down further. With private
visibility, the object member is only directly modifiable or
callable within the declaring class.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class Foo
{
    private $bar = 'bar';

    private function baz() 
    {
        // I can access within my own scope
        return $this-&gt;bar;
    }
}

class FooBar extends Foo
{
    public function doThat()
    {
        // These are both illegal
        return $this-&gt;bar . $this-&gt;baz();
    }
}

$foo = new FooBar();

// These are also both illegal:
echo $foo-&gt;bar . $foo-&gt;baz();
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Private visibility is generally of interest for locking down
algorithms. For instance, if you know that a particular value or
operation must not change, even in extending classes, declaring the
member private ensures that extending classes cannot directly call
it.</xhtml:p>
<xhtml:p>At any point, you can redeclare a property in an extending class
using equal or more public visibility. The effect of doing so
depends on what the visibility of the member was in the parent
class.</xhtml:p>
<xhtml:ul>
<xhtml:li>
<xhtml:p>In the case of a <xhtml:em>public</xhtml:em> property, if an extending class
re-declares with public visibility, any access to the member within
the extending class or an instance of the extending class will see
only the new declaration.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class Foo
{
    public $bar = 'bar';

    public function baz() 
    {
        return $this-&gt;bar;
    }
}

class FooBar extends Foo
{
    public $bar = 'foobar';
}

$foo = new FooBar();
echo $foo-&gt;bar;   // "foobar"
echo $foo-&gt;baz(); // "foobar"
        </xhtml:code>
</xhtml:pre></xhtml:div>
</xhtml:li>
<xhtml:li>
<xhtml:p>In the instance of a <xhtml:em>protected</xhtml:em> property, if the
extending class re-declares with either public or protected
visibility, you get the same behavior as public -&gt; public.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class Foo
{
    protected $bar = 'bar';

    public function baz() 
    {
        return $this-&gt;bar;
    }
}

class FooBar extends Foo
{
    public $bar = 'foobar';
}

$foo = new FooBar();
echo $foo-&gt;bar;   // "foobar"
echo $foo-&gt;baz(); // "foobar"
        </xhtml:code>
</xhtml:pre></xhtml:div>
</xhtml:li>
<xhtml:li>
<xhtml:p>In the instance of a <xhtml:em>private</xhtml:em> property, things get
interesting. The private value or method will be used for any
access made within code declared in the parent class, but not
overridden in the child. However, if the child class overrides any
code, the value of the re-declared instance will be used. This is
far easier to understand via an example.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class Foo
{
    private $bar = 'bar';
    private $baz = 'baz';

    public function baz() 
    {
        return $this-&gt;bar;
    }
}

class FooBar extends Foo
{
    protected $bar = 'foobar';
    private $baz = 'foobaz';

    public function myBaz() 
    {
        return $this-&gt;bar;
    }

    public function myBaz2()
    {
        return $this-&gt;baz;
    }
}

$foo = new FooBar();
echo $foo-&gt;baz();    // "bar"
echo $foo-&gt;myBaz();  // "foobar"
echo $foo-&gt;myBaz2(); // "foobaz"
        </xhtml:code>
</xhtml:pre></xhtml:div>
</xhtml:li>
</xhtml:ul>
<xhtml:p>My personal takeaway from this is:</xhtml:p>
<xhtml:ul>
<xhtml:li>Use <xhtml:em>public</xhtml:em> for members that are safe for anything to
call.</xhtml:li>
<xhtml:li>Use <xhtml:em>protected</xhtml:em> for anything you don't want called from
instance methods, not important to the public API (implementation
details), and anything you feel is safe for extending classes to
muck about with.</xhtml:li>
<xhtml:li>Use <xhtml:em>private</xhtml:em> for any important implementation details
that could adversely affect execution if overridden by an extending
class.</xhtml:li>
</xhtml:ul>
<xhtml:p>Those paying attention will note that I skipped <xhtml:em>final</xhtml:em>.
Actually, I saved that for last. Marking a class or method
<xhtml:em>final</xhtml:em> tells PHP that the class or method may not be
extended or re-declared/overridden. At all. I lump this with
visibility, because it's another way of locking down access to an
API; marking something <xhtml:em>final</xhtml:em> is saying, "you cannot extend
this", similar to using <xhtml:em>private</xhtml:em>, but without even the
possibility of redeclaring.</xhtml:p>
<xhtml:h2>Applied</xhtml:h2>
<xhtml:p>What got me to thinking about all this was a turn of events with
Zend Framework 2. We've had an annotation parser since last summer.
<xhtml:a href="http://ralphschindler.com/">Ralph Schindler</xhtml:a> developed
it in order to facilitate automatic discovery of injection points
for our Dependency Injection container. Classes could mark a method
with the "Inject" annotation, and the various DI compilers would
know that that method needed to be injected.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
use Zend\Di\Definition\Annotation\Inject;

class Foo
{
    protected $bar;

    /**
     * @Inject()
     * @param  Bar $bar
     * @return void
     */
    public function setBar(Bar $bar)
    {
        $this-&gt;bar = $bar;
    }
}

class Bar {}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Recently, part of our Forms RFC included a feature to allow
creating forms and their related input filters by using
annotations. Basically, this allows developers to hint on their
domain entities how specific properties should be filtered,
validated, and potentially represented at the form level.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
use Zend\Form\Annotation;

class Foo
{
    /**
     * @Annotation\Filter({"name":"StringTrim"})
     * @Annotation\Validator({"name":"Between","options":{"min":5,"max":20}})
     * @Annotation\Attributes({"type":"range"})
     */
    protected $bar;
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>One developer testing the support wanted to use a combination of
<xhtml:a href="http://doctrine-project.org">Doctrine</xhtml:a> annotations and
ZF2 form annotations -- that way his entities could also describe
validation and representation.</xhtml:p>
<xhtml:p>I did some work to make this happen, and everybody was happy.
Except then that same developer went to use that entity with
Doctrine, and Doctrine's annotation parser started raising
exceptions on all the ZF2 annotations.</xhtml:p>
<xhtml:p>After some debate, I realized: (a) we were basically just making
up syntax for our annotations; it'd be better to use an established
syntax; but (b) we should still retain the ability to use arbitrary
syntax, as we can't really know what sorts of annotations
developers may already be using.</xhtml:p>
<xhtml:p>So, we decided to make our annotation component depend on the
annotations support in Doctrine\\Common, and to use the annotation
syntax they utilize. ZF2 would provide some code to make it
possible to plug in arbitrary parsers, and use the Doctrine\\Common
annotation parser to parse annotations officially supported by
ZF2.</xhtml:p>
<xhtml:p>However, when I went to start making this happen, I ran into
immediate issues.</xhtml:p>
<xhtml:p>Remember how this post is about visibility? Well, the class I
was directly interested in,
<xhtml:code>Doctrine\Common\Annotations\DocParser</xhtml:code>, not only
contains private members, but is marked <xhtml:em>final</xhtml:em>.</xhtml:p>
<xhtml:p>My immediate response was to start dissecting the class, cutting
and pasting the bits interesting to my solution into a new class in
ZF2. I went down this route for several hours, gradually pulling in
more and more methods as I discovered how far down the rabbit hole
I needed to go to accomplish my task.</xhtml:p>
<xhtml:p>But at the back of my head, I kept thinking this was a bad idea.
If any patches ever came in for the original class, I'd need to
port them into our ZF2 solution. And I couldn't help but think that
I'd miss a crucial piece.</xhtml:p>
<xhtml:p>So I started playing with its public API, to see if there were
any shortcuts I might be able to take. And there were.</xhtml:p>
<xhtml:p>The class has a public <xhtml:code>parse()</xhtml:code> method. Based on how
Doctrine uses the code, I assumed I needed to pass a full PHP
docblock in -- which ran counter to how I wanted to use the code. I
wanted to pass in an annotation at a time. But when I looked
closer, I realized that the parser didn't require a full docblock;
any fragment would do.</xhtml:p>
<xhtml:p>To make a long story short: I was able to feed the parser a
single annotation at a time from ZF2's
<xhtml:code>AnnotationScanner</xhtml:code>. This allowed me to build a very
simple class that allows registering a set of annotations it can
handle, and feeding it a single annotation string at a time to
decide (a) if it supports it, and (b) to parse it and return the
associated annotation object.</xhtml:p>
<xhtml:p>In sum: because the class in question was marked final and had
private members, I found myself forced to think critically about
what I wanted to accomplish, and then thoroughly understand the
public API to see how I might accomplish that task without the
ability to extend.</xhtml:p>
<xhtml:h2>Conclusions</xhtml:h2>
<xhtml:p>Doctrine has a policy that encourages <xhtml:a href="http://en.wikipedia.org/wiki/Poka-yoke"><xhtml:em>poka-yoke</xhtml:em></xhtml:a>
solutions: code should be executable in a specific way. The policy
was developed to both aid users (having multiple ways of doing
something is often confusing), as well as to ease maintenance
(fewer extension points means less liklihood of developers doing
hard-to-debug things in extending code and reporting it back to the
project). These have led them to heavily use <xhtml:em>private</xhtml:em> and
<xhtml:em>final</xhtml:em> visibility.</xhtml:p>
<xhtml:p>I've said it before, and I'll say it again: I feel that
frameworks and libraries should use <xhtml:em>private</xhtml:em> and
<xhtml:em>final</xhtml:em> sparingly. Over the years, I've seen code repurposed
in simply wondrous ways -- largely due to keeping the code as open
as possible to extension. I like to enable my users as much as
possible.</xhtml:p>
<xhtml:p>That said, I can also see Doctrine's argument -- and can see
where, while it can often be frustrating, it can also lead to
potentially more sound and elegant solutions.</xhtml:p>
<xhtml:p>I'll probably continue shying away from <xhtml:em>private</xhtml:em> and
<xhtml:em>final</xhtml:em> visibility, but I do plan to experiment with it more
in the future. What about you?</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Automatic deployment with git and gitolite]]></title>
    <published>2012-06-25T02:50:00+0000</published>
    <updated>2012-06-25T02:50:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-06-24-git-deploy.html"/>
    <id>http://mwop.net/blog/2012-06-24-git-deploy.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I read a <xhtml:a href="http://seancoates.com/blogs/deploy-on-push-from-github" target="_blank">post recently by Sean Coates about deploy on push</xhtml:a>. The
concept is nothing new: you set up a hook that listens for commits
on specific branches or tags, and it then deploys your site from
that revision.</xhtml:p>
<xhtml:p>Except I'd not done it myself. This is how I got there.</xhtml:p>
<xhtml:p>Sean's approach uses <xhtml:a href="https://help.github.com/articles/post-receive-hooks" target="_blank">Github webhooks</xhtml:a>, which are a fantastic concept.
Basically, once your commit completes, Github will send a
JSON-encoded payload to a specific URI. Sean uses this to trigger
an API call to a specific page in his website, which will then
trigger a deployment activity.</xhtml:p>
<xhtml:p>Awesome, this should be easy; I already have a deploy script
written that I trigger manually.</xhtml:p>
<xhtml:p>One small problem: my site, while in Git, is not on Github. I
maintain it on my own <xhtml:a href="https://github.com/sitaramc/gitolite" target="_blank">Gitolite</xhtml:a>
repository. Which means I needed to write my own hooks.</xhtml:p>
<xhtml:p>I originally went down the route of using a post-receive hook.
However, I had problems determining what branch the given commit
was on, despite a variety of advice I found on the subject on
<xhtml:a href="http://stackoverflow.com/" target="_blank">StackOverflow</xhtml:a> and git mailing lists. I ended up
finding a great example using post-update, which was actually
perfect for my needs.</xhtml:p>
<xhtml:p>In order to keep the post-update script non-blocking when I
commit, I made it do very little: It simply determines what branch
the commit was on, and if it was the master branch, it touches a
specific file on the filesystem and finishes. The entire hook looks
like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
#!/bin/bash
branch=$(git rev-parse --symbolic --abbrev-ref $1)
echo "Commit was for branch $branch"
if [[ "$branch" == "master" ]];then
    echo "Preparing to deploy"
    echo "1" &gt; /var/local/mwop.net.update
fi
</xhtml:pre></xhtml:div>
<xhtml:p>Now I needed something to detect such a push, and act on it.</xhtml:p>
<xhtml:p>I considered using cron for this; it'd be relatively easy to
have it fire up once a minute, and simply act on it. But I decided
instead to write a simple little daemon using perl. Perl daemons
are trivially easy to write, and if you use module such as
<xhtml:code>Proc::Daemon</xhtml:code> and follow a few trivial defensive coding
practices, you can keep memory leaks contained (or at least
minimal). Besides, it gave me a chance to dust off my perl
chops.</xhtml:p>
<xhtml:p>I decided I'd have it check for the file in 30 second intervals,
simply sleeping if no changes were detected. If the file was found,
however, it should attempt to deploy. Additionally, I wanted it to
quit if it was unable to remove the file (as this could lead to
multiple deploy attempts), and log success and failure status of
the deploy. The full script looks like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
#!/usr/bin/perl
use strict;
use warnings;
use Proc::Daemon;

Proc::Daemon::Init;

my $continue = 1;
$SIG{TERM} = sub { $continue = 0 };

my $updateFile   = "/var/local/mwop.net.update";
my $updateScript = "/home/matthew/bin/deploy-mwop";
my $logFile      = "/var/local/mwop.net-deploy.log";
while ($continue) {
    # 30s intervals between iterations
    sleep 30;

    # Check for update file, and restart loop if not found
    unless (-e $updateFile) {
        next;
    }

    # Remove update file
    if (!unlink($updateFile)) {
        # If unable to unlink, we need to quit
        system('echo "' . time() . ': Failed to REMOVE ' . $updateFile . '" &gt;&gt; ' . $logFile);
        $continue = 0;
        next;
    }

    # Deploy
    system($updateScript);
    if ( $? == -1 ) {
        system('echo "' . time() . ': FAILED to deploy: ' . $! . '" &gt;&gt; ' .  $logFile);
    } else {
        system('echo "' . time() . ': Successfully DEPLOYED" &gt;&gt; ' . $logFile);
    }
}
</xhtml:pre></xhtml:div>
<xhtml:p>The <xhtml:code>system()</xhtml:code> calls for logging could have been done
using Perl, but I didn't want to deal with additional error
handling and file pointers; simply proxying to the system seemed
reasonable and expedient.</xhtml:p>
<xhtml:p>When all was ready, I started the above listener, which
automatically daemonizes itself. I then installed the post-update
hook into my bare repository, and tested it out. And it runs! When
I push to master, my site is automatically deployed, typically
within 15-20 seconds from completion.</xhtml:p>
<xhtml:h4>Caveats</xhtml:h4>
<xhtml:p>This solution, of course, relies on a daemonized process. If
that process were to terminate, I'd have no idea until I discovered
my site didn't refresh after the most recent push. Clearly, some
sort of monitor checking for the status of the daemon should be in
place.</xhtml:p>
<xhtml:p>Also, note that I'm having this update on changes to the master
branch; you may need to adapt it for your own needs, depending on
your branching strategy.</xhtml:p>
<xhtml:p>Finally, this approach does not address issues that might
require a roll-back. Ideally, the script should probably log what
revision was current prior to the deployment, allowing roll-back to
the previous state. Alternately, the deployment script should
create a new clone of the site and swap symlinks to allow quick
roll-back when required.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

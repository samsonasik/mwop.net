<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Blog Entries :: phly, boy, phly</title>
    <description>Blog Entries :: phly, boy, phly</description>
    <pubDate>Fri, 17 Aug 2012 16:00:00 +0000</pubDate>
    <generator>Zend_Feed_Writer 2.0.0beta5 (http://framework.zend.com)</generator>
    <link>http://mwop.net/blog.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://mwop.net/blog-rss.xml"/>
    <item>
      <title>On Microframeworks</title>
      <pubDate>Fri, 17 Aug 2012 16:00:00 +0000</pubDate>
      <link>http://mwop.net/blog/2012-08-17-on-microframeworks.html</link>
      <guid>http://mwop.net/blog/2012-08-17-on-microframeworks.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    A number of months ago, <a href="http://funkatron.com/">Ed Finkler</a> 
    started a discussion in the PHP community about &#8220;<a 
    href="http://microphp.org/">MicroPHP</a>&#8221;; to summarize, the movement
    is about:
</p>

<ul>
    <li>Building small, single-purpose libraries.</li>
    <li>Using small things that work together to solve larger problems.</li>
</ul>

<p>
    I think there are some really good ideas that have come out of this, and 
    also a number of questionable practices<sup><a name="t1" href="#f1">1</a></sup>.
</p>

<p>
    One piece in particular I've focussed on is the concept of so-called 
    &#8220;microframeworks&#8221;.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>ZF2's New Controller::init()</title>
      <pubDate>Tue, 31 Jul 2012 02:00:00 +0000</pubDate>
      <link>http://mwop.net/blog/2012-07-30-the-new-init.html</link>
      <guid>http://mwop.net/blog/2012-07-30-the-new-init.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    In Zend Framework 1, controller's had an <code>init()</code> method, which
    was called after the controller was instantiated. The reason for it was to
    encourage developers not to override the constructor, and thus potentially
    break some of the functionality (as a number of objects were injected via
    the constructor). <code>init()</code> was useful for doing additional object
    initialization.
</p>

<div class="example"><pre><code language="php">
class MyController extends Zend_Controller_Action
{
    public function init()
    {
        // do some stuff!
    }
}
</code></pre></div>

<p>
    But this feature is missing from ZF2; how can we accomplish this sort of
    pattern?
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>ZF2 Forms in Beta5</title>
      <pubDate>Thu, 05 Jul 2012 20:40:00 +0000</pubDate>
      <link>http://mwop.net/blog/2012-07-02-zf2-beta5-forms.html</link>
      <guid>http://mwop.net/blog/2012-07-02-zf2-beta5-forms.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    Forms are a nightmare for web development. They break the concept of 
    separation of concerns:
</p>

<ul>
    <li>They have a <em>display</em> aspect (the actual HTML form)</li>
    <li>They have a <em>validation</em> aspect</li>
    <li>And the two mix, as you need to display validation error messages.</li>
</ul>

<p>
    On top of that, the submitted data is often directly related to your domain
    models, causing more issues:
</p>

<ul>
    <li>Not all elements will have a 1:1 mapping to the domain model -- 
    buttons, CSRF protection, CAPTCHAs, etc. usually are application-level 
    concerns, but not domain issues.</li>
    <li>Names valid for your domain model may not be valid names for HTML 
    entities.</li>
</ul>

<p>
    Add to this that the validation logic may be re-usable outside of a forms 
    context, and you've got a rather complex problem.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>On Visibility in OOP</title>
      <pubDate>Sat, 30 Jun 2012 15:00:00 +0000</pubDate>
      <link>http://mwop.net/blog/2012-06-28-oop-visibility.html</link>
      <guid>http://mwop.net/blog/2012-06-28-oop-visibility.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    I'm a big proponent of object oriented programming. OOP done right helps 
    ease code maintenance and enables code re-use.
</p>

<p>
    Starting in PHP, OOP enthusiasts got a whole bunch of new tools, and new
    tools keep coming into the language for us with each minor release. One
    feature that has had a huge impact on frameworks and libraries has been
    available since the earliest PHP 5 versions: visibility.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Automatic deployment with git and gitolite</title>
      <pubDate>Mon, 25 Jun 2012 02:50:00 +0000</pubDate>
      <link>http://mwop.net/blog/2012-06-24-git-deploy.html</link>
      <guid>http://mwop.net/blog/2012-06-24-git-deploy.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    I read a <a 
    href="http://seancoates.com/blogs/deploy-on-push-from-github" 
    target="_blank">post recently by Sean Coates about deploy on 
    push</a>. The concept is nothing new: you set up a hook that 
    listens for commits on specific branches or tags, and it then
    deploys your site from that revision.
</p>

<p>
    Except I'd not done it myself. This is how I got there.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Why Modules?</title>
      <pubDate>Mon, 30 Apr 2012 21:00:00 +0000</pubDate>
      <link>http://mwop.net/blog/2012-04-30-why-modules.html</link>
      <guid>http://mwop.net/blog/2012-04-30-why-modules.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    I've blogged <a href="/blog/267-Getting-started-writing-ZF2-modules.html">about 
    getting started with ZF2 modules</a>, as well as <a href="/blog/zf2-modules-you-can-use-today.html">about 
    ZF2 modules you can already use</a>. But after fielding some questions recently, 
    I realized I should talk about <em>why</em> modules are important for the 
    ZF2 ecosystem.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Developing A ZF2 Blog</title>
      <pubDate>Wed, 04 Apr 2012 02:50:00 +0000</pubDate>
      <link>http://mwop.net/blog/2012-05-developing-a-zf2-blog.html</link>
      <guid>http://mwop.net/blog/2012-05-developing-a-zf2-blog.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    This post tells a story.
</p>

<p>
    A long time ago, I set out to write my own blog platform. Yes, <a 
    href="http://wordpress.org">WordPress</a> is a fine blogging platform, as is 
    <a href="http://www.s9y.org/">Serendipity</a> (aka "s9y", and my previous 
    platform). And yes, I know about <a 
    href="http://habariproject.org">Habari</a>. And, for those of you skimming 
    ahead, yes, I'm quite aware of <a href="http://github.com/mojombo/jekyll">Jekyll</a>, 
    thank you anyways.
</p>

<p>
    Why write something of my own? Well, of course, there's the fact that I'm
    a developer, and have control issues. Then there's also the fact that a 
    blog is both a simple enough domain to allow easily experimenting with new
    technology and paradigms, while simultaneously providing a complex enough
    domain to expose non-trivial issues. 
</p>
    
<p>
    When I started this project, it was a technology-centered endeavor; I 
    wanted to play with document databases such as <a 
    href="http://couchdb.apache.org/">CouchDB</a> and <a 
    href="http://www.mongodb.org/">MongoDB</a>, and with caching technologies 
    like <a href="http://memcached.org">memcached</a> and <a 
    href="http://redis.io">redis</a>.
</p>

<p>
    Not long after I started, I also realized it was a great playground for me
    to prototype ideas for <a href="http://framework.zend.com/zf2">ZF2</a>;
    in fact, the original DI and MVC prototypes lived as branches of my blog.
    (My repository is still named "zf2sandbox" to this day, though it 
    technically houses just my site.)
</p>

<p>
    Over time, I had a few realizations. First, my <em>actual</em> blog was
    suffering. I wasn't taking the time to perform security updates, nor even
    normal upgrades, and was so far behind as to make the process non-trivial,
    particularly as I had a custom theme, and because I was proxying to my 
    blog via a ZF app in order to facilitate a cohesive site look-and-feel. I
    needed to either sink time into upgrading, or finish my blog.
</p>
    
<p>
    My second realization, however, was the more important one: I wanted a 
    platform where I could write how <em>I</em> want to write. I am
    a keyboard-centric developer and computer user, and while I love the web,
    I hate typing in its forms. Additionally, my posts often take longer than
    a typical browser session -- which leaves me either losing my work in a
    GUI admin, or having to write first in my editor of choice, and then 
    cut-and-paste it to the web forms. Finally, I want versions I can easily
    browse with standard diffing tools.
</p>

<p>
    When it came down to it, my blog content is basically static. Occasionally,
    I'll update a post, but it's rare. Comments are really the only dynamic
    aspect of the blog... and what I had with s9y was not cutting it, as I was
    getting more spam than I could keep up with. New commenting platforms such 
    as <a href="http://livefyre.com">Livefyre</a> and <a href="http://disqus.com">Disqus</a>
    provide more features than most blogging platforms I know, and provide 
    another side benefit: because they are javascript-based, you can simply
    drop in a small amount of markup into your post <em>once</em> -- meaning
    your pages can be fully static!
</p>

<p>
    Add these thoughts to the rise of static blogging platforms such as the 
    aforementioned Jekyll, and I had a kernel of an idea: take the work I'd
    done already, and create a static blog generator. 
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>View Layers, Database Abstraction, Configuration, Oh, My!</title>
      <pubDate>Mon, 05 Mar 2012 22:32:45 +0000</pubDate>
      <link>http://mwop.net/blog/zf2-beta3.html</link>
      <guid>http://mwop.net/blog/zf2-beta3.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    Late last week, the Zend Framework community <a href="http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta3-Released">2.0.0beta3</a>, 
    the latest iteration of the v2 framework. What have we been busy doing the 
    last couple months? In a nutshell, getting dirty with view layers, database
    abstraction, and configuration.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>ZF2 Modules You Can Use Today</title>
      <pubDate>Wed, 08 Feb 2012 16:31:47 +0000</pubDate>
      <link>http://mwop.net/blog/zf2-modules-you-can-use-today.html</link>
      <guid>http://mwop.net/blog/zf2-modules-you-can-use-today.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    One key new architectural feature of Zend Framework 2 is its new module
    infrastructure. The basic idea behind modules is to allow developers to both
    create and consume re-usable application functionality -- anything from
    packaging common assets such as CSS and JavaScript to providing MVC
    application classes.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Call A Spade A Spade</title>
      <pubDate>Wed, 18 Jan 2012 21:48:07 +0000</pubDate>
      <link>http://mwop.net/blog/call-a-spade-a-spade.html</link>
      <guid>http://mwop.net/blog/call-a-spade-a-spade.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    I don't often get political on my blog, or over social media. But those of 
    you who <a href="http://twitter.com/weierophinney">follow me on twitter</a> 
    lately have been treated to a number of tweets and retweets from me about 
    some bills before the US legislative bodies called "SOPA" and "PIPA". Over
    the last couple days, I realized exactly why I disagree with them, and 
    felt 140 characters is not enough.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>

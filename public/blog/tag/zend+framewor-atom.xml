<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: zend framewor :: phly, boy, phly</title>
  <updated>2007-12-19T17:24:33+0000</updated>
  <generator uri="http://framework.zend.com" version="2.0.3">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/zend+framewor.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/zend+framewor-atom.xml"/>
  <id>http://mwop.net/blog/tag/zend+framewor.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Zend_Layout and Zend_View Enhanced components now in core]]></title>
    <published>2007-12-19T13:44:11+0000</published>
    <updated>2007-12-19T17:24:33+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/152-Zend_Layout-and-Zend_View-Enhanced-components-now-in-core.html"/>
    <id>http://mwop.net/blog/152-Zend_Layout-and-Zend_View-Enhanced-components-now-in-core.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I'm pleased to announce that the <xhtml:a href="http://framework.zend.com/wiki/pages/viewpage.action?pageId=33071">
Zend_View Enhanced</xhtml:a> and <xhtml:a href="http://framework.zend.com/wiki/display/ZFPROP/Zend_Layout">Zend_Layout</xhtml:a>
components are now in the <xhtml:a href="http://framework.zend.com/">Zend
Framework</xhtml:a> core. With these two components, you can now create
some truly <xhtml:a href="http://blog.astrumfutura.com/archives/291-Complex-Views-with-the-Zend-Framework-Part-6-Setting-The-Terminology.html">
complex views</xhtml:a> for your application with relative ease.</xhtml:p>
<xhtml:p>The two components tackle several view related tasks:</xhtml:p>
<xhtml:ul>
<xhtml:li>Layouts, or Two Step Views</xhtml:li>
<xhtml:li>Partials (view fragment scripts with their own variable
scope)</xhtml:li>
<xhtml:li>Placeholders (store data and/or markup for later
retrieval)</xhtml:li>
<xhtml:li>Actions (dispatch a controller action)</xhtml:li>
</xhtml:ul>
<xhtml:p>So, what's the big deal? Much, if not all of this, was already
possible, I hear some people saying. Well, yes, technically it was;
in fact, all of these, except layouts, were accomplished by the
addition of extra view helpers, which anybody could have written
(and, in fact, some did). However, by having these as a standard
part of the library, there are now standard ways to perform these
tasks -- meaning consistency between applications.</xhtml:p>
<xhtml:p>Plus, these helpers just make things so much simpler!</xhtml:p>
<xhtml:p>For instance, who out there has all the DOCTYPE declarations
memorized? I personally know all the types, but can't rattle off
the entire declarations associated with each to save my life. With
the <xhtml:kbd>doctype()</xhtml:kbd> helper, all I have to do is:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
&lt;?= $this-&gt;doctype('XHTML1_TRANSITIONAL') ?&gt;
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>and it's now present. Furthermore, by putting this at the top of
my layout, when I display my scripts as aggregated in the
<xhtml:kbd>headScript()</xhtml:kbd> helper, they'll now be properly escaped as
XML CDATA, as helpers that need to be DOCTYPE aware now determine
this information from that helper.</xhtml:p>
<xhtml:p>Speaking of the <xhtml:kbd>headScript()</xhtml:kbd> helper, it's pretty
handy. Let's say you have an application that requires javascript.
Instead of unconditionally specifying the javascript include for
every controller, or setting up complex logic for determining when
to include it, you can have your application view specify it's
needed:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
&lt;?php $this-&gt;headScript()-&gt;appendFile('/js/foo.js') ?&gt;
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Then, in your master layout script, you tell it to include any
scripts aggregated:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
&lt;?= $this-&gt;headScript() ?&gt;
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>You can do similarly for specifying feeds (via
<xhtml:kbd>headLink()</xhtml:kbd>), stylesheets (via <xhtml:kbd>headLink()</xhtml:kbd> for
external files, <xhtml:kbd>headStyle()</xhtml:kbd> for inline stylesheets), and
even your title element (for instance, you could aggregate your
various breadcrumbs, and then specify a custom separator to use
between them).</xhtml:p>
<xhtml:p>This is really just the tip of the iceberg. Using a combination
of placeholders, partials, actions, and normal view helpers, you
can then create some pretty complex layouts using minimal markup.
As an example:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
&lt;?= $this-&gt;doctype('XHTML1_TRANSITIONAL') ?&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;?= $this-&gt;headTitle() ?&gt;
        &lt;?= $this-&gt;headMeta()-&gt;setIndent(8) ?&gt;
        &lt;?= $this-&gt;headLink()-&gt;setIndent(8) ?&gt;
        &lt;?= $this-&gt;headStyle()-&gt;setIndent(8) ?&gt;
        &lt;?= $this-&gt;headScript()-&gt;setIndent(8) ?&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;?= $this-&gt;partial('header.phtml') ?&gt;
        &lt;div id=\"content\"&gt;
            &lt;?= $this-&gt;layout()-&gt;content ?&gt;
        &lt;/div&gt;
        &lt;?= $this-&gt;subnav() ?&gt;
        &lt;?= $this-&gt;partial('footer.phtml') ?&gt;
        &lt;?= $this-&gt;inlineScript() ?&gt;
    &lt;/body&gt;
&lt;/html&gt;
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The example above makes use of several placeholders
(<xhtml:kbd>doctype</xhtml:kbd>, <xhtml:kbd>HeadTitle</xhtml:kbd>, <xhtml:kbd>HeadMeta</xhtml:kbd>,
<xhtml:kbd>HeadLink</xhtml:kbd>, <xhtml:kbd>HeadStyle</xhtml:kbd>, <xhtml:kbd>HeadScript</xhtml:kbd>,
and <xhtml:kbd>InlineScript</xhtml:kbd>), two partials (for the header and
footer), layout content, and a custom view helper (for navigation);
the entire thing is less than 20 lines long, yet contains
everything necessary for your site layout.</xhtml:p>
<xhtml:p>The functionality of these new components is not only broad, but
deep as well, and can't be covered in a single blog post. Look for
a series of tutorials on the <xhtml:a href="http://devzone.zend.com/">Zend Developer Zone</xhtml:a> detailing them
in the coming weeks. In the meantime, you can read the
documentation available in the ZF subversion repository.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: spl :: phly, boy, phly</title>
  <updated>2011-01-21T22:07:25+0000</updated>
  <generator uri="http://framework.zend.com" version="2.0.2">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/spl.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/spl-atom.xml"/>
  <id>http://mwop.net/blog/tag/spl.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Taming SplPriorityQueue]]></title>
    <published>2011-01-17T15:02:00+0000</published>
    <updated>2011-01-21T22:07:25+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/253-Taming-SplPriorityQueue.html"/>
    <id>http://mwop.net/blog/253-Taming-SplPriorityQueue.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p><xhtml:a href="http://php.net/SplPriorityQueue">SplPriorityQueue</xhtml:a>
is a fantastic new feature of PHP 5.3. However, in trying to
utilize it in a few projects recently, I've run into some behavior
that's (a) non-intuitive, and (b) in some cases at least,
undesired. In this post, I'll present my solutions.</xhtml:p>
<xhtml:h2 id="toc_1.1">Of Heaps and Queues</xhtml:h2>
<xhtml:p><xhtml:em>Queues</xhtml:em> in programming are any data structure that, when
iterated, return values in a "first-in-first-out" (FIFO) order. For
"last-in-first-out" (LIFO) iteration, you define a
<xhtml:em>stack</xhtml:em>.</xhtml:p>
<xhtml:p>A <xhtml:em>heap</xhtml:em> is a data structure where, given a specific
node, all nodes beneath it are of a value less than it.
(Technically, this would be considered a "max-heap," as you can
also have a variant where all child nodes are of a value greater;
this is called a "min-heap.")</xhtml:p>
<xhtml:p>A <xhtml:em>priority queue</xhtml:em> is a specialized version of a
max-heap. Typically, data is registered with a specific priority --
so the max-heap is looking at only the priority value, not the data
itself. This allows inserting data into the queue in any order
desired, while ensuring that they are iterated in the order
specified by the priorities provided.</xhtml:p>
<xhtml:p>PHP offers SPL data structures corresponding to each:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:a href="http://php.net/SplQueue">SplQueue</xhtml:a>, corresponding
to a <xhtml:em>queue</xhtml:em>.</xhtml:li>
<xhtml:li><xhtml:a href="http://php.net/SplStack">SplStack</xhtml:a>, corresponding
to a <xhtml:em>stack</xhtml:em>.</xhtml:li>
<xhtml:li><xhtml:a href="http://php.net/SplHeap">SplHeap</xhtml:a>, corresponding to
a <xhtml:em>heap</xhtml:em>.</xhtml:li>
<xhtml:li><xhtml:a href="http://php.net/SplMaxHeap">SplMaxHeap</xhtml:a>,
correspondaxg to a <xhtml:em>max-heap</xhtml:em>.</xhtml:li>
<xhtml:li><xhtml:a href="http://php.net/SplMinHeap">SplMinHeap</xhtml:a>,
corresponding to a <xhtml:em>min-heap</xhtml:em>.</xhtml:li>
<xhtml:li><xhtml:a href="http://php.net/SplPriorityQueue">SplPriorityQueue</xhtml:a>,
corresponding to a <xhtml:em>priority queue</xhtml:em>.</xhtml:li>
</xhtml:ul>
<xhtml:h2 id="toc_1.2">Problems</xhtml:h2>
<xhtml:p>The first problem I ran into was really a lapse of reasoning on
my part, and is namely this:</xhtml:p>
<xhtml:blockquote><xhtml:em>Iterating over a heap removes the values from the
heap.</xhtml:em></xhtml:blockquote>
<xhtml:p>Basically, in order to satisfy the <xhtml:em>heap</xhtml:em> contract, which
is that the root node is always the maximum value (or minimum, in
the case of a min-heap), any previous nodes must be removed.</xhtml:p>
<xhtml:p>The problem with this, obviously, is that if you want to iterate
over a heap of any sort multiple times, well, you can't with the
same instance.</xhtml:p>
<xhtml:p>The next problem I ran into was with SplPriorityQueue
specifically: when items of equal priority are enqueued, the
iteration order of these items is... unexpected. While the <xhtml:a href="http://php.net/splpriorityqueue.compare">documentation</xhtml:a> notes
that "multiple elements with the same priority will get dequeued in
no particular order," the fact is that it <xhtml:em>is</xhtml:em> predictable,
and unintuitive. For example, given the following:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
$queue-&gt;insert('foo', 1000);
$queue-&gt;insert('bar', 1000);
$queue-&gt;insert('baz', 1000);
$queue-&gt;insert('bat', 1000);

foreach ($queue as $data) echo $data, \" \";
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>I'd expect a result of "foo bar baz bat", assuming FIFO order
(which is expected in a <xhtml:em>queue</xhtml:em>) for equal priorities; "foo
baz bat bar", assuming ordering by data (which might be expected in
a max-heap). In fact, neither is true: the first item will be
emitted first, and then the remaining items in reverse order of
when enqueued: "foo bat baz bar".</xhtml:p>
<xhtml:p>While this may be somewhat predictable, I find I don't want to
assume such order, nor try and write code around it.</xhtml:p>
<xhtml:h2 id="toc_1.3">Solutions</xhtml:h2>
<xhtml:h3 id="toc_1.3.1">Allowing multiple iterations</xhtml:h3>
<xhtml:p>Allowing multiple iterations of a queue is as easy as cloning it
prior to iteration:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
foreach (clone $queue as $datum) echo $datum, \" \";
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The problem is automating this -- there are cases where I don't
want users to really have to understand the internal
implementation.</xhtml:p>
<xhtml:p>My solution to this was to use the idea of inner and outer
iterators. In this particular case, I created a "PriorityQueue"
class that composes an SplPriorityQueue instance, and which also
implements <xhtml:code>IteratorAggregate</xhtml:code>. This allows the
following:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
namespace Foo;

class PriorityQueue implements Countable, IteratorAggregate
{
    protected $innerQueue;
    
    public function __construct()
    {
        // I'll explain the lack of global namespacing later...
        $this-&gt;innerQueue = new SplPriorityQueue;
    }

    public function count()
    {
        return count($this-&gt;innerQueue);
    }

    public function insert($datum, $priority)
    {
        $this-&gt;innerQueue-&gt;insert($datum, $priority);
    }
    
    public function getIterator()
    {
        return clone $this-&gt;innerQueue;
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>This approach means that as I consume PriorityQueue, I can be
assured that I can count and iterate over it... again and
again.</xhtml:p>
<xhtml:p>I mention in the code comments that I'm not importing
SplPriorityQueue into the namespace. The reason is that I want to
also solve the problem of predictable queue order.</xhtml:p>
<xhtml:h3 id="toc_1.3.2">Enforcing predictable queue order</xhtml:h3>
<xhtml:p>The solution to the queue order problem with equal priorities is
actually quite simple. While I found it on <xhtml:a href="http://php.net/splpriorityqueue.compare">the
SplPriorityQueue::compare manual page</xhtml:a>, <xhtml:a href="http://twitter.com/elazar">Matthew Turland</xhtml:a> also <xhtml:a href="http://www.slideshare.net/tobias382/new-spl-features-in-php-53">discusses
it in a presentation on SPL</xhtml:a>, and it hinges on one, simple fact:
<xhtml:em>priorities do not need to be integers</xhtml:em>.</xhtml:p>
<xhtml:p>What does this mean? It means that the following are not
equivalent, and will lead to a more expected sort order:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
$queue-&gt;insert('foo', array(1000, 1000));
$queue-&gt;insert('bar', array(1000, 100));
$queue-&gt;insert('baz', array(1000, 10));
$queue-&gt;insert('bat', array(1000, 1));

foreach ($queue as $data) echo $data, \" \";
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>This results in "foo bar baz bat"!</xhtml:p>
<xhtml:p>The trick, then, is automating the solution. I achieved this in
a custom SplPriorityQueue extension:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
namespace Foo;

class SplPriorityQueue extends \SplPriorityQueue
{
    protected $queueOrder = PHP_INT_MAX;

    public function insert($datum, $priority)
    {
        if (is_int($priority)) {
            $priority = array($priority, $this-&gt;queueOrder--);
        }
        parent::insert($datum, $priority);
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>As each datum is added to the queue, if the priority is an
integer, it wraps it in an array, using <xhtml:code>$queueOrder</xhtml:code> as
a second value to the array, and decrementing
<xhtml:code>$queueOrder</xhtml:code> on completion. The new priority is then
used to insert the value.</xhtml:p>
<xhtml:p>Using this extension ensures that order in the priority queue is
now predictable.</xhtml:p>
<xhtml:h2 id="toc_1.4">Conclusions</xhtml:h2>
<xhtml:p>SplPriorityQueue is indeed powerful, and saves me a ton of time
programming -- and also likely CPU processes and memory when using
larger data sets. While it may not always meet my use cases, the
fact is that, particularly with namespacing available, I can easily
override the class to meet my needs.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Applying FilterIterator to Directory Iteration]]></title>
    <published>2010-08-16T14:30:00+0000</published>
    <updated>2010-08-20T19:45:21+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/244-Applying-FilterIterator-to-Directory-Iteration.html"/>
    <id>http://mwop.net/blog/244-Applying-FilterIterator-to-Directory-Iteration.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I'm currently doing research and prototyping for autoloading
alternatives in <xhtml:a href="http://framework.zend.com/">Zend
Framework</xhtml:a> 2.0. One approach I'm looking at involves creating
explicit class/file maps; these tend to be much faster than using
the <xhtml:code>include_path</xhtml:code>, but do require some additional
setup.</xhtml:p>
<xhtml:p>My algorithm for generating the maps was absurdly simple:</xhtml:p>
<xhtml:ul>
<xhtml:li>Scan the filesystem for PHP files</xhtml:li>
<xhtml:li>If the file does not contain an interface, class, or abstract
class, skip it.</xhtml:li>
<xhtml:li>If it does, get its declared namespace and classname</xhtml:li>
</xhtml:ul>
<xhtml:p>The question was what implementation approach to use.</xhtml:p>
<xhtml:p>I'm well aware of <xhtml:code>RecursiveDirectoryIterator</xhtml:code>, and
planned to use that. However, I also had heard of
<xhtml:code>FilterIterator</xhtml:code>, and wondered if I could tie that in
somehow. In the end, I could, but the solution was non-obvious.</xhtml:p>
<xhtml:h2>What I Thought I'd Be Able To Do</xhtml:h2>
<xhtml:p><xhtml:code>FilterIterator</xhtml:code> is an abstract class. When extending
it, you must define an <xhtml:code>accept()</xhtml:code> method.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class FooFilter extends FilterIterator
{
    public function accept()
    {
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>In that method, you typically will inspect whatever is returned
by <xhtml:code>$this-&gt;current()</xhtml:code>, and then return a boolean
<xhtml:code>true</xhtml:code> or <xhtml:code>false</xhtml:code>, depending on whether you
want to keep it or not.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class FooFilter extends FilterIterator
{
    public function accept()
    {
        $item = $this-&gt;current();

        if ($someCriteriaIsMet) {
            return true;
        }

        return false;
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>I'll go into the mechanics of my criteria later; what's
important now is knowing that a <xhtml:code>FilterIterator</xhtml:code> allows
you to limit the results returned by your iterator.</xhtml:p>
<xhtml:p>I originally thought I'd be able to simply pass a
<xhtml:code>DirectoryIterator</xhtml:code> or
<xhtml:code>RecursiveDirectoryIterator</xhtml:code> to my filtering instance.
This worked in the former case, as it's only one level deep.
However, for the latter, it would only return the first directory
level for all classes that matched -- i.e., if I ran it over
"Zend/Controller", I'd get a match for each class under
"Zend/Controller/Action/Helper/", but it would return simply
"Zend/Controller/Action" as the match. This certainly wasn't
useful.</xhtml:p>
<xhtml:p>I then discovered <xhtml:code>RecursiveFilterIterator</xhtml:code>, which
looked like it would solve the recursion problem. However, I found
one of two results occurred: either I'd receive an entire subtree
if at least one item matched, or it would skip an entire subtree if
the first item found failed the criteria. There was no middle
ground.</xhtml:p>
<xhtml:h2>The Solution</xhtml:h2>
<xhtml:p>The solution was incredibly simple and elegant, once I stumbled
upon it: pass my <xhtml:code>RecursiveIteratorIterator</xhtml:code> instance to
the <xhtml:code>FilterIterator</xhtml:code>.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
$rdi      = new RecursiveDirectoryIterator($somePath);
$rii      = new RecursiveIteratorIterator($rdi);
$filtered = new FooFilter($rii);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Really. It was that simple -- but, as noted, non-obvious. It
also required a slight change within my filter -- instead of using
<xhtml:code>current()</xhtml:code>, I'd need to first pull the "inner" iterator
instance: <xhtml:code>$this-&gt;getInnerIterator()-&gt;current()</xhtml:code>.
I show an example of that below when I go over the filter
implementation.</xhtml:p>
<xhtml:p>As for my criteria, I had several options. I could
<xhtml:code>require_once</xhtml:code> the file, and use the Reflection API to
inspect the class to determine if it was an interface, abstract
class, or class, as well as to determine the namespace. However, I
couldn't be 100% sure the file would contain a class, so this
seemed like overkill. That, and horribly non-performant, due to
using reflection.</xhtml:p>
<xhtml:p>The next option was to simply slurp in the file contents into a
variable, and use regular expressions. I love regular expressions,
but in this case, it felt like I could possibly end up with some
false positives. Also, since some of these files could be quite
large, I was worried again about performance implications -- I
don't want to have to wait forever to generate these maps.</xhtml:p>
<xhtml:p>The solution I went with was to use the <xhtml:a href="http://php.net/tokenizer">tokenizer</xhtml:a> to inspect the file.
Tokenizing is incredibly fast, and it's also incredibly simple to
analyze the tokens.</xhtml:p>
<xhtml:p>I decided to store the detected namespace and classnames as
public properties of the <xhtml:code>SplFileInfo</xhtml:code> objects returned;
this makes it simple to iterate over the entire collection and
utilize that information. Also, because I have
<xhtml:code>SplFileInfo</xhtml:code> objects, I already have the paths I
need.</xhtml:p>
<xhtml:p>My implementation looks like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
/** @namespace */
namespace Zend\File;

// import SPL classes/interfaces into local scope
use DirectoryIterator,
    FilterIterator,
    RecursiveIterator,
    RecursiveDirectoryIterator,
    RecursiveIteratorIterator;

/**
 * Locate files containing PHP classes, interfaces, or abstracts
 * 
 * @package    Zend_File
 * @license    New BSD {@link http://framework.zend.com/license/new-bsd}
 */
class ClassFileLocater extends FilterIterator
{
    /**
     * Create an instance of the locater iterator
     * 
     * Expects either a directory, or a DirectoryIterator (or its recursive variant) 
     * instance.
     * 
     * @param  string|DirectoryIterator $dirOrIterator 
     * @return void
     */
    public function __construct($dirOrIterator = '.')
    {
        if (is_string($dirOrIterator)) {
            if (!is_dir($dirOrIterator)) {
                throw new InvalidArgumentException('Expected a valid directory name');
            }

            $dirOrIterator = new RecursiveDirectoryIterator($dirOrIterator);
        }
        if (!$dirOrIterator instanceof DirectoryIterator) {
            throw new InvalidArgumentException('Expected a DirectoryIterator');
        }

        if ($dirOrIterator instanceof RecursiveIterator) {
            $iterator = new RecursiveIteratorIterator($dirOrIterator);
        } else {
            $iterator = $dirOrIterator;
        }

        parent::__construct($iterator);
        $this-&gt;rewind();
    }

    /**
     * Filter for files containing PHP classes, interfaces, or abstracts
     * 
     * @return bool
     */
    public function accept()
    {
        $file = $this-&gt;getInnerIterator()-&gt;current();

        // If we somehow have something other than an SplFileInfo object, just 
        // return false
        if (!$file instanceof \SplFileInfo) {
            return false;
        }

        // If we have a directory, it's not a file, so return false
        if (!$file-&gt;isFile()) {
            return false;
        }

        // If not a PHP file, skip
        if ($file-&gt;getBasename('.php') == $file-&gt;getBasename()) {
            return false;
        }

        $contents = file_get_contents($file-&gt;getRealPath());
        $tokens   = token_get_all($contents);
        $count    = count($tokens);
        $i        = 0;
        while ($i &lt; $count) {
            $token = $tokens[$i];

            if (!is_array($token)) {
                // single character token found; skip
                $i++;
                continue;
            }

            list($id, $content, $line) = $token;

            switch ($id) {
                case T_NAMESPACE:
                    // Namespace found; grab it for later
                    $namespace = '';
                    $done      = false;
                    do {
                        ++$i;
                        $token = $tokens[$i];
                        if (is_string($token)) {
                            if (';' === $token) {
                                $done = true;
                            }
                            continue;
                        }
                        list($type, $content, $line) = $token;
                        switch ($type) {
                            case T_STRING:
                            case T_NS_SEPARATOR:
                                $namespace .= $content;
                                break;
                        }
                    } while (!$done &amp;&amp; $i &lt; $count);

                    // Set the namespace of this file in the object
                    $file-&gt;namespace = $namespace;
                    break;
                case T_ABSTRACT:
                case T_CLASS:
                case T_INTERFACE:
                    // Abstract class, class, or interface found

                    // Get the classname
                    $class = '';
                    do {
                        ++$i;
                        $token = $tokens[$i];
                        if (is_string($token)) {
                            continue;
                        }
                        list($type, $content, $line) = $token;
                        switch ($type) {
                            case T_STRING:
                                $class = $content;
                                break;
                        }
                    } while (empty($class) &amp;&amp; $i &lt; $count);

                    // If a classname was found, set it in the object, and 
                    // return boolean true (found)
                    if (!empty($class)) {
                        $file-&gt;classname = $class;
                        return true;
                    }
                    break;
                default:
                    break;
            }
            ++$i;
        }

        // No class-type tokens found; return false
        return false;
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p><xhtml:i>Note: the Exceptions thrown in this class are defined in the
same namespace; I'll leave how they're implemented to your
imagination.</xhtml:i></xhtml:p>
<xhtml:h2>Iterating Faster</xhtml:h2>
<xhtml:p>The next trick I discovered was in the form of
<xhtml:code>iterator_apply()</xhtml:code>. Normally when I use iterators, I use
<xhtml:code>foreach</xhtml:code>, because, well, that's what you do. But in
looking through the various iterators for this exercise, I stumbled
across this gem.</xhtml:p>
<xhtml:p>Basically, you pass the iterator, a callback, and argument(s)
you want passed to the callback. Like <xhtml:code>FilterIterator</xhtml:code>,
you don't get the actual item returned by the iterator, so in most
use cases, you pass the iterator itself:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
iterator_apply($it, $callback, array($it));
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>You can then grab the current value and/or key from the iterator
itself:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
public function process(Iterator $it)
{
    $value = $it-&gt;current();
    $key   = $it-&gt;key();
    // ...
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>While you can use any valid PHP callback, I found the most
interesting solution was to use a closure, as it allows you to
define everything up front:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
iterator_apply($it, function() use ($it) {
    $value = $it-&gt;current();
    $key   = $it-&gt;key();
    // ...
});
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>If you pass in a local value via a <xhtml:code>use</xhtml:code> statement,
you can do some aggregation:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
$map = new \stdClass;
iterator_apply($it, function() use ($it, $map) {
    $file = $it-&gt;current();
    $namespace = !empty($file-&gt;namespace) ? $file-&gt;namespace . '\\' : '';
    $classname = $namespace . $file-&gt;classname;
    $map-&gt;{$classname} = $file-&gt;getPathname();
});
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Not only is this a nice, concise technique, it's also
tremendously fast -- I was finding it was 200% - 300% faster than
using a traditional <xhtml:code>foreach</xhtml:code> loop. Clearly it cannot be
used in all situations, but if you <xhtml:em>can</xhtml:em> use it, you
probably should.</xhtml:p>
<xhtml:p>So, start playing with <xhtml:code>FilterIterator</xhtml:code> and
<xhtml:code>iterator_apply()</xhtml:code> if you haven't already -- the two
offer tremendous possibilities and capabilities for your
applications.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: spl :: phly, boy, phly</title>
  <updated>2011-01-21T22:07:25+0000</updated>
  <generator uri="http://framework.zend.com" version="2.0.0beta5">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/spl.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/spl-atom.xml"/>
  <id>http://mwop.net/blog/tag/spl.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Taming SplPriorityQueue]]></title>
    <published>2011-01-17T15:02:00+0000</published>
    <updated>2011-01-21T22:07:25+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/253-Taming-SplPriorityQueue.html"/>
    <id>http://mwop.net/blog/253-Taming-SplPriorityQueue.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p><xhtml:a href="http://php.net/SplPriorityQueue">SplPriorityQueue</xhtml:a>
is a fantastic new feature of PHP 5.3. However, in trying to
utilize it in a few projects recently, I've run into some behavior
that's (a) non-intuitive, and (b) in some cases at least,
undesired. In this post, I'll present my solutions.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Applying FilterIterator to Directory Iteration]]></title>
    <published>2010-08-16T14:30:00+0000</published>
    <updated>2010-08-20T19:45:21+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/244-Applying-FilterIterator-to-Directory-Iteration.html"/>
    <id>http://mwop.net/blog/244-Applying-FilterIterator-to-Directory-Iteration.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I'm currently doing research and prototyping for autoloading
alternatives in <xhtml:a href="http://framework.zend.com/">Zend
Framework</xhtml:a> 2.0. One approach I'm looking at involves creating
explicit class/file maps; these tend to be much faster than using
the <xhtml:code>include_path</xhtml:code>, but do require some additional
setup.</xhtml:p>
<xhtml:p>My algorithm for generating the maps was absurdly simple:</xhtml:p>
<xhtml:ul>
<xhtml:li>Scan the filesystem for PHP files</xhtml:li>
<xhtml:li>If the file does not contain an interface, class, or abstract
class, skip it.</xhtml:li>
<xhtml:li>If it does, get its declared namespace and classname</xhtml:li>
</xhtml:ul>
<xhtml:p>The question was what implementation approach to use.</xhtml:p>
<xhtml:p>I'm well aware of <xhtml:code>RecursiveDirectoryIterator</xhtml:code>, and
planned to use that. However, I also had heard of
<xhtml:code>FilterIterator</xhtml:code>, and wondered if I could tie that in
somehow. In the end, I could, but the solution was non-obvious.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

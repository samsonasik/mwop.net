<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Tag: spl :: phly, boy, phly</title>
    <description>Tag: spl :: phly, boy, phly</description>
    <pubDate>Fri, 21 Jan 2011 16:07:25 -0600</pubDate>
    <generator>Zend_Feed_Writer 2.0.0beta3 (http://framework.zend.com)</generator>
    <link>http://mwop.net/blog/tag/spl.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://mwop.net/blog/tag/spl-rss.xml"/>
    <item>
      <title>Taming SplPriorityQueue</title>
      <pubDate>Fri, 21 Jan 2011 16:07:25 -0600</pubDate>
      <link>http://mwop.net/blog/253-Taming-SplPriorityQueue.html</link>
      <guid>http://mwop.net/blog/253-Taming-SplPriorityQueue.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
<a href="http://php.net/SplPriorityQueue">SplPriorityQueue</a> is a fantastic new feature of
PHP 5.3. However, in trying to utilize it in a few projects recently, I've run
into some behavior that's (a) non-intuitive, and (b) in some cases at least,
undesired. In this post, I'll present my solutions.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Applying FilterIterator to Directory Iteration</title>
      <pubDate>Fri, 20 Aug 2010 14:45:21 -0500</pubDate>
      <link>http://mwop.net/blog/244-Applying-FilterIterator-to-Directory-Iteration.html</link>
      <guid>http://mwop.net/blog/244-Applying-FilterIterator-to-Directory-Iteration.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    I'm currently doing research and prototyping for autoloading alternatives in
    <a href="http://framework.zend.com/">Zend Framework</a> 2.0. One approach
    I'm looking at involves creating explicit class/file maps; these tend to be
    much faster than using the <code>include_path</code>, but do require some
    additional setup.
</p>

<p>
    My algorithm for generating the maps was absurdly simple:
</p>

<ul>
    <li>Scan the filesystem for PHP files</li>
    <li>If the file does not contain an interface, class, or abstract class,
    skip it.</li>
    <li>If it does, get its declared namespace and classname</li>
</ul>

<p>
    The question was what implementation approach to use.
</p>

<p>
    I'm well aware of <code>RecursiveDirectoryIterator</code>, and planned to
    use that. However, I also had heard of <code>FilterIterator</code>, and
    wondered if I could tie that in somehow. In the end, I could, but the
    solution was non-obvious.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>

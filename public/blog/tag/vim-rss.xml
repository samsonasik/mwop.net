<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Tag: vim :: phly, boy, phly</title>
    <description>Tag: vim :: phly, boy, phly</description>
    <pubDate>Fri, 17 Dec 2010 08:50:53 +0000</pubDate>
    <generator>Zend_Feed_Writer 2.0.0beta5 (http://framework.zend.com)</generator>
    <link>http://mwop.net/blog/tag/vim.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://mwop.net/blog/tag/vim-rss.xml"/>
    <item>
      <title>Vim Toolbox, 2010 Edition</title>
      <pubDate>Fri, 17 Dec 2010 08:50:53 +0000</pubDate>
      <link>http://mwop.net/blog/249-Vim-Toolbox,-2010-Edition.html</link>
      <guid>http://mwop.net/blog/249-Vim-Toolbox,-2010-Edition.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
I've been using <a href="http://www.vim.org/">Vim</a> for close to a decade. I've often said
that <em>"Unix is my IDE"</em> -- because Vim is built in the Unix philosophy, allowing
me to pipe input into it, out of it, and every which way I want. It fits very
nicely with the Unix philosophy of doing one task well, and allowing
redirection. I've found it ideal for web development in general and PHP
development specifically -- in fact, I've had excellent experiences in every
language I've tried my hand at developing in when using Vim.
</p>

<p>
Vim is also my chosen productivity suite. When I want to write a document, I
don't go into OO.o Writer or MS Word or some other word processor; I open up a
window and start typing. In most cases, I can either cut and paste my work into
other tools, or pipe it to transformation tools. I worry about the <em>content</em>
first, and the <em>presentation</em> later... like any good MVC application. ;-)
</p>

<p>
Like any good tool, you have to invest time in it in order to reap its benefits.
My learning has, to date, fallen into three time periods:
</p>

<ul>
<li>
The initial months in which I first learned Vim, via vimtutor and Steve
   Oualline's Vim book.
</li>
<li>
A period in 2006-2007 when I felt the need to make my coding more efficient,
   and first started playing with exuberant-ctags and omni-completion.
</li>
<li>
The last quarter of 2010 (yes, that's now) when I was introduced to a number
   of new tools via Twitter.
</li>
</ul>
   
<p>
So, this is my Vim Toolbox, 2010 edition.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Vimgrep and Vim Project</title>
      <pubDate>Thu, 23 Oct 2008 01:55:03 +0000</pubDate>
      <link>http://mwop.net/blog/194-Vimgrep-and-Vim-Project.html</link>
      <guid>http://mwop.net/blog/194-Vimgrep-and-Vim-Project.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    Chris Hartjes today was <a href="http://www.littlehart.net/atthekeyboard/2008/10/20/vim-programming-bounty-fuzzyfind-inside-files/">on a quest for a "find in project" feature for Vim</a>.
    "Find in Project" was a feature of Textmate that he'd grown accustomed to
    and was having trouble finding an equivalent for.
</p>

<p>
    The funny thing is that Textmate is a newcomer, and, of course, vim has had
    such a feature for years. The thing to remember with vim, of course, is its
    unix roots; typically if you know the unix command for doing something, you
    can find what you need in vim. In this case, the key is the vimgrep plugin,
    which ships in the standard vim distribution.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Vim Productivity Tips for PHP Developers</title>
      <pubDate>Tue, 25 Mar 2008 15:39:35 +0000</pubDate>
      <link>http://mwop.net/blog/164-Vim-Productivity-Tips-for-PHP-Developers.html</link>
      <guid>http://mwop.net/blog/164-Vim-Productivity-Tips-for-PHP-Developers.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    I use <a href="http://www.vim.org/">Vim</a> for all my editing needs -- TODO
    lists, email, presentation outlines, coding in any language... everything.
    So, I thought I'd start sharing some of my vim habits and tools with others,
    particularly those that pertain to using Vim with PHP.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>exuberant ctags with PHP in Vim</title>
      <pubDate>Thu, 25 Mar 2010 20:18:59 +0000</pubDate>
      <link>http://mwop.net/blog/134-exuberant-ctags-with-PHP-in-Vim.html</link>
      <guid>http://mwop.net/blog/134-exuberant-ctags-with-PHP-in-Vim.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    One reason I've heard PHP developers use for adopting an IDE when developing
    is the ability to click on a class or function name and jump to the
    declaration. Sounds like magic, and it's definitely something I've desired.
</p>
<p>
    One way I get around it is by adopting PEAR coding standards for naming my
    classes. Since they define a one-to-one mapping of class name to the file
    system (substitute the underscore character ('_') with the directory
    separator), I can usually very quickly and easily open a class file,
    particularly if I start in the base directory of the project install.
</p>
<p>
    Today, however, I found <a href="http://ctags.sourceforge.net">exuberant ctags</a>,
    a library which can be used to generate an index file mapping language
    objects to source files and the line in the source file where they are
    declared. Contrary to its name, it's not just for the C language; it
    currently supports 33 different programming languages, including PHP.
</p>
<p>
    I decided to try it out on the Zend Framework core library today. At first
    run, it was pretty useful. However, it was only mapping classes, and, in
    addition, only those defined with the single word 'class' -- abstract classes
    and interfaces were entirely left out. So, I looked into the documentation
    to see if I could change the behaviour.
</p>
<p>
    And, being a Unix program, of course I could. First off, you can add
    functions to the items it indexes with a simple flag. Additionally, you can
    use POSIX regular expressions to refine what it searches.
</p>
<p>
    I whipped up the following script to create my tags index:
</p>
<div class="example"><pre><code lang="bash">
#!/bin/bash
cd /path/to/framework/library
exec ctags-exuberant -f ~/.vim/mytags/framework \
-h \&quot;.php\&quot; -R \
--exclude=\&quot;\.svn\&quot; \
--totals=yes \
--tag-relative=yes \
--PHP-kinds=+cf \
--regex-PHP='/abstract class ([^ ]*)/\1/c/' \
--regex-PHP='/interface ([^ ]*)/\1/c/' \
--regex-PHP='/(public |static |abstract |protected |private )+function ([^ (]*)/\2/f/'
</code></pre></div>
<p>
    This script creates the tag index in the file
    <kbd>$HOME/.vim/mytags/framework</kbd>. It scans for PHP files recursively
    through the tree, excluding any files found in a <kbd>.svn</kbd> directory
    (I'm using a checkout from the subversion repository). The file paths in the
    index are created relative to the tags file; this was important, because if
    this wasn't provided, vim was unable to jump to the file, as it couldn't
    find it. <kbd>--PHP-kinds=+cf</kbd> tells it to index classes and functions.
    Next, I've got three regular expressions.  The first tells it to match
    classes beginning with 'abstract class' as classes. The second tells it to
    match interfaces as classes. The last is so that PHP 5 methods, which begin
    with a visibility operator, to be matched as functions.
</p>
<p>
    Once the index file is generated (it takes less than a second), all you need
    to do in vim is tell it to load it: <kbd>:set
        tags=~/.vim/mytags/framework</kbd>. At this point, you can do all sorts
    of fun stuff. Place the cursor on a class name or method name, anywhere in
    it, and hit <kbd>Ctrl-]</kbd>, and you'll jump to the file and line of its
    declaration; <kbd>Ctrl-T</kbd> then takes you back. If you change the
    invocation to <kbd>Ctrl-W ]</kbd>, it will split the current window and open
    the declaration in the new pane. (If you're familiar with how help works
    with Vim, this should seem pretty familiar.)
</p>
<p>
    One more reason to stick with Vim for your PHP editing needs. :-)
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Tag: mvc :: phly, boy, phly</title>
    <description>Tag: mvc :: phly, boy, phly</description>
    <pubDate>Mon, 05 Jan 2009 10:51:07 -0600</pubDate>
    <generator>Zend_Feed_Writer 2.0.0beta3 (http://framework.zend.com)</generator>
    <link>http://mwop.net/blog/tag/mvc.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://mwop.net/blog/tag/mvc-rss.xml"/>
    <item>
      <title>Model Infrastructure</title>
      <pubDate>Mon, 05 Jan 2009 10:51:07 -0600</pubDate>
      <link>http://mwop.net/blog/202-Model-Infrastructure.html</link>
      <guid>http://mwop.net/blog/202-Model-Infrastructure.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    In the last two entries in this series on models, I covered 
    <a href="http://weierophinney.net/matthew/archives/200-Using-Zend_Form-in-Your-Models.html">using forms as input filters</a> 
    and <a href="http://weierophinney.net/matthew/archives/201-Applying-ACLs-to-Models.html">integrating ACLs into models</a>. 
    In this entry, I tackle some potential infrastructure for your models.
</p>

<p>
    The Model is a complex subject. However, it is often boiled down to either a
    single model class or a full object relational mapping (ORM). I personally
    have never been much of a fan of ORMs as they tie models to the underlying
    database structure; I don't always use a database, nor do I want
    to rely on an ORM solution too heavily on the off-chance that I later need
    to refactor to use services or another type of persistence store. On the
    other hand, the model as a single class is typically too simplistic.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Setting up your Zend_Test test suites</title>
      <pubDate>Sat, 13 Sep 2008 08:37:40 -0500</pubDate>
      <link>http://mwop.net/blog/190-Setting-up-your-Zend_Test-test-suites.html</link>
      <guid>http://mwop.net/blog/190-Setting-up-your-Zend_Test-test-suites.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    Now that <a href="http://framework.zend.com/manual/en/zend.test.html">Zend_Test</a>
    has shipped, developers are of course asking, "How do I setup my test
    suite?" Fortunately, after some discussion with my colleagues and a little
    experimenting on my one, I can answer that now.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Testing Zend Framework MVC Applications</title>
      <pubDate>Thu, 03 Jul 2008 03:47:17 -0500</pubDate>
      <link>http://mwop.net/blog/182-Testing-Zend-Framework-MVC-Applications.html</link>
      <guid>http://mwop.net/blog/182-Testing-Zend-Framework-MVC-Applications.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    Since I originally started hacking on the <a
    href="http://framework.zend.com/">Zend Framework</a> MVC in the fall of
    2006, I've been touting the fact that you can test ZF MVC projects by
    utilizing the Request and Response objects; indeed, this is what I actually
    did to test the Front Controller and Dispatcher. However, until recently,
    there was never an easy way to do so in your userland projects; the default
    request and response objects make it difficult to easily and quickly setup
    tests, and the methods introduced into the front controller to make it
    testable are largely undocumented. 
</p>

<p>
    So, one of my ongoing projects the past few months has been to create an
    infrastructure for functional testing of ZF projects using <a
        href="http://phpunit.de/">PHPUnit</a>. This past weekend, I made the
    final commits that make this functionality feature complete.
</p>

<p>
    The new functionality provides several facets:
</p>

<ul>
    <li>Stub test case classes for the HTTP versions of our Request and Response
        objects, containing methods for setting up the request environment
        (including setting GET, POST, and COOKIE parameters, HTTP request
        headers, etc).</li>
    <li><code>Zend_Dom_Query</code>, a class for using CSS selectors (and XPath)
        to query (X)HTML and XML documents.</li>
    <li>PHPUnit constraints that consume <code>Zend_Dom_Query</code> and the
        Response object to make their comparisons.</li>
    <li>A specialized PHPUnit test case that contains functionality for
        bootstrapping an MVC application, dispatching requests, and a variety of
        assertions that utilize the above constraints and objects.</li>
</ul>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Zend Framework Dojo Integration</title>
      <pubDate>Sun, 25 May 2008 11:40:37 -0500</pubDate>
      <link>http://mwop.net/blog/176-Zend-Framework-Dojo-Integration.html</link>
      <guid>http://mwop.net/blog/176-Zend-Framework-Dojo-Integration.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    I'm pleased to announce that 
    <a href="http://framework.zend.com/">Zend Framework</a> will be partnering
    with <a href="http://dojotoolkit.org/">Dojo Toolkit</a> to deliver
    out-of-the-box Ajax and rich user interfaces for sites developed in Zend
    Framework.
</p>

<p>
    First off, for those ZF users who are using other Javascript toolkits: Zend
    Framework will continue to be basically JS toolkit agnostic. You will still
    be able to use whatever toolkit you want with ZF applications. ZF will
    simply be shipping Dojo so that users have a toolkit by default. Several
    points of integration have been defined, and my hope is that these can be
    used as a blueprint for community contributions relating to other javascript
    frameworks. In the meantime, developers choosing to use Dojo will have a
    rich set of components and integration points to work with.
</p>

<p>
    The integration points we have defined for our initial release are as
    follows:
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>2007 Retrospective</title>
      <pubDate>Thu, 03 Jan 2008 05:22:35 -0600</pubDate>
      <link>http://mwop.net/blog/154-2007-Retrospective.html</link>
      <guid>http://mwop.net/blog/154-2007-Retrospective.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    2007 was a busy year, both personally and professionally. I won't go into
    the personal too much, because, well, it's personal, and some of the details
    are simply inappropriate for blogging material.
</p>

<p>
    Here's the short version:
</p>

<ul>
    <li>One trip to Belgium and The Netherlands.</li>
    <li>Two trips to Israel.</li>
    <li>Two trips to Atlanta, GA (not counting the return trip from Europe, when
    I was stranded for a day due to storms in the Northeast).</li>
    <li>Three different user groups attended, with three presentations.</li>
    <li>One major Zend Framework release</li>
    <li>One PEAR release.</li>
    <li>One podcast.</li>
    <li>One webinar.</li>
    <li>One book published.</li>
    <li>One conference attended.</li>
</ul>

<p>
    What follows is my month-by-month breakdown:
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Tag: rest :: phly, boy, phly</title>
    <description>Tag: rest :: phly, boy, phly</description>
    <pubDate>Wed, 10 Mar 2010 08:28:22 -0600</pubDate>
    <generator>Zend_Feed_Writer 2.0.0beta4 (http://framework.zend.com)</generator>
    <link>http://mwop.net/blog/tag/rest.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://mwop.net/blog/tag/rest-rss.xml"/>
    <item>
      <title>Responding to Different Content Types in RESTful ZF Apps</title>
      <pubDate>Wed, 10 Mar 2010 08:28:22 -0600</pubDate>
      <link>http://mwop.net/blog/233-Responding-to-Different-Content-Types-in-RESTful-ZF-Apps.html</link>
      <guid>http://mwop.net/blog/233-Responding-to-Different-Content-Types-in-RESTful-ZF-Apps.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    In <a
        href="/matthew/archives/227-Exposing-Service-APIs-via-Zend-Framework.html">previous</a>
    <a
        href="/matthew/archives/228-Building-RESTful-Services-with-Zend-Framework.html">articles</a>,
    I've explored building service endpoints and RESTful services with Zend
    Framework. With RPC-style services, you get to cheat: the protocol dictates
    the content type (XML-RPC uses XML, JSON-RPC uses JSON, SOAP uses XML,
    etc.). With REST, however, you have to make choices: what serialization
    format will you support? 
</p>

<p> 
    Why not support multiple formats?
</p>

<p>
    There's no reason you can't re-use your RESTful web service to support
    multiple formats. Zend Framework and PHP have plenty of tools to assist you
    in responding to different format requests, so don't limit yourself. With a
    small amount of work, you can make your controllers format agnostic, and
    ensure that you respond appropriately to different requests.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Building RESTful Services with Zend Framework</title>
      <pubDate>Wed, 11 Nov 2009 09:38:41 -0600</pubDate>
      <link>http://mwop.net/blog/228-Building-RESTful-Services-with-Zend-Framework.html</link>
      <guid>http://mwop.net/blog/228-Building-RESTful-Services-with-Zend-Framework.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    As a followup to my <a href="/matthew/archives/227-Exposing-Service-APIs-via-Zend-Framework.html">previous post</a>, I now turn to RESTful web
    services. I originally encountered the term when attending 
    php|tropics in 2005, where <a href="http://twitter.com/g_schlossnagle">George
        Schlossnaggle</a> likened it to simple GET and POST requests. Since
    then, the architectural style -- and developer understanding of the architectural style
    -- has improved a bit, and a more solid definition can be made.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: rest :: phly, boy, phly</title>
  <updated>2010-03-10T08:28:22-06:00</updated>
  <generator uri="http://framework.zend.com" version="2.0.0beta3">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/rest.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/rest-atom.xml"/>
  <id>http://mwop.net/blog/tag/rest.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Responding to Different Content Types in RESTful ZF Apps]]></title>
    <published>2010-03-04T14:28:07-06:00</published>
    <updated>2010-03-10T08:28:22-06:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/233-Responding-to-Different-Content-Types-in-RESTful-ZF-Apps.html"/>
    <id>http://mwop.net/blog/233-Responding-to-Different-Content-Types-in-RESTful-ZF-Apps.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>In <xhtml:a href="/matthew/archives/227-Exposing-Service-APIs-via-Zend-Framework.html">
previous</xhtml:a> <xhtml:a href="/matthew/archives/228-Building-RESTful-Services-with-Zend-Framework.html">
articles</xhtml:a>, I've explored building service endpoints and RESTful
services with Zend Framework. With RPC-style services, you get to
cheat: the protocol dictates the content type (XML-RPC uses XML,
JSON-RPC uses JSON, SOAP uses XML, etc.). With REST, however, you
have to make choices: what serialization format will you
support?</xhtml:p>
<xhtml:p>Why not support multiple formats?</xhtml:p>
<xhtml:p>There's no reason you can't re-use your RESTful web service to
support multiple formats. Zend Framework and PHP have plenty of
tools to assist you in responding to different format requests, so
don't limit yourself. With a small amount of work, you can make
your controllers format agnostic, and ensure that you respond
appropriately to different requests.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Building RESTful Services with Zend Framework]]></title>
    <published>2009-11-09T08:00:00-06:00</published>
    <updated>2009-11-11T09:38:41-06:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/228-Building-RESTful-Services-with-Zend-Framework.html"/>
    <id>http://mwop.net/blog/228-Building-RESTful-Services-with-Zend-Framework.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>As a followup to my <xhtml:a href="/matthew/archives/227-Exposing-Service-APIs-via-Zend-Framework.html">
previous post</xhtml:a>, I now turn to RESTful web services. I originally
encountered the term when attending php|tropics in 2005, where
<xhtml:a href="http://twitter.com/g_schlossnagle">George
Schlossnaggle</xhtml:a> likened it to simple GET and POST requests. Since
then, the architectural style -- and developer understanding of the
architectural style -- has improved a bit, and a more solid
definition can be made.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

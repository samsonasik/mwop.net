<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: rest :: phly, boy, phly</title>
  <updated>2010-03-10T14:28:22+0000</updated>
  <generator uri="http://framework.zend.com" version="2.0.5">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/rest.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/rest-atom.xml"/>
  <id>http://mwop.net/blog/tag/rest.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Responding to Different Content Types in RESTful ZF Apps]]></title>
    <published>2010-03-04T20:28:07+0000</published>
    <updated>2010-03-10T14:28:22+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/233-Responding-to-Different-Content-Types-in-RESTful-ZF-Apps.html"/>
    <id>http://mwop.net/blog/233-Responding-to-Different-Content-Types-in-RESTful-ZF-Apps.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>In <xhtml:a href="/matthew/archives/227-Exposing-Service-APIs-via-Zend-Framework.html">
previous</xhtml:a> <xhtml:a href="/matthew/archives/228-Building-RESTful-Services-with-Zend-Framework.html">
articles</xhtml:a>, I've explored building service endpoints and RESTful
services with Zend Framework. With RPC-style services, you get to
cheat: the protocol dictates the content type (XML-RPC uses XML,
JSON-RPC uses JSON, SOAP uses XML, etc.). With REST, however, you
have to make choices: what serialization format will you
support?</xhtml:p>
<xhtml:p>Why not support multiple formats?</xhtml:p>
<xhtml:p>There's no reason you can't re-use your RESTful web service to
support multiple formats. Zend Framework and PHP have plenty of
tools to assist you in responding to different format requests, so
don't limit yourself. With a small amount of work, you can make
your controllers format agnostic, and ensure that you respond
appropriately to different requests.</xhtml:p>
<xhtml:h2>Content-Type Detection</xhtml:h2>
<xhtml:p>The first problem to solve is going to be how to retrieve passed
parameters. When using XML or JSON as your serialization format,
you aren't getting your standard POST variables -- you're getting a
raw post instead, and you'll need to deserialize the payload. In
fact, if you're getting a PUT request, you also have some work to
do, as PHP doesn't do anything with PUT requests.</xhtml:p>
<xhtml:p>I do this via an action helper. The basic algorithm is:</xhtml:p>
<xhtml:ul>
<xhtml:li>Do we have a raw body in the request? If not, nothing more need
be done.</xhtml:li>
<xhtml:li>Determine the Content-Type passed in the request headers, and
decode appropriately:
<xhtml:ul>
<xhtml:li>If it was JSON, pass the raw request body to
<xhtml:code>json_decode</xhtml:code> or <xhtml:code>Zend_Json::decode</xhtml:code>.</xhtml:li>
<xhtml:li>If it was XML, I pass the raw request body to the
<xhtml:code>Zend_Config_XML</xhtml:code> constructor, and then serialize to an
arrya using the <xhtml:code>toArray()</xhtml:code> method. Yes, it's a hack,
but it's effective.</xhtml:li>
<xhtml:li>Otherwise, I assume I've got a regular PUT-style request, and I
pass the data to <xhtml:code>parse_str()</xhtml:code>.</xhtml:li>
</xhtml:ul>
</xhtml:li>
</xhtml:ul>
<xhtml:p>I keep the values within the action helper, and then retrieve
them on demand within my action controller. The helper looks like
the following:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class Scrummer_Controller_Helper_Params 
    extends Zend_Controller_Action_Helper_Abstract
{
    /**
     * @var array Parameters detected in raw content body
     */
    protected $_bodyParams = array();

    /**
     * Do detection of content type, and retrieve parameters from raw body if 
     * present
     * 
     * @return void
     */
    public function init()
    {
        $request     = $this-&gt;getRequest();
        $contentType = $request-&gt;getHeader('Content-Type');
        $rawBody     = $request-&gt;getRawBody();
        if (!$rawBody) {
            return;
        }
        switch (true) {
            case (strstr($contentType, 'application/json')):
                $this-&gt;setBodyParams(Zend_Json::decode($rawBody));
                break;
            case (strstr($contentType, 'application/xml')):
                $config = new Zend_Config_Xml($rawBody);
                $this-&gt;setBodyParams($config-&gt;toArray());
                break;
            default:
                if ($request-&gt;isPut()) {
                    parse_str($rawBody, $params);
                    $this-&gt;setBodyParams($params);
                }
                break;
        }
    }

    /**
     * Set body params
     * 
     * @param  array $params 
     * @return Scrummer_Controller_Action
     */
    public function setBodyParams(array $params)
    {
        $this-&gt;_bodyParams = $params;
        return $this;
    }

    /**
     * Retrieve body parameters
     * 
     * @return array
     */
    public function getBodyParams()
    {
        return $this-&gt;_bodyParams;
    }

    /**
     * Get body parameter
     * 
     * @param  string $name 
     * @return mixed
     */
    public function getBodyParam($name)
    {
        if ($this-&gt;hasBodyParam($name)) {
            return $this-&gt;_bodyParams[$name];
        }
        return null;
    }

    /**
     * Is the given body parameter set?
     * 
     * @param  string $name 
     * @return bool
     */
    public function hasBodyParam($name)
    {
        if (isset($this-&gt;_bodyParams[$name])) {
            return true;
        }
        return false;
    }

    /**
     * Do we have any body parameters?
     * 
     * @return bool
     */
    public function hasBodyParams()
    {
        if (!empty($this-&gt;_bodyParams)) {
            return true;
        }
        return false;
    }

    /**
     * Get submit parameters
     * 
     * @return array
     */
    public function getSubmitParams()
    {
        if ($this-&gt;hasBodyParams()) {
            return $this-&gt;getBodyParams();
        }
        return $this-&gt;getRequest()-&gt;getPost();
    }

    public function direct()
    {
        return $this-&gt;getSubmitParams();
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>This helper is intended to be run on each request, so I register
it in my bootstrap:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class Bootstrap extends Zend_Application_Bootstrap_Bootstrap
{
    // ...
    protected function _initActionHelpers()
    {
        // ...
        $params = new Scrummer_Controller_Helper_Params();
        Zend_Controller_Action_HelperBroker::addHelper($params);
        // ...
    }
    // ...
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Within your action controller, all you need to do is call the
helper:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
$data = $this-&gt;params();
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>In a RESTful controller, you'll only need to use this with your
<xhtml:code>postAction</xhtml:code> and <xhtml:code>putAction</xhtml:code>. The beauty is
that your controller can remain ignorant of the Content-Type -- you
write the same logic to retrieve your parameters regardless.</xhtml:p>
<xhtml:h2>Responding to the client: Context Switching</xhtml:h2>
<xhtml:p>So, the first half of the problem is taken care of: how to
handle the request. The second half is responding
appropriately.</xhtml:p>
<xhtml:p>Zend Framework has some built in tooling to help with this. The
ContextSwitch and AjaxContext action helpers look for a particular
parameter -- "format" by default -- and, if detected, will render
an alternate view script named after the context. As an example, if
an "XML" context is detected, it will render
"&lt;controller&gt;/&lt;action&gt;.xml.phtml" -- note the ".xml"
segment of the script name.</xhtml:p>
<xhtml:p>Both helpers work in the same basic way (the latter,
AjaxContext, will only activate if the request is determined to
originate from an XMLHttpRequest): you define which actions in the
controller are context sensitive, and then if the context is
detected, a new view script will be used.</xhtml:p>
<xhtml:p>So, the first trick is ensuring that the context is passed. As
mentioned before, the helpers look for a "format" parameter in the
request object. You can pass this using a query parameter --
"?format=xml" -- but I find that ugly. There's an HTTP header
defined for this purpose already: "Accept".</xhtml:p>
<xhtml:p>Detecting the header and injecting the context into the request
is absurdly simple, and can be done in a
<xhtml:code>dispatchLoopStartup</xhtml:code> plugin:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class Scrummer_Controller_Plugin_AcceptHandler
    extends Zend_Controller_Plugin_Abstract
{
    public function dispatchLoopStartup(Zend_Controller_Request_Abstract $request)
    {
        if (!$request instanceof Zend_Controller_Request_Http) {
            return;
        }

        $header = $request-&gt;getHeader('Accept');
        switch (true) {
            case (strstr($header, 'application/json')):
                $request-&gt;setParam('format', 'json');
                break;
            case (strstr($header, 'application/xml') 
                  &amp;&amp; (!strstr($header, 'html'))):
                $request-&gt;setParam('format', 'xml');
                break;
            default:
                break;
        }
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>The above can be registered in your application
configuration:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="ini" xml:lang="ini">
resources.frontController.plugins[] = \"Scrummer_Controller_Plugin_AcceptHandler\"
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>I like my RESTful controllers to automatically expose their
methods as context-aware. To make this happen, I defined a marker
interface, "Scrummer_Rest_Controller", and created an action helper
that checks if the current controller implements it; if it does, I
then automatically add contexts for the RESTful actions.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class Scrummer_Controller_Helper_RestContexts
    extends Zend_Controller_Action_Helper_Abstract
{
    protected $_contexts = array(
        'xml', 
        'json',
    );

    public function preDispatch()
    {
        $controller = $this-&gt;getActionController();
        if (!$controller instanceof Scrummer_Rest_Controller) {
            return;
        }

        $this-&gt;_initContexts();

        // Set a Vary response header based on the Accept header
        $this-&gt;getResponse()-&gt;setHeader('Vary', 'Accept');
    }

    protected function _initContexts()
    {
        $cs = $this-&gt;getActionController()-&gt;contextSwitch;
        $cs-&gt;setAutoJsonSerialization(false);
        foreach ($this-&gt;_contexts as $context) {
            foreach (array('index', 'post', 'get', 'put', 'delete') as $action) {
                $cs-&gt;addActionContext($action, $context);
            }
        }
        $cs-&gt;initContext();
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Register this via the bootstrap as well:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
class Bootstrap extends Zend_Application_Bootstrap_Bootstrap
{
    // ...
    protected function _initActionHelpers()
    {
        // ...
        $params = new Scrummer_Controller_Helper_Params();
        Zend_Controller_Action_HelperBroker::addHelper($params);

        $contexts = new Scrummer_Controller_Helper_RestContexts();
        Zend_Controller_Action_HelperBroker::addHelper($contexts);
        // ...
    }
    // ...
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>There are two things to note about this helper. First, you'll
see that I specify a "Vary" header. This is to ensure that if the
client chooses to cache responses, it will cache separate responses
based on the value sent in the "Accept" header.</xhtml:p>
<xhtml:p>Second, note that I turn off automatic JSON serialization in the
ContextSwitch helper. I do this so that I can keep my controller
context agnostic; this will require additional view scripts, but
the ability to keep my controller logic simple will be worth it.
More on that in a moment.</xhtml:p>
<xhtml:p>We now have the infrastructure in place to respond to different
contexts based on the "Accept" header, and can retrieve parameters
appropriately based on the "Content-Type" provided us. Now comes
the actual response.</xhtml:p>
<xhtml:h2>Responding to the client: Views</xhtml:h2>
<xhtml:p>Recall that ContextSwitch will attach an additional prefix to
the specified view script --
"&lt;controller&gt;/&lt;action&gt;.phtml" will become
"&lt;controller&gt;/&lt;action&gt;.xml.phtml" or
"&lt;controller&gt;/&lt;action&gt;.json.phtml". Basically, for each
context we will respond to, we have an additional view script per
action.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="text" xml:lang="text">
views/
|-- scripts/
|   `-- foo/
|      |-- delete.phtml
|      |-- delete.json.phtml
|      |-- delete.xml.phtml
|      |-- get.phtml
|      |-- get.json.phtml
|      |-- get.xml.phtml
|      |-- index.phtml
|      |-- index.json.phtml
|      |-- index.xml.phtml
|      |-- post.phtml
|      |-- post.json.phtml
|      |-- post.xml.phtml
|      |-- put.phtml
|      |-- put.json.phtml
|      `-- put.xml.phtml
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>This may seem like overkill, but consider the following
representative method from my controller:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
    public function postAction()
    {
        $data    = $this-&gt;params();
        $service = $this-&gt;getService();
        $result  = $service-&gt;add($data);  
        if (!$result) {
            $this-&gt;view-&gt;form = $service-&gt;getBacklogForm();
            return;
        }

        $this-&gt;view-&gt;success = true;
        $this-&gt;view-&gt;backlog = $result;
    }
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>You don't see anything in there about headers, redirects, or XHR
requests. Just slinging data to services and views. Real
simple.</xhtml:p>
<xhtml:p>The view scripts then take care of the appropriate display
logic. Let's look at two view scripts for the above action, one for
plain old HTML, the other for a JSON response:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
&lt;?php // backlog/post.phtml ?&gt;
&lt;?php 
if ($this-&gt;success):
    $this-&gt;response-&gt;setRedirect($this-&gt;url(array(
        'controller' =&gt; 'backlog',
        'id'         =&gt; $this-&gt;backlog-&gt;id,
    ), 'rest', true));
else: ?&gt;
&lt;h2&gt;Create new backlog&lt;/h2&gt;
&lt;?php
    $this-&gt;form-&gt;setAction($this-&gt;url())
               -&gt;setMethod('post');
    echo $this-&gt;form;
endif ?&gt;

&lt;?php // backlog/post.json.phtml ?&gt;
&lt;?php
if ($this-&gt;success) {
    $url = $this-&gt;url(array(
        'controller' =&gt; 'backlog',
        'id'         =&gt; $this-&gt;backlog-&gt;id,
    ), 'rest', true);
    $this-&gt;response-&gt;setHeader('Location', $url)
                   -&gt;setHttpResponseCode(201);
    echo $this-&gt;json($this-&gt;backlog-&gt;toArray());
    return;
}

$form = $this-&gt;form;
$form-&gt;setAction($this-&gt;url())
     -&gt;setMethod('post');
echo $this-&gt;jsonFormErrors($form);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>A few things to note: I inject my response object into the view.
I feel HTTP headers are part of the view, and thus I deal with them
there. That also serves the purpose of keeping my controllers thin
and agnostic. Additionally, you'll note that I use different
response codes for HTML versus JSON -- this allows my JSON-REST
support to be RESTful, by returning a 201 status code indicating
the resource was created; I also return a JSON representation of
the object. Finally, you'll note that I have a special view helper
for creating JSON representations of validation errors.</xhtml:p>
<xhtml:h2>Closing points</xhtml:h2>
<xhtml:p>This post is far from exhaustive, and I expect it will likely
raise at least as many questions as it tries to answer.</xhtml:p>
<xhtml:p>My main point in this article is to get you, the reader and
developer, thinking creatively about how to expose RESTful web
services. Hopefully, you're taking the following away:</xhtml:p>
<xhtml:ol>
<xhtml:li>Architect in such a way as to minimize the code in your
controllers; keep that code as agnostic as possible in regards to
where input comes from and what type of response is required.</xhtml:li>
<xhtml:li>Use front controller plugins and action helpers to create
scaffolding for your services; these are incredibly flexible and
re-usable, and help make point 1 that much easier.</xhtml:li>
<xhtml:li>Offload as much as possible to your views. This will allow you
to isolate logic specific to given formats.</xhtml:li>
</xhtml:ol>
<xhtml:p>What are you waiting for? Don't you have an API to expose?</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Building RESTful Services with Zend Framework]]></title>
    <published>2009-11-09T14:00:00+0000</published>
    <updated>2009-11-11T15:38:41+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/228-Building-RESTful-Services-with-Zend-Framework.html"/>
    <id>http://mwop.net/blog/228-Building-RESTful-Services-with-Zend-Framework.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>As a followup to my <xhtml:a href="/matthew/archives/227-Exposing-Service-APIs-via-Zend-Framework.html">
previous post</xhtml:a>, I now turn to RESTful web services. I originally
encountered the term when attending php|tropics in 2005, where
<xhtml:a href="http://twitter.com/g_schlossnagle">George
Schlossnaggle</xhtml:a> likened it to simple GET and POST requests. Since
then, the architectural style -- and developer understanding of the
architectural style -- has improved a bit, and a more solid
definition can be made.</xhtml:p>
<xhtml:p>At its heart, <xhtml:a href="http://en.wikipedia.org/wiki/Representational_State_Transfer"/>REST
simply dictates that a given resource have a unique address, and
that you interact with that resource using HTTP verbs. The standard
verbs utilized are:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:em>GET</xhtml:em>: retrieve a list of resources, or, if an
identifier is present, view a single resource</xhtml:li>
<xhtml:li><xhtml:em>POST</xhtml:em>: create a new resource with the data provided in
the POST</xhtml:li>
<xhtml:li><xhtml:em>PUT</xhtml:em>: update an existing resource as specified by an
identifier, using the PUT data</xhtml:li>
<xhtml:li><xhtml:em>DELETE</xhtml:em>: delete an existing resource as specified by an
identifier</xhtml:li>
</xhtml:ul>
<xhtml:p>The standard URL structure used is as follows:</xhtml:p>
<xhtml:ul>
<xhtml:li>"/resource" - GET (list) and POST operations</xhtml:li>
<xhtml:li>"/resource/{identifier}" - GET (view), PUT, and DELETE
operations</xhtml:li>
</xhtml:ul>
<xhtml:p>What the REST paradigm provides you is a simple, standard way to
structure your CRUD (Create-Read-Update-Delete) applications. Due
to the large number of REST clients available, it also means that
if you follow the rules, you get a ton of interoperability with
those clients.</xhtml:p>
<xhtml:p>As of <xhtml:a href="http://framework.zend.com/">Zend Framework</xhtml:a>
1.9.0, it's trivially easy to create RESTful routes for your MVC
application, as well as to handle the various REST actions via
action controllers.</xhtml:p>
<xhtml:p><xhtml:a href="http://framework.zend.com/manual/en/zend.controller.router.html#zend.controller.router.routes.rest">
Zend_Rest_Route</xhtml:a> allows you to define RESTful controllers at
several levels:</xhtml:p>
<xhtml:ul>
<xhtml:li>You can make it the default route, meaning that unless you have
additional routes, all controllers will be considered REST
controllers.</xhtml:li>
<xhtml:li>You can specify modules that contain RESTful controllers.</xhtml:li>
<xhtml:li>You can specify specific controllers per module that are
RESTful</xhtml:li>
</xhtml:ul>
<xhtml:p>As examples:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
$front = Zend_Controller_Front::getInstance();
$router = $front-&gt;getRouter();

// Specifying all controllers as RESTful:
$restRoute = new Zend_Rest_Route($front);
$router-&gt;addRoute('default', $restRoute);

// Specifying the \"api\" module only as RESTful:
$restRoute = new Zend_Rest_Route($front, array(), array(
    'api',
));
$router-&gt;addRoute('rest', $restRoute);

// Specifying the \"api\" module as RESTful, and the \"task\" controller of the
// \"backlog\" module as RESTful:
$restRoute = new Zend_Rest_Route($front, array(), array(
    'api',
    'backlog' =&gt; array('task'),
));
$router-&gt;addRoute('rest', $restRoute);
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>To define a RESTful action controller, you can either extend
Zend_Rest_Controller, or simply define the following methods in a
standard controller extending Zend_Controller_Action (you'll need
to define them regardless):</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
// Or extend Zend_Rest_Controller
class RestController extends Zend_Controller_Action
{
    // Handle GET and return a list of resources
    public function indexAction() {}

    // Handle GET and return a specific resource item
    public function getAction() {}

    // Handle POST requests to create a new resource item
    public function postAction() {}

    // Handle PUT requests to update a specific resource item
    public function putAction() {}

    // Handle DELETE requests to delete a specific item
    public function deleteAction() {}
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>For those methods that operate on individual resources
(getAction(), putAction(), and deleteAction()), you can test for
the identifier using the following:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
if (!$id = $this-&gt;_getParam('id', false)) {
    // report error, redirect, etc.
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:h2>Responding is an art</xhtml:h2>
<xhtml:p>Many developers are either unaware of or ignore the part of the
specification that dictates what the <xhtml:em>response</xhtml:em> should look
like.</xhtml:p>
<xhtml:p>For instance, in classic REST, after performing a POST to create
a new item, you should do the following:</xhtml:p>
<xhtml:ul>
<xhtml:li>Set the HTTP response code to 201, indicating "Created"</xhtml:li>
<xhtml:li>Set the Location header to point to the canonical URI for the
newly created item: "/team/31"</xhtml:li>
<xhtml:li>Provide a representation of the newly created item</xhtml:li>
</xhtml:ul>
<xhtml:p>Note that there's no redirect, which flies in the face of
standard web development (where GET-POST-Redirect is the typical
format). This is a common "gotcha" moment.</xhtml:p>
<xhtml:p>Similarly, with PUT requests, you simply indicate an HTTP 200
status when successful, and show a representation of the updated
item. DELETE requests should return an HTTP 204 status (indicating
success - no content), with no body content.</xhtml:p>
<xhtml:p><xhtml:em>Note: when building RESTful HTML applications, you may want
to still do GET-POST-Redirect to prevent caching issues. The above
applies to RESTful web services, which typically use XML or JSON
for transactions, and have smart clients for interacting with the
service.</xhtml:em></xhtml:p>
<xhtml:p>I'll be writing another article soon showing some tips and
tricks for interacting with HTTP headers, both from the request and
for the response, as it's a subject lengthy enough for a post of
its own. In the meantime, start playing with Zend_Rest_Route and
standardizing on it for your CRUD operations!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

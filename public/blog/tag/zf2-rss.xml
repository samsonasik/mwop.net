<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Tag: zf2 :: phly, boy, phly</title>
    <description>Tag: zf2 :: phly, boy, phly</description>
    <pubDate>Mon, 30 Apr 2012 16:00:00 -0500</pubDate>
    <generator>Zend_Feed_Writer 2.0.0beta4 (http://framework.zend.com)</generator>
    <link>http://mwop.net/blog/tag/zf2.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://mwop.net/blog/tag/zf2-rss.xml"/>
    <item>
      <title>Why Modules?</title>
      <pubDate>Mon, 30 Apr 2012 16:00:00 -0500</pubDate>
      <link>http://mwop.net/blog/2012-04-30-why-modules.html</link>
      <guid>http://mwop.net/blog/2012-04-30-why-modules.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    I've blogged <a href="/blog/267-Getting-started-writing-ZF2-modules.html">about 
    getting started with ZF2 modules</a>, as well as <a href="/blog/zf2-modules-you-can-use-today.html">about 
    ZF2 modules you can already use</a>. But after fielding some questions recently, 
    I realized I should talk about <em>why</em> modules are important for the 
    ZF2 ecosystem.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Developing A ZF2 Blog</title>
      <pubDate>Tue, 03 Apr 2012 21:50:00 -0500</pubDate>
      <link>http://mwop.net/blog/2012-05-developing-a-zf2-blog.html</link>
      <guid>http://mwop.net/blog/2012-05-developing-a-zf2-blog.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    This post tells a story.
</p>

<p>
    A long time ago, I set out to write my own blog platform. Yes, <a 
    href="http://wordpress.org">WordPress</a> is a fine blogging platform, as is 
    <a href="http://www.s9y.org/">Serendipity</a> (aka "s9y", and my previous 
    platform). And yes, I know about <a 
    href="http://habariproject.org">Habari</a>. And, for those of you skimming 
    ahead, yes, I'm quite aware of <a href="http://github.com/mojombo/jekyll">Jekyll</a>, 
    thank you anyways.
</p>

<p>
    Why write something of my own? Well, of course, there's the fact that I'm
    a developer, and have control issues. Then there's also the fact that a 
    blog is both a simple enough domain to allow easily experimenting with new
    technology and paradigms, while simultaneously providing a complex enough
    domain to expose non-trivial issues. 
</p>
    
<p>
    When I started this project, it was a technology-centered endeavor; I 
    wanted to play with document databases such as <a 
    href="http://couchdb.apache.org/">CouchDB</a> and <a 
    href="http://www.mongodb.org/">MongoDB</a>, and with caching technologies 
    like <a href="http://memcached.org">memcached</a> and <a 
    href="http://redis.io">redis</a>.
</p>

<p>
    Not long after I started, I also realized it was a great playground for me
    to prototype ideas for <a href="http://framework.zend.com/zf2">ZF2</a>;
    in fact, the original DI and MVC prototypes lived as branches of my blog.
    (My repository is still named "zf2sandbox" to this day, though it 
    technically houses just my site.)
</p>

<p>
    Over time, I had a few realizations. First, my <em>actual</em> blog was
    suffering. I wasn't taking the time to perform security updates, nor even
    normal upgrades, and was so far behind as to make the process non-trivial,
    particularly as I had a custom theme, and because I was proxying to my 
    blog via a ZF app in order to facilitate a cohesive site look-and-feel. I
    needed to either sink time into upgrading, or finish my blog.
</p>
    
<p>
    My second realization, however, was the more important one: I wanted a 
    platform where I could write how <em>I</em> want to write. I am
    a keyboard-centric developer and computer user, and while I love the web,
    I hate typing in its forms. Additionally, my posts often take longer than
    a typical browser session -- which leaves me either losing my work in a
    GUI admin, or having to write first in my editor of choice, and then 
    cut-and-paste it to the web forms. Finally, I want versions I can easily
    browse with standard diffing tools.
</p>

<p>
    When it came down to it, my blog content is basically static. Occasionally,
    I'll update a post, but it's rare. Comments are really the only dynamic
    aspect of the blog... and what I had with s9y was not cutting it, as I was
    getting more spam than I could keep up with. New commenting platforms such 
    as <a href="http://livefyre.com">Livefyre</a> and <a href="http://disqus.com">Disqus</a>
    provide more features than most blogging platforms I know, and provide 
    another side benefit: because they are javascript-based, you can simply
    drop in a small amount of markup into your post <em>once</em> -- meaning
    your pages can be fully static!
</p>

<p>
    Add these thoughts to the rise of static blogging platforms such as the 
    aforementioned Jekyll, and I had a kernel of an idea: take the work I'd
    done already, and create a static blog generator. 
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>View Layers, Database Abstraction, Configuration, Oh, My!</title>
      <pubDate>Mon, 05 Mar 2012 16:32:45 -0600</pubDate>
      <link>http://mwop.net/blog/zf2-beta3.html</link>
      <guid>http://mwop.net/blog/zf2-beta3.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    Late last week, the Zend Framework community <a href="http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta3-Released">2.0.0beta3</a>, 
    the latest iteration of the v2 framework. What have we been busy doing the 
    last couple months? In a nutshell, getting dirty with view layers, database
    abstraction, and configuration.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>ZF2 Modules You Can Use Today</title>
      <pubDate>Wed, 08 Feb 2012 10:31:47 -0600</pubDate>
      <link>http://mwop.net/blog/zf2-modules-you-can-use-today.html</link>
      <guid>http://mwop.net/blog/zf2-modules-you-can-use-today.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    One key new architectural feature of Zend Framework 2 is its new module
    infrastructure. The basic idea behind modules is to allow developers to both
    create and consume re-usable application functionality -- anything from
    packaging common assets such as CSS and JavaScript to providing MVC
    application classes.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Why Conventions Matter</title>
      <pubDate>Wed, 11 Jan 2012 21:58:28 -0600</pubDate>
      <link>http://mwop.net/blog/why-conventions-matter.html</link>
      <guid>http://mwop.net/blog/why-conventions-matter.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    When I started teaching myself scripting languages, I started with Perl. One
    Perl motto is <a href="http://en.wikipedia.org/wiki/TMTOWTDI">"TMTOWTDI"</a>
    -- "There's More Than One Way To Do It," and pronounced "tim-toady." The
    idea is that there's likely multiple ways to accomplish the very same thing,
    and the culture of the language encourages finding novel ways to do things.
</p>

<p>
    I've seen this principle used everywhere and in just about every programming
    situation possible, applied to logical operations, naming conventions,
    formatting, and even project structure.  Everyone has an opinion on these
    topics, and given free rein to implement as they see fit, it's rare that two
    developers will come up with the same conventions.
</p>

<p>
    TMTOWTDI is an incredibly freeing and egalitarian principle.
</p>

<p>
    Over the years, however, my love for TMTOWTDI has diminished some.  Freeing
    as it is, is also a driving force behind having coding standards and
    conventions -- because when everyone does it their own way, projects become
    quickly hard to maintain. Each person finds themselves reformatting code to
    their own standards, simply so they can read it and follow its flow.
</p>

<p>
    Additionally, TMTOWTDI can actually be a foe of simple, elegant solutions.
</p>

<p>
    Why do I claim this?
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Getting started writing ZF2 modules</title>
      <pubDate>Sat, 12 Nov 2011 12:02:42 -0600</pubDate>
      <link>http://mwop.net/blog/267-Getting-started-writing-ZF2-modules.html</link>
      <guid>http://mwop.net/blog/267-Getting-started-writing-ZF2-modules.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
During <a href="http://zendcon.com/">ZendCon</a> this year, we <a href="http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta1-Released">released 2.0.0beta1</a> of <a href="http://framework.zend.com">Zend Framework</a>.
The key story in the release is the creation of a new MVC layer, and to sweeten
the story, the addition of a modular application architecture.
</p>

<p>
"Modular? What's that mean?" For ZF2, "modular" means that your application is
built of one or more "modules". In a lexicon agreed upon during our IRC
meetings, a module is a collection of code and other files that solves a
specific atomic problem of the application or website. 
</p>

<p>
As an example, consider a typical corporate website in a technical arena. You
might have:
</p>

<ul>
<li>
A home page
</li>
<li>
Product and other marketing pages
</li>
<li>
Some forums
</li>
<li>
A corporate blog
</li>
<li>
A knowledge base/FAQ area
</li>
<li>
Contact forms
</li>
</ul>

<p>
These can be divided into discrete modules:
</p>

<ul>
<li>
A "pages" modules for the home page, product, and marketing pages
</li>
<li>
A "forum" module
</li>
<li>
A "blog" module
</li>
<li>
An "faq" or "kb" module
</li>
<li>
A "contact" module
</li>
</ul>

<p>
Furthermore, if these are developed well and discretely, they can be <em>re-used</em>
between different applications!
</p>

<p>
So, let's dive into ZF2 modules!
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Using the ZF2 EventManager</title>
      <pubDate>Thu, 06 Oct 2011 14:58:39 -0500</pubDate>
      <link>http://mwop.net/blog/266-Using-the-ZF2-EventManager.html</link>
      <guid>http://mwop.net/blog/266-Using-the-ZF2-EventManager.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
Earlier this year, I <a href="http://weierophinney.net/matthew/archives/251-Aspects,-Filters,-and-Signals,-Oh,-My!.html">wrote about Aspects, Intercepting Filters, Signal Slots, and Events</a>, 
in order to compare these similar approaches to handling both asychronous
programming as well as handling cross-cutting application concerns in a cohesive
way.
</p>

<p>
I took the research I did for that article, and applied it to what was then a
"SignalSlot" implementation within Zend Framework 2, and refactored that work
into a new "EventManager" component. This article is intended to get you up and
running with it.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Backported ZF2 Autoloaders</title>
      <pubDate>Mon, 23 May 2011 10:28:35 -0500</pubDate>
      <link>http://mwop.net/blog/262-Backported-ZF2-Autoloaders.html</link>
      <guid>http://mwop.net/blog/262-Backported-ZF2-Autoloaders.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
In the past six weeks, I've delivered both a webinar and a tutorial on Zend
Framework 2 development patterns. The first pattern I've explored is our new
suite of autoloaders, which are aimed at both performance and rapid application
development -- the latter has always been true, as we've followed PEAR
standards, but the former has been elusive within the 1.X series.
</p>

<p>
Interestingly, I've had quite some number of folks ask if they can use the new
autoloaders in their Zend Framework 1 development. The short answer is "yes,"
assuming you're running PHP 5.3 already. If not, however, until today, the
answer has been "no."
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>Introducing the ZF2 Plugin Broker</title>
      <pubDate>Thu, 11 Nov 2010 14:46:00 -0600</pubDate>
      <link>http://mwop.net/blog/248-Introducing-the-ZF2-Plugin-Broker.html</link>
      <guid>http://mwop.net/blog/248-Introducing-the-ZF2-Plugin-Broker.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
In Zend Framework 2.0, we're refactoring in a number of areas in order to
increase the consistency of the framework. One area we identified early is how
plugins are loaded.
</p>

<p>
The word "plugins" in Zend Framework applies to a number of items:
</p>

<ul>
    <li> Helpers (view helpers, action helpers)</li>
    <li> Application resources</li>
    <li> Filters and validators (particularly when applied to Zend_Filter_Input and Zend_Form)</li>
    <li> Adapters</li>
</ul>

<p>
In practically every case, we use a "short name" to name the plugin, in order
to allow loading it dynamically. This allows more concise code, as well as the
ability to configure the code in order to allow specifying alternate
implementations. 
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: subversion :: phly, boy, phly</title>
  <updated>2012-03-05T16:32:45-06:00</updated>
  <generator uri="http://framework.zend.com" version="2.0.0beta3">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/subversion.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/subversion-atom.xml"/>
  <id>http://mwop.net/blog/tag/subversion.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[View Layers, Database Abstraction, Configuration, Oh, My!]]></title>
    <published>2012-03-05T16:32:45-06:00</published>
    <updated>2012-03-05T16:32:45-06:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/zf2-beta3.html"/>
    <id>http://mwop.net/blog/zf2-beta3.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Late last week, the Zend Framework community <xhtml:a href="http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta3-Released">
2.0.0beta3</xhtml:a>, the latest iteration of the v2 framework. What have
we been busy doing the last couple months? In a nutshell, getting
dirty with view layers, database abstraction, and
configuration.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[ZF2 Modules You Can Use Today]]></title>
    <published>2012-02-08T10:31:47-06:00</published>
    <updated>2012-02-08T10:31:47-06:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/zf2-modules-you-can-use-today.html"/>
    <id>http://mwop.net/blog/zf2-modules-you-can-use-today.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>One key new architectural feature of Zend Framework 2 is its new
module infrastructure. The basic idea behind modules is to allow
developers to both create and consume re-usable application
functionality -- anything from packaging common assets such as CSS
and JavaScript to providing MVC application classes.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Call A Spade A Spade]]></title>
    <published>2012-01-18T15:48:07-06:00</published>
    <updated>2012-01-18T15:48:07-06:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/call-a-spade-a-spade.html"/>
    <id>http://mwop.net/blog/call-a-spade-a-spade.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I don't often get political on my blog, or over social media.
But those of you who <xhtml:a href="http://twitter.com/weierophinney">follow me on twitter</xhtml:a> lately
have been treated to a number of tweets and retweets from me about
some bills before the US legislative bodies called "SOPA" and
"PIPA". Over the last couple days, I realized exactly why I
disagree with them, and felt 140 characters is not enough.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Why Conventions Matter]]></title>
    <published>2012-01-11T21:58:28-06:00</published>
    <updated>2012-01-11T21:58:28-06:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/why-conventions-matter.html"/>
    <id>http://mwop.net/blog/why-conventions-matter.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>When I started teaching myself scripting languages, I started
with Perl. One Perl motto is <xhtml:a href="http://en.wikipedia.org/wiki/TMTOWTDI">"TMTOWTDI"</xhtml:a> -- "There's
More Than One Way To Do It," and pronounced "tim-toady." The idea
is that there's likely multiple ways to accomplish the very same
thing, and the culture of the language encourages finding novel
ways to do things.</xhtml:p>
<xhtml:p>I've seen this principle used everywhere and in just about every
programming situation possible, applied to logical operations,
naming conventions, formatting, and even project structure.
Everyone has an opinion on these topics, and given free rein to
implement as they see fit, it's rare that two developers will come
up with the same conventions.</xhtml:p>
<xhtml:p>TMTOWTDI is an incredibly freeing and egalitarian principle.</xhtml:p>
<xhtml:p>Over the years, however, my love for TMTOWTDI has diminished
some. Freeing as it is, is also a driving force behind having
coding standards and conventions -- because when everyone does it
their own way, projects become quickly hard to maintain. Each
person finds themselves reformatting code to their own standards,
simply so they can read it and follow its flow.</xhtml:p>
<xhtml:p>Additionally, TMTOWTDI can actually be a foe of simple, elegant
solutions.</xhtml:p>
<xhtml:p>Why do I claim this?</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[On Error Handling and Closures]]></title>
    <published>2011-12-16T10:26:18-06:00</published>
    <updated>2011-12-16T10:26:18-06:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/on-error-handling-and-closures.html"/>
    <id>http://mwop.net/blog/on-error-handling-and-closures.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The error suppression operator in PHP ("@") is often seen as a
necessary evil. Many, many low-level function will return a value
indicating an error, but also raise an <xhtml:code>E_NOTICE</xhtml:code> or
<xhtml:code>E_WARNING</xhtml:code> -- things you might be able to recover from,
or conditions where you may want to raise an exception.</xhtml:p>
<xhtml:p>So, at times, you find yourself writing code like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
if (false === ($fh = @fopen($filename, 'r'))) {
    throw new RuntimeException(sprintf(
        'Could not open file "%s" to read', $filename
    ));
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Seems straight-forward enough, right? But it's wrong on so many
levels.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Getting started writing ZF2 modules]]></title>
    <published>2011-11-07T12:19:00-06:00</published>
    <updated>2011-11-12T12:02:42-06:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/267-Getting-started-writing-ZF2-modules.html"/>
    <id>http://mwop.net/blog/267-Getting-started-writing-ZF2-modules.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>During <xhtml:a href="http://zendcon.com/">ZendCon</xhtml:a> this year, we
<xhtml:a href="http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta1-Released">
released 2.0.0beta1</xhtml:a> of <xhtml:a href="http://framework.zend.com">Zend
Framework</xhtml:a>. The key story in the release is the creation of a
new MVC layer, and to sweeten the story, the addition of a modular
application architecture.</xhtml:p>
<xhtml:p>"Modular? What's that mean?" For ZF2, "modular" means that your
application is built of one or more "modules". In a lexicon agreed
upon during our IRC meetings, a module is a collection of code and
other files that solves a specific atomic problem of the
application or website.</xhtml:p>
<xhtml:p>As an example, consider a typical corporate website in a
technical arena. You might have:</xhtml:p>
<xhtml:ul>
<xhtml:li>A home page</xhtml:li>
<xhtml:li>Product and other marketing pages</xhtml:li>
<xhtml:li>Some forums</xhtml:li>
<xhtml:li>A corporate blog</xhtml:li>
<xhtml:li>A knowledge base/FAQ area</xhtml:li>
<xhtml:li>Contact forms</xhtml:li>
</xhtml:ul>
<xhtml:p>These can be divided into discrete modules:</xhtml:p>
<xhtml:ul>
<xhtml:li>A "pages" modules for the home page, product, and marketing
pages</xhtml:li>
<xhtml:li>A "forum" module</xhtml:li>
<xhtml:li>A "blog" module</xhtml:li>
<xhtml:li>An "faq" or "kb" module</xhtml:li>
<xhtml:li>A "contact" module</xhtml:li>
</xhtml:ul>
<xhtml:p>Furthermore, if these are developed well and discretely, they
can be <xhtml:em>re-used</xhtml:em> between different applications!</xhtml:p>
<xhtml:p>So, let's dive into ZF2 modules!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Using the ZF2 EventManager]]></title>
    <published>2011-09-12T15:45:13-05:00</published>
    <updated>2011-10-06T14:58:39-05:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/266-Using-the-ZF2-EventManager.html"/>
    <id>http://mwop.net/blog/266-Using-the-ZF2-EventManager.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Earlier this year, I <xhtml:a href="http://weierophinney.net/matthew/archives/251-Aspects,-Filters,-and-Signals,-Oh,-My!.html">
wrote about Aspects, Intercepting Filters, Signal Slots, and
Events</xhtml:a>, in order to compare these similar approaches to
handling both asychronous programming as well as handling
cross-cutting application concerns in a cohesive way.</xhtml:p>
<xhtml:p>I took the research I did for that article, and applied it to
what was then a "SignalSlot" implementation within Zend Framework
2, and refactored that work into a new "EventManager" component.
This article is intended to get you up and running with it.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Using DocBlox]]></title>
    <published>2011-08-03T13:00:00-05:00</published>
    <updated>2011-08-05T01:39:58-05:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/265-Using-DocBlox.html"/>
    <id>http://mwop.net/blog/265-Using-DocBlox.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Until a few years ago, there were basically two tools you could
use to generate API documentation in PHP: <xhtml:a href="http://phpdocumentor.org/">phpDocumentor</xhtml:a> and <xhtml:a href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</xhtml:a>. phpDocumentor
was long considered the standard, with Doxygen getting notice when
more advanced features such as inheritance diagrams are required.
However, phpDocumentor is practically unsupported at this time
(though a small group of developers is working on a new version),
and Doxygen has never had PHP as its primary concern. As such, a
number of new projects are starting to emerge as replacements.</xhtml:p>
<xhtml:p>One of these is <xhtml:a href="http://docblox-project.org">DocBlox</xhtml:a>. I am well aware there are
several others -- and indeed, I've tried several of them. This post
is not here to debate the merits or demerits of this or other
solutions; the intention is to introduce you to DocBlox so that you
can evaluate it yourself.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Converting DocBook4 to DocBook5]]></title>
    <published>2011-07-19T16:49:00-05:00</published>
    <updated>2011-07-21T18:28:20-05:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/264-Converting-DocBook4-to-DocBook5.html"/>
    <id>http://mwop.net/blog/264-Converting-DocBook4-to-DocBook5.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Within the <xhtml:a href="https://github.com/zendframework/zf2">Zend
Framework 2 repository</xhtml:a>, I recently performed a conversion from
<xhtml:a href="http://docbook.org/">DocBook</xhtml:a> 4 to 5. The latter is a
more modern version of the toolchain, and offers a somewhat simpler
syntax and workflow. For example, you no longer need to track how
many levels deep you are in your chapter sections -- you simply use
a <xhtml:code>&lt;section&gt;</xhtml:code> tag. One of the nicer changes is
that you do not need to specify a doctype any more; you simply
declare XML namespaces on your root elements and continue merrily
on your way. This actually allows us to remove some actions in our
build process, and makes validation much simpler.</xhtml:p>
<xhtml:p>Interestingly, for DocBook5 being available in beta since 2005
and an official standard since 2009, there is very little material
on migrating from DocBook 4 to 5.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Proxies in PHP]]></title>
    <published>2011-07-05T13:05:00-05:00</published>
    <updated>2011-07-07T08:51:35-05:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/263-Proxies-in-PHP.html"/>
    <id>http://mwop.net/blog/263-Proxies-in-PHP.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>A number of programming design patterns look very similar. One
of these is the <xhtml:em>Proxy</xhtml:em> pattern, which, at first glance, can
look like a number of others: <xhtml:em>Decorator</xhtml:em>,
<xhtml:em>Flyweight</xhtml:em>, even plain old object extension. However, it
has its own niche, and it can provide some incredible flexibility
for a number of programming scenarios.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: git :: phly, boy, phly</title>
  <updated>2012-06-25T02:50:00+0000</updated>
  <generator uri="http://framework.zend.com" version="2.0.0">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/git.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/git-atom.xml"/>
  <id>http://mwop.net/blog/tag/git.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Automatic deployment with git and gitolite]]></title>
    <published>2012-06-25T02:50:00+0000</published>
    <updated>2012-06-25T02:50:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-06-24-git-deploy.html"/>
    <id>http://mwop.net/blog/2012-06-24-git-deploy.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I read a <xhtml:a href="http://seancoates.com/blogs/deploy-on-push-from-github" target="_blank">post recently by Sean Coates about deploy on push</xhtml:a>. The
concept is nothing new: you set up a hook that listens for commits
on specific branches or tags, and it then deploys your site from
that revision.</xhtml:p>
<xhtml:p>Except I'd not done it myself. This is how I got there.</xhtml:p>
<xhtml:p>Sean's approach uses <xhtml:a href="https://help.github.com/articles/post-receive-hooks" target="_blank">Github webhooks</xhtml:a>, which are a fantastic concept.
Basically, once your commit completes, Github will send a
JSON-encoded payload to a specific URI. Sean uses this to trigger
an API call to a specific page in his website, which will then
trigger a deployment activity.</xhtml:p>
<xhtml:p>Awesome, this should be easy; I already have a deploy script
written that I trigger manually.</xhtml:p>
<xhtml:p>One small problem: my site, while in Git, is not on Github. I
maintain it on my own <xhtml:a href="https://github.com/sitaramc/gitolite" target="_blank">Gitolite</xhtml:a>
repository. Which means I needed to write my own hooks.</xhtml:p>
<xhtml:p>I originally went down the route of using a post-receive hook.
However, I had problems determining what branch the given commit
was on, despite a variety of advice I found on the subject on
<xhtml:a href="http://stackoverflow.com/" target="_blank">StackOverflow</xhtml:a> and git mailing lists. I ended up
finding a great example using post-update, which was actually
perfect for my needs.</xhtml:p>
<xhtml:p>In order to keep the post-update script non-blocking when I
commit, I made it do very little: It simply determines what branch
the commit was on, and if it was the master branch, it touches a
specific file on the filesystem and finishes. The entire hook looks
like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
#!/bin/bash
branch=$(git rev-parse --symbolic --abbrev-ref $1)
echo "Commit was for branch $branch"
if [[ "$branch" == "master" ]];then
    echo "Preparing to deploy"
    echo "1" &gt; /var/local/mwop.net.update
fi
</xhtml:pre></xhtml:div>
<xhtml:p>Now I needed something to detect such a push, and act on it.</xhtml:p>
<xhtml:p>I considered using cron for this; it'd be relatively easy to
have it fire up once a minute, and simply act on it. But I decided
instead to write a simple little daemon using perl. Perl daemons
are trivially easy to write, and if you use module such as
<xhtml:code>Proc::Daemon</xhtml:code> and follow a few trivial defensive coding
practices, you can keep memory leaks contained (or at least
minimal). Besides, it gave me a chance to dust off my perl
chops.</xhtml:p>
<xhtml:p>I decided I'd have it check for the file in 30 second intervals,
simply sleeping if no changes were detected. If the file was found,
however, it should attempt to deploy. Additionally, I wanted it to
quit if it was unable to remove the file (as this could lead to
multiple deploy attempts), and log success and failure status of
the deploy. The full script looks like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
#!/usr/bin/perl
use strict;
use warnings;
use Proc::Daemon;

Proc::Daemon::Init;

my $continue = 1;
$SIG{TERM} = sub { $continue = 0 };

my $updateFile   = "/var/local/mwop.net.update";
my $updateScript = "/home/matthew/bin/deploy-mwop";
my $logFile      = "/var/local/mwop.net-deploy.log";
while ($continue) {
    # 30s intervals between iterations
    sleep 30;

    # Check for update file, and restart loop if not found
    unless (-e $updateFile) {
        next;
    }

    # Remove update file
    if (!unlink($updateFile)) {
        # If unable to unlink, we need to quit
        system('echo "' . time() . ': Failed to REMOVE ' . $updateFile . '" &gt;&gt; ' . $logFile);
        $continue = 0;
        next;
    }

    # Deploy
    system($updateScript);
    if ( $? == -1 ) {
        system('echo "' . time() . ': FAILED to deploy: ' . $! . '" &gt;&gt; ' .  $logFile);
    } else {
        system('echo "' . time() . ': Successfully DEPLOYED" &gt;&gt; ' . $logFile);
    }
}
</xhtml:pre></xhtml:div>
<xhtml:p>The <xhtml:code>system()</xhtml:code> calls for logging could have been done
using Perl, but I didn't want to deal with additional error
handling and file pointers; simply proxying to the system seemed
reasonable and expedient.</xhtml:p>
<xhtml:p>When all was ready, I started the above listener, which
automatically daemonizes itself. I then installed the post-update
hook into my bare repository, and tested it out. And it runs! When
I push to master, my site is automatically deployed, typically
within 15-20 seconds from completion.</xhtml:p>
<xhtml:h4>Caveats</xhtml:h4>
<xhtml:p>This solution, of course, relies on a daemonized process. If
that process were to terminate, I'd have no idea until I discovered
my site didn't refresh after the most recent push. Clearly, some
sort of monitor checking for the status of the daemon should be in
place.</xhtml:p>
<xhtml:p>Also, note that I'm having this update on changes to the master
branch; you may need to adapt it for your own needs, depending on
your branching strategy.</xhtml:p>
<xhtml:p>Finally, this approach does not address issues that might
require a roll-back. Ideally, the script should probably log what
revision was current prior to the deployment, allowing roll-back to
the previous state. Alternately, the deployment script should
create a new clone of the site and swap symlinks to allow quick
roll-back when required.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[git-svn Tip: don't use core.autocrlf]]></title>
    <published>2008-09-24T16:16:27+0000</published>
    <updated>2008-09-24T16:16:27+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/191-git-svn-Tip-dont-use-core.autocrlf.html"/>
    <id>http://mwop.net/blog/191-git-svn-Tip-dont-use-core.autocrlf.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I've been playing around with <xhtml:a href="http://git.or.cz/">Git</xhtml:a> in the past couple months, and have
been really enjoying it. Paired with subversion, I get the best of
all worlds -- distributed source control when I want it (working on
new features or trying out performance tuning), and non-distributed
source control for my public commits.</xhtml:p>
<xhtml:p><xhtml:a href="http://github.com/guides/dealing-with-newlines-in-git">Github</xhtml:a>
suggests that when working with remote repositories, you turn on
the autocrlf option, which ensures that changes in line endings do
not get accounted for when pushing to and pulling from the remote
repo. However, when working with git-svn, this actually causes
issues. After turning this option on, I started getting the error
"Delta source ended unexpectedly" from git-svn. After a bunch of
aimless tinkering, I finally asked myself the questions, "When did
this start happening?" and, "Have I changed anything with Git
lately?" Once I'd backed out the config change, all started working
again.</xhtml:p>
<xhtml:p>In summary: don't use "git config --global core.autocrlf true"
when using git-svn.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

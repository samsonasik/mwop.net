<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Tag: pear :: phly, boy, phly</title>
    <description>Tag: pear :: phly, boy, phly</description>
    <pubDate>Sat, 21 Aug 2010 17:37:14 -0500</pubDate>
    <generator>Zend_Feed_Writer 2.0.0beta4 (http://framework.zend.com)</generator>
    <link>http://mwop.net/blog/tag/pear.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://mwop.net/blog/tag/pear-rss.xml"/>
    <item>
      <title>Autoloading Benchmarks</title>
      <pubDate>Sat, 21 Aug 2010 17:37:14 -0500</pubDate>
      <link>http://mwop.net/blog/245-Autoloading-Benchmarks.html</link>
      <guid>http://mwop.net/blog/245-Autoloading-Benchmarks.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
During the past week, I've been looking at different strategies for <a href="http://php.net/autoload">autoloading</a> in <a href="http://framework.zend.com/">Zend Framework</a>. I've suspected for some time that our class loading strategy might be one source of performance degradation, and wanted to research some different approaches, and compare performance.
</p>

<p>
In this post, I'll outline the approaches I've tried, the benchmarking stategy I applied, and the results of benchmarking each approach.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>2007 Retrospective</title>
      <pubDate>Thu, 03 Jan 2008 05:22:35 -0600</pubDate>
      <link>http://mwop.net/blog/154-2007-Retrospective.html</link>
      <guid>http://mwop.net/blog/154-2007-Retrospective.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    2007 was a busy year, both personally and professionally. I won't go into
    the personal too much, because, well, it's personal, and some of the details
    are simply inappropriate for blogging material.
</p>

<p>
    Here's the short version:
</p>

<ul>
    <li>One trip to Belgium and The Netherlands.</li>
    <li>Two trips to Israel.</li>
    <li>Two trips to Atlanta, GA (not counting the return trip from Europe, when
    I was stranded for a day due to storms in the Northeast).</li>
    <li>Three different user groups attended, with three presentations.</li>
    <li>One major Zend Framework release</li>
    <li>One PEAR release.</li>
    <li>One podcast.</li>
    <li>One webinar.</li>
    <li>One book published.</li>
    <li>One conference attended.</li>
</ul>

<p>
    What follows is my month-by-month breakdown:
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
    <item>
      <title>File_Fortune refactored</title>
      <pubDate>Tue, 10 Jul 2007 07:34:52 -0500</pubDate>
      <link>http://mwop.net/blog/142-File_Fortune-refactored.html</link>
      <guid>http://mwop.net/blog/142-File_Fortune-refactored.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    Over the past few evenings, I've refactored <a href="http://pear.php.net/trackback/trackback.php?id=File_Fortune">File_Fortune</a>
    to have it implement Iterator, Countable, and ArrayAccess -- basically
    allowing it to act like an array for most intents and purposes. As a result,
    I've eliminated the need for the <kbd>File_Fortune_Writer</kbd> package, and
    greatly simplified the usage.
</p>

<p>
    (Note: sure, File_Fortune may not be that big of a deal, but over 1000
    downloads in the past two years indicates <em>somebody</em> is using it.
    Plus, it powers the random quotes on the family website. :-) )
</p>

<p>
    As some examples:
</p>
<div class="example"><pre><code lang="php">
require_once 'File/Fortune.php';

// Initialize and point it to a directory of fortunes
$fortunes = new File_Fortune('/path/to/fortunedir');

// Retrieve a random fortune 
// (works with either a directory or a single fortune file)
echo $fortunes-&gt;getRandom();

// Set to a specific fortune file:
$fortunes-&gt;setFile('myfortunes');

// Loop through and print all fortunes
foreach ($fortunes as $fortune) {
    echo str_repeat('-', 72), \&quot;\n\&quot;, $fortune, \&quot;\n\n\&quot;;
}

// Hmmm.. let's change one:
$fortunes[7] = \&quot;I never really liked that fortune anyways.\&quot;;

// No need to explicitly save, as it's done during __destruct(), 
// but if you really want to:
$fortunes-&gt;save();

// Let's add a new fortune:
$fortunes-&gt;add('This is a shiny new fortune!');

// and now we'll verify it exists:
$index = count($fortunes) - 1;
echo $fortunes[$index];
</code></pre></div>

<p>
    All-in-all, it's a much better interface. Lesson learned: when porting code
    from other languages, it pays to take some time and determine if there might
    be a better API in your own.
</p>
<p>
    In upcoming releases, I hope to modify the backend to use PHP's Streams API
    instead of direct file access, and also to allow providing a list of fortune
    files explicitly. After that, I should be ready for the initial stable
    release.
</p>

<p><b>Update (2007-07-10): fixed parse error in examples</b></p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>

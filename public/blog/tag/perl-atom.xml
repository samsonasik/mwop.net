<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: perl :: phly, boy, phly</title>
  <updated>2012-06-25T02:50:00+0000</updated>
  <generator uri="http://framework.zend.com" version="2.0.0beta5">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/perl.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/perl-atom.xml"/>
  <id>http://mwop.net/blog/tag/perl.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Automatic deployment with git and gitolite]]></title>
    <published>2012-06-25T02:50:00+0000</published>
    <updated>2012-06-25T02:50:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-06-24-git-deploy.html"/>
    <id>http://mwop.net/blog/2012-06-24-git-deploy.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I read a <xhtml:a href="http://seancoates.com/blogs/deploy-on-push-from-github" target="_blank">post recently by Sean Coates about deploy on push</xhtml:a>. The
concept is nothing new: you set up a hook that listens for commits
on specific branches or tags, and it then deploys your site from
that revision.</xhtml:p>
<xhtml:p>Except I'd not done it myself. This is how I got there.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Why Conventions Matter]]></title>
    <published>2012-01-12T03:58:28+0000</published>
    <updated>2012-01-12T03:58:28+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/why-conventions-matter.html"/>
    <id>http://mwop.net/blog/why-conventions-matter.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>When I started teaching myself scripting languages, I started
with Perl. One Perl motto is <xhtml:a href="http://en.wikipedia.org/wiki/TMTOWTDI">"TMTOWTDI"</xhtml:a> -- "There's
More Than One Way To Do It," and pronounced "tim-toady." The idea
is that there's likely multiple ways to accomplish the very same
thing, and the culture of the language encourages finding novel
ways to do things.</xhtml:p>
<xhtml:p>I've seen this principle used everywhere and in just about every
programming situation possible, applied to logical operations,
naming conventions, formatting, and even project structure.
Everyone has an opinion on these topics, and given free rein to
implement as they see fit, it's rare that two developers will come
up with the same conventions.</xhtml:p>
<xhtml:p>TMTOWTDI is an incredibly freeing and egalitarian principle.</xhtml:p>
<xhtml:p>Over the years, however, my love for TMTOWTDI has diminished
some. Freeing as it is, is also a driving force behind having
coding standards and conventions -- because when everyone does it
their own way, projects become quickly hard to maintain. Each
person finds themselves reformatting code to their own standards,
simply so they can read it and follow its flow.</xhtml:p>
<xhtml:p>Additionally, TMTOWTDI can actually be a foe of simple, elegant
solutions.</xhtml:p>
<xhtml:p>Why do I claim this?</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Seven Things - Tagged by Keith Casey]]></title>
    <published>2009-01-02T15:44:54+0000</published>
    <updated>2009-01-04T21:31:52+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/204-Seven-Things-Tagged-by-Keith-Casey.html"/>
    <id>http://mwop.net/blog/204-Seven-Things-Tagged-by-Keith-Casey.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I'm really not sure I understand these "seven things" or
"tagged" memes, but I'm going to give it a shot, after <xhtml:a href="http://caseysoftware.com/blog/seven-things-tagged-by-tony-bibbs">Keith
Casey</xhtml:a> did a drive-by tagging of me on New Year's Eve.</xhtml:p>
<xhtml:p>So, without further ado, seven things you may not know about
me...</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Mumbles irssi integration]]></title>
    <published>2008-12-10T20:01:50+0000</published>
    <updated>2008-12-12T20:19:50+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/197-Mumbles-irssi-integration.html"/>
    <id>http://mwop.net/blog/197-Mumbles-irssi-integration.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I've been using IRC regularly for the past six to nine months,
in large part due to the growing ZF community on the <xhtml:a href="http://freenode.net/">Freenode</xhtml:a> #zftalk channel (unfortunately,
I simply don't have time to be in that particular channel any more,
but you can generally find me in #zftalk.dev), but also to keep in
contact with other peers, friends, and colleagues.</xhtml:p>
<xhtml:p>One difficulty, however, is keeping productivity high while
staying on IRC. To me, the ultimate client would provide me
notifications when somebody mentions my name or a watch word -
allowing me to read the channel at my leisure, yet still respond to
people in a timely fashion.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Vimgrep and Vim Project]]></title>
    <published>2008-10-21T11:36:49+0000</published>
    <updated>2008-10-23T01:55:03+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/194-Vimgrep-and-Vim-Project.html"/>
    <id>http://mwop.net/blog/194-Vimgrep-and-Vim-Project.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Chris Hartjes today was <xhtml:a href="http://www.littlehart.net/atthekeyboard/2008/10/20/vim-programming-bounty-fuzzyfind-inside-files/">
on a quest for a "find in project" feature for Vim</xhtml:a>. "Find in
Project" was a feature of Textmate that he'd grown accustomed to
and was having trouble finding an equivalent for.</xhtml:p>
<xhtml:p>The funny thing is that Textmate is a newcomer, and, of course,
vim has had such a feature for years. The thing to remember with
vim, of course, is its unix roots; typically if you know the unix
command for doing something, you can find what you need in vim. In
this case, the key is the vimgrep plugin, which ships in the
standard vim distribution.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Vim 7 code completion]]></title>
    <published>2006-09-19T21:45:00+0000</published>
    <updated>2006-09-22T13:21:27+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/123-Vim-7-code-completion.html"/>
    <id>http://mwop.net/blog/123-Vim-7-code-completion.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I may work at <xhtml:a href="http://www.zend.com/">Zend</xhtml:a>, but I've
never been a fan of IDEs. They simply don't suit my programming
style. I can usually keep track of file locations in my head pretty
easily, and what I really need is a blank slate on which I can
write, and one that doesn't consume resource that can better be
used running web servers and other programs. Syntax highlighting,
good indentation -- these are important, but you can get these from
good, minimal text editors very easily. <xhtml:a href="http://www.vim.org">Vim is my editor of choice</xhtml:a>.</xhtml:p>
<xhtml:p>I will admit, though, that one area where I have had IDE-envy is
the area of code completion. I often find myself doing quick
lookups to php.net or perldoc to determine the order of arguments
to a function or method call, or checking for the expected return
value. Most of the time, this doesn't take much time, however, so I
just live with it.</xhtml:p>
<xhtml:p>Today, however, cruising through the blogosphere, I came across
<xhtml:a href="http://linuxhelp.blogspot.com/2006/09/visual-walk-through-of-couple-of-new.html">
an article showcasing some new features of Vim 7.0</xhtml:a>, and
discovered Vim 7's code completion.</xhtml:p>
<xhtml:p>Basically, while in insert mode, you can type &lt;C-x&gt;
&lt;C-o&gt; to have vim attempt to autocomplete the current
keyword. If more than one possibility exists, it shows a dropdown,
and you can use your arrow keys to highlight the keyword that you
wish to use.</xhtml:p>
<xhtml:p>But it gets better! Not only does it do this kind of
autocompletion, but it also opens a small 'scratch preview' pane
showing the function/method signature -- i.e., the expected
arguments and return value!</xhtml:p>
<xhtml:p>I thought I had little need for IDEs before... now I have even
less! Bram and the rest of the Vim team, my hat's off to you for
more fine work!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Telcos are Attacking the Internet]]></title>
    <published>2006-04-28T15:31:00+0000</published>
    <updated>2006-04-28T17:47:28+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/107-Telcos-are-Attacking-the-Internet.html"/>
    <id>http://mwop.net/blog/107-Telcos-are-Attacking-the-Internet.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I generally try to stay out of politics on this blog, but this
time something has to be said, as it affects anyone who uses the
internet, at least in the US.</xhtml:p>
<xhtml:p>Basically, a number of telcos and cable providers are talking
about charging internet content providers -- the places you browse
to on the internet, places like Google, Yahoo!, Amazon, etc. --
fees to ensure bandwidth to their sites. Their argument is that
these content providers are getting a 'free ride' on their lines,
and generating a lot of traffic themselves, and should thus be
paying for the cost of bandwidth.</xhtml:p>
<xhtml:p>This is patently ridiculous. Content providers already have to
pay for their bandwidth -- they, too, have ISPs or agreements with
telcos in place, either explicitly or via their hosting providers.
Sure, some of them, particularly search engines, send out robots in
order to index or find content, but, again, they're paying for the
bandwidth those robots generate. Additionally, people using the
internet are typically paying for bandwidth as well, through their
relationship with their ISP. What this amounts to is the telcos
getting paid not just by each person to whom they provide internet
access, but every end point on the internet, at least those within
the US.</xhtml:p>
<xhtml:p>What this is really about is telcos wanting more money, and
wanting to push their own content. As an example, let's say your
ISP is AOL. AOL is part of Time Warner, and thus has ties to those
media sources. Now, those media sources may put pressure on AOL to
reduce bandwidth to sites operated by ABC, CBS, NBC, FOX, Disney,
PBS, etc. This might mean that your kid can no longer visit the
Sesame Street website reliably, because AOL has reduced the amount
of bandwidth allowed to that service -- but any media site in the
TWC would get optimal access, so they could get to Cartoon Network.
Not to slam Cartoon Network (I love it), but would you rather have
your kid visiting cartoonnetwork.com or pbskids.org? Basically,
content providers would not need to compete based on the value of
their content, but on who they can get to subscribe to their
service.</xhtml:p>
<xhtml:p>Here's another idea: your ISP is MSN. You want to use Google...
but MSN has limited the bandwidth to Google because it's a
competitor, and won't accept any amount of money to increase that
bandwidth. They do the same with Yahoo! So, now you're limited to
MSN search, because that's the only one that responds reliably --
regardless of whether or not you like their search results. By
doing so, they've just artificially inflated the value of their
search engine -- without needing to compete based on merit.</xhtml:p>
<xhtml:p>Additionally, let's say Barnes and Noble has paid MSN to ensure
good bandwidth, but part of that agreement is a non-compete clause.
Now you find your connections to Amazon timing out, meaning that
you can't even see which book provider has the better price on the
book you want; you're stuck looking and buying from B&amp;N.</xhtml:p>
<xhtml:p>Now, let's look at something a little more close to home for
those of us developing web applications. There have been a number
of success stories the last few years: MySpace, Digg, and Flickr
all come to mind. Would these endeavors have been as successful had
they needed to pay multiple times for bandwidth, once to their ISP
and once each to each telco charging for content providers? Indeed,
some of these are still free services -- how would they ever have
been able to pay the extra amounts to the telcos in the first
place?</xhtml:p>
<xhtml:p>So, basically, the only winners here are the telcos.</xhtml:p>
<xhtml:p>Considering how ludicrous this scheme is, one must be thinking,
isn't the US Government going to step in and regulate against such
behaviour? <xhtml:a href="http://www.businessweek.com/technology/content/apr2006/tc20060426_553893.htm?chan=technology_technology+index+page_more+of+today">
The answer, sadly, is no.</xhtml:a> The GOP doesn't like regulation, and
so they want market forces to decide. Sadly, what this will likely
do is force a number of content providers to offshore their
internet operations -- which is likely to have some pretty negative
effects on the economy.</xhtml:p>
<xhtml:p>The decision isn't final -- efforts can still be made to prevent
it (the above link references a Senate committee meeting; there's
been no vote on it). Call your representatives today and give them
an earful. Tell them it's not just about regulation of the
industry, but about fair competition in the market. Allowing the
telcos to extort money from content providers will only reduce the
US' economic chances in the world, and stifle innovation and
choice.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[PHP error reporting for Perl users]]></title>
    <published>2006-03-28T04:10:00+0000</published>
    <updated>2006-03-28T14:19:35+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/105-PHP-error-reporting-for-Perl-users.html"/>
    <id>http://mwop.net/blog/105-PHP-error-reporting-for-Perl-users.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>On <xhtml:a href="http://www.perlmonks.org">perlmonks</xhtml:a> today, a
user was needing to maintain a PHP app, and wanted to know what the
PHP equivalent of "perl -wc script.pl" was -- specifically, they
wanted to know how to run a PHP script from the commandline and
have it display any warnings (ala perl's strict and warnings
pragmas).</xhtml:p>
<xhtml:p>Unfortunately, there's not as simple a way to do this in PHP as
in perl. Basically, you need to do the following:</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:strong>To display errors:</xhtml:strong>
<xhtml:ul>
<xhtml:li>In you php.ini file, set "display_errors = On", <xhtml:b>or</xhtml:b></xhtml:li>
<xhtml:li>In your script, add the line "ini_set('display_errors',
true);"</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li><xhtml:strong>To show notices, warnings, errors, deprecation
notices:</xhtml:strong>
<xhtml:ul>
<xhtml:li>In you php.ini file, set "error_reporting = E_ALL | E_STRICT",
<xhtml:b>or</xhtml:b></xhtml:li>
<xhtml:li>In your script, add the line "error_reporting(E_ALL |
E_STRICT);"</xhtml:li>
</xhtml:ul>
</xhtml:li>
</xhtml:ul>
<xhtml:p>Alternatively, you can create a file with the lines:</xhtml:p>
<xhtml:pre>
&lt;?php
    error_reporting(E_ALL | E_STRICT);
    ini_set('display_errors', true);
</xhtml:pre>
<xhtml:p>and then set the php.ini setting 'auto_prepend_file' to the path
to that file.</xhtml:p>
<xhtml:p><xhtml:strong>NOTE: do not do any of the above on a production
system!</xhtml:strong> PHP's error messages often reveal a lot about your
applications, including file layout and potential vectors of
attack. Turn display_errors off on production machines, set your
error_reporting somewhat lower, and log_errors to a file so you can
keep track of what's going on on your production system.</xhtml:p>
<xhtml:p>The second part of the question was how to run a PHP script on
the command line. This is incredibly simple: php myscript.php. No
different than any other scripting language.</xhtml:p>
<xhtml:p>You can get some good information by using some of the switches,
though. <xhtml:strong>'-l'</xhtml:strong> turns the PHP interpreter into a
linter, and can let you know if your code is well-formed (which
doesn't necessarily preclude runtime or parse errors).
<xhtml:strong>'-f'</xhtml:strong> will run the script through the parser, which
can give you even more information. I typically bind these actions
to keys in vim so I can check my work as I go.</xhtml:p>
<xhtml:p>If you plan on running your code <xhtml:em>solely</xhtml:em> on the
commandline, add a shebang to the first line of your script:
#!/path/to/php. Then make the script executable, and you're good to
go. This is handy for cronjobs, or batch processing scripts.</xhtml:p>
<xhtml:p>All of this information is readily available in <xhtml:a href="http://www.php.net/manual">the PHP manual</xhtml:a>, and the commandline
options are always available by passing the --help switch to the
PHP executable. So, start testing your scripts already!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Sign of a Geek]]></title>
    <published>2004-11-17T21:04:39+0000</published>
    <updated>2004-11-17T21:05:42+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/51-Sign-of-a-Geek.html"/>
    <id>http://mwop.net/blog/51-Sign-of-a-Geek.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>It's now been confirmed: I'm a geek.</xhtml:p>
<xhtml:p>Okay, so that probably comes as no shocker to those of you who
know me, but it's the little things that make me realize it
myself.</xhtml:p>
<xhtml:p>I've been frequenting <xhtml:a href="http://www.perlmonks.org">Perl
Monks</xhtml:a> for a couple of years now, mainly to garner ideas and
code to help me with my personal or work projects. I rarely post
comments, and I've only once submitted a question to the site.
However, I <xhtml:strong>do</xhtml:strong> frequent the site regularly, and the
few comments I've put in -- generally regarding usage of <xhtml:a href="http::/search.cpan.org/search?query=CGI%3A%3AApplication">CGI::Application</xhtml:a>
-- have been typically well-moderated.</xhtml:p>
<xhtml:p>Well, yesterday I <xhtml:a href="http://www.perlmonks.org/?node_id=408255">made a comment</xhtml:a> to a
user <xhtml:a href="http://www.perlmonks.org/?node_id=408231">asking
about editors to use with perl</xhtml:a>. I was incensed by a remark he
made about <xhtml:a href="http://www.vim.org">VIM</xhtml:a> not having the
features he needed. Now, as I said in my comment, I've used VIM on
a daily basis for over two years, and I'm <xhtml:em>still</xhtml:em>
discovering new features -- and I've used all of the features he
was looking for.</xhtml:p>
<xhtml:p>This is where I discovered I'm a geek: my comment made it into
the <xhtml:a href="http://www.perlmonks.org/?node=Best%20Nodes">Daily
Best</xhtml:a> for today, peaking around number 5. The fact that that
made my day indicates to me that I <xhtml:em>must</xhtml:em> be a geek.</xhtml:p>
<xhtml:p>Oh -- and VIM rules!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[PHP_SELF versus SCRIPT_NAME]]></title>
    <published>2004-10-13T01:34:57+0000</published>
    <updated>2004-10-13T01:35:03+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/45-PHP_SELF-versus-SCRIPT_NAME.html"/>
    <id>http://mwop.net/blog/45-PHP_SELF-versus-SCRIPT_NAME.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I've standardized my PHP programming to use the environment
variable <xhtml:b>SCRIPT_NAME</xhtml:b> when I want my script to refer to
itself in links and form actions. I've known that <xhtml:b>PHP_SELF</xhtml:b>
has the same information, but I was more familiar with the name
'SCRIPT_NAME' from using it in perl, and liked the feel of it more
as it seems to describe the resource better ('PHP_SELF' could stand
for the path to the PHP executable if I were to go by the name
only).</xhtml:p>
<xhtml:p>However, I just noticed a post on the php.general newsgroup
where somebody asked what the difference was between them.
Semantically, there isn't any; they should contain the same
information. However, historically and technically speaking, there
is. <xhtml:b>SCRIPT_NAME</xhtml:b> is defined in the CGI 1.1 specification, and
is thus a standard. <xhtml:em>However</xhtml:em>, not all web servers actually
implement it, and thus it isn't necessarily <xhtml:em>portable</xhtml:em>.
<xhtml:b>PHP_SELF</xhtml:b>, on the other hand, is implemented directly by PHP,
and as long as you're programming in PHP, will always be
present.</xhtml:p>
<xhtml:p>Guess I have some grep and sed in my future as I change a bunch
of scripts...</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

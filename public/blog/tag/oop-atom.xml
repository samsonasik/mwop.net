<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: oop :: phly, boy, phly</title>
  <updated>2012-06-30T15:00:00+0000</updated>
  <generator uri="http://framework.zend.com" version="2.0.0beta5">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/oop.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/oop-atom.xml"/>
  <id>http://mwop.net/blog/tag/oop.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[On Visibility in OOP]]></title>
    <published>2012-06-29T02:20:00+0000</published>
    <updated>2012-06-30T15:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-06-28-oop-visibility.html"/>
    <id>http://mwop.net/blog/2012-06-28-oop-visibility.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I'm a big proponent of object oriented programming. OOP done
right helps ease code maintenance and enables code re-use.</xhtml:p>
<xhtml:p>Starting in PHP, OOP enthusiasts got a whole bunch of new tools,
and new tools keep coming into the language for us with each minor
release. One feature that has had a huge impact on frameworks and
libraries has been available since the earliest PHP 5 versions:
visibility.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[On Error Handling and Closures]]></title>
    <published>2011-12-16T16:26:18+0000</published>
    <updated>2011-12-16T16:26:18+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/on-error-handling-and-closures.html"/>
    <id>http://mwop.net/blog/on-error-handling-and-closures.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>The error suppression operator in PHP ("@") is often seen as a
necessary evil. Many, many low-level function will return a value
indicating an error, but also raise an <xhtml:code>E_NOTICE</xhtml:code> or
<xhtml:code>E_WARNING</xhtml:code> -- things you might be able to recover from,
or conditions where you may want to raise an exception.</xhtml:p>
<xhtml:p>So, at times, you find yourself writing code like this:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
if (false === ($fh = @fopen($filename, 'r'))) {
    throw new RuntimeException(sprintf(
        'Could not open file "%s" to read', $filename
    ));
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Seems straight-forward enough, right? But it's wrong on so many
levels.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Dependency Injection: An analogy]]></title>
    <published>2011-03-21T21:52:15+0000</published>
    <updated>2011-03-25T06:25:13+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/260-Dependency-Injection-An-analogy.html"/>
    <id>http://mwop.net/blog/260-Dependency-Injection-An-analogy.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I've been working on a proposal for including service locators
and dependency injection containers in Zend Framework 2.0, and one
issue I've had is trying to explain the basic concept to developers
unfamiliar with the concepts -- or with pre-conceptions that
diverge from the use cases I'm proposing.</xhtml:p>
<xhtml:p>In talking with my wife about it a week or two ago, I realized
that I needed an analogy she could understand; I was basically
using her as my <xhtml:a href="http://en.wikipedia.org/wiki/Rubber_duck_debugging">rubber
duck</xhtml:a>. And it turned out to be a great idea, as it gave me some
good analogies.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Aspects, Filters, and Signals, Oh, My!]]></title>
    <published>2011-01-10T14:30:00+0000</published>
    <updated>2011-01-14T13:53:52+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/251-Aspects,-Filters,-and-Signals,-Oh,-My!.html"/>
    <id>http://mwop.net/blog/251-Aspects,-Filters,-and-Signals,-Oh,-My!.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Last month, during <xhtml:a href="http://phpadvent.org">PHP
Advent</xhtml:a>, <xhtml:a href="http://ohloh.net/accounts/gwoo">gwoo</xhtml:a> wrote
an interesting post on <xhtml:a href="http://phpadvent.org/2010/aspect-oriented-design-by-garrett-woodworth">
Aspect-Oriented Design</xhtml:a>, or Aspect Oriented Programming (AOP) as
it is more commonly known. The article got me to thinking, and
revisiting what I know about AOP, Intercepting Filters, and Signal
Slots -- in particular, what use cases I see for them, what the
state of current PHP offerings are, and where the future may
lie.</xhtml:p>
<xhtml:p>But first, some background is probably in order, as this is a
jargon-heavy post.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Setting up your Zend_Test test suites]]></title>
    <published>2008-09-11T19:00:00+0000</published>
    <updated>2008-09-13T13:37:40+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/190-Setting-up-your-Zend_Test-test-suites.html"/>
    <id>http://mwop.net/blog/190-Setting-up-your-Zend_Test-test-suites.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Now that <xhtml:a href="http://framework.zend.com/manual/en/zend.test.html">Zend_Test</xhtml:a>
has shipped, developers are of course asking, "How do I setup my
test suite?" Fortunately, after some discussion with my colleagues
and a little experimenting on my one, I can answer that now.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Migrating OOP Libraries and Frameworks to PHP 5.3]]></title>
    <published>2008-06-30T13:00:00+0000</published>
    <updated>2008-07-07T03:49:14+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/181-Migrating-OOP-Libraries-and-Frameworks-to-PHP-5.3.html"/>
    <id>http://mwop.net/blog/181-Migrating-OOP-Libraries-and-Frameworks-to-PHP-5.3.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>With PHP 5.3 coming up on the horizon, I'm of course looking
forward to using namespaces. Let's be honest, who wants to write
the following line?</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
$viewRenderer = Zend_Controller_Action_HelperBroker::getStaticHelper('viewRenderer');
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>when the more succinct:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
$viewRenderer = HelperBroker::getStaticHelper('viewRenderer');
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>could be used? (Assuming you've executed <xhtml:code>'use
Zend::Controller::Action;'</xhtml:code> somewhere earlier...)</xhtml:p>
<xhtml:p>However, while namespaces will hopefully lead to more readable
code, particularly code in libraries and frameworks, PHP developers
will finally need to start thinking about sane standards for
abstract classes and interfaces.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

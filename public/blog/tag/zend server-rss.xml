<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/">
  <channel>
    <title>Tag: zend server :: phly, boy, phly</title>
    <description>Tag: zend server :: phly, boy, phly</description>
    <pubDate>Thu, 17 Dec 2009 09:49:20 -0600</pubDate>
    <generator>Zend_Feed_Writer 2.0.0beta3 (http://framework.zend.com)</generator>
    <link>http://mwop.net/blog/tag/zend+server.html</link>
    <atom:link rel="self" type="application/rss+xml" href="http://mwop.net/blog/tag/zend+server-rss.xml"/>
    <item>
      <title>Real-time ZF Monitoring via Zend Server</title>
      <pubDate>Thu, 17 Dec 2009 09:49:20 -0600</pubDate>
      <link>http://mwop.net/blog/229-Real-time-ZF-Monitoring-via-Zend-Server.html</link>
      <guid>http://mwop.net/blog/229-Real-time-ZF-Monitoring-via-Zend-Server.html</guid>
      <author>me@mwop.net (Matthew Weier O'Phinney)</author>
      <dc:creator>Matthew Weier O'Phinney</dc:creator>
      <content:encoded><![CDATA[<p>
    When keeping tabs on your ZF applications, it's often difficult to separate
    application errors from general PHP errors, and if you aggregate them in the
    same location as your web server errors, this can become more difficult
    still.
</p>

<p>
    Additionally, PHP's error reporting doesn't provide a ton of context, even
    when reporting uncaught exceptions -- typically you'll only get a cryptic
    exception message, and what file and line emitted it.
</p>

<p>
    Zend Server's Monitor extension has some capabilities for providing more
    context, and does much of this by default: request and environment settings
    available when the error was logged, the function name and arguments
    provided, and a full backtrace are available for you to inspect.
    Additionally, the Monitor extension includes an API that allows you to
    trigger custom Monitor events, and you can provide additional context when
    doing so -- such as passing objects or arrays that may help provide context
    when debugging.
</p>]]></content:encoded>
      <slash:comments>0</slash:comments>
    </item>
  </channel>
</rss>

<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: zend framework :: phly, boy, phly</title>
  <updated>2012-08-17T16:00:00+0000</updated>
  <generator uri="http://framework.zend.com" version="2.0.0beta5">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/zend+framework.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/zend+framework-atom.xml"/>
  <id>http://mwop.net/blog/tag/zend+framework.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[On Microframeworks]]></title>
    <published>2012-08-17T16:00:00+0000</published>
    <updated>2012-08-17T16:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-08-17-on-microframeworks.html"/>
    <id>http://mwop.net/blog/2012-08-17-on-microframeworks.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>A number of months ago, <xhtml:a href="http://funkatron.com/">Ed
Finkler</xhtml:a> started a discussion in the PHP community about
“<xhtml:a href="http://microphp.org/">MicroPHP</xhtml:a>”; to summarize, the
movement is about:</xhtml:p>
<xhtml:ul>
<xhtml:li>Building small, single-purpose libraries.</xhtml:li>
<xhtml:li>Using small things that work together to solve larger
problems.</xhtml:li>
</xhtml:ul>
<xhtml:p>I think there are some really good ideas that have come out of
this, and also a number of questionable practices<xhtml:sup><xhtml:a name="t1" href="#f1" id="t1">1</xhtml:a></xhtml:sup>.</xhtml:p>
<xhtml:p>One piece in particular I've focussed on is the concept of
so-called “microframeworks”.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[ZF2's New Controller::init()]]></title>
    <published>2012-07-30T20:40:00+0000</published>
    <updated>2012-07-31T02:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-07-30-the-new-init.html"/>
    <id>http://mwop.net/blog/2012-07-30-the-new-init.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>In Zend Framework 1, controller's had an <xhtml:code>init()</xhtml:code>
method, which was called after the controller was instantiated. The
reason for it was to encourage developers not to override the
constructor, and thus potentially break some of the functionality
(as a number of objects were injected via the constructor).
<xhtml:code>init()</xhtml:code> was useful for doing additional object
initialization.</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code language="php">
class MyController extends Zend_Controller_Action
{
    public function init()
    {
        // do some stuff!
    }
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>But this feature is missing from ZF2; how can we accomplish this
sort of pattern?</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[ZF2 Forms in Beta5]]></title>
    <published>2012-07-05T20:40:00+0000</published>
    <updated>2012-07-05T20:40:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-07-02-zf2-beta5-forms.html"/>
    <id>http://mwop.net/blog/2012-07-02-zf2-beta5-forms.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Forms are a nightmare for web development. They break the
concept of separation of concerns:</xhtml:p>
<xhtml:ul>
<xhtml:li>They have a <xhtml:em>display</xhtml:em> aspect (the actual HTML form)</xhtml:li>
<xhtml:li>They have a <xhtml:em>validation</xhtml:em> aspect</xhtml:li>
<xhtml:li>And the two mix, as you need to display validation error
messages.</xhtml:li>
</xhtml:ul>
<xhtml:p>On top of that, the submitted data is often directly related to
your domain models, causing more issues:</xhtml:p>
<xhtml:ul>
<xhtml:li>Not all elements will have a 1:1 mapping to the domain model --
buttons, CSRF protection, CAPTCHAs, etc. usually are
application-level concerns, but not domain issues.</xhtml:li>
<xhtml:li>Names valid for your domain model may not be valid names for
HTML entities.</xhtml:li>
</xhtml:ul>
<xhtml:p>Add to this that the validation logic may be re-usable outside
of a forms context, and you've got a rather complex problem.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Why Modules?]]></title>
    <published>2012-04-30T21:00:00+0000</published>
    <updated>2012-04-30T21:00:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-04-30-why-modules.html"/>
    <id>http://mwop.net/blog/2012-04-30-why-modules.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I've blogged <xhtml:a href="/blog/267-Getting-started-writing-ZF2-modules.html">about getting
started with ZF2 modules</xhtml:a>, as well as <xhtml:a href="/blog/zf2-modules-you-can-use-today.html">about ZF2 modules you
can already use</xhtml:a>. But after fielding some questions recently, I
realized I should talk about <xhtml:em>why</xhtml:em> modules are important for
the ZF2 ecosystem.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Developing A ZF2 Blog]]></title>
    <published>2012-04-03T13:45:00+0000</published>
    <updated>2012-04-04T02:50:00+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/2012-05-developing-a-zf2-blog.html"/>
    <id>http://mwop.net/blog/2012-05-developing-a-zf2-blog.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>This post tells a story.</xhtml:p>
<xhtml:p>A long time ago, I set out to write my own blog platform. Yes,
<xhtml:a href="http://wordpress.org">WordPress</xhtml:a> is a fine blogging
platform, as is <xhtml:a href="http://www.s9y.org/">Serendipity</xhtml:a> (aka
"s9y", and my previous platform). And yes, I know about <xhtml:a href="http://habariproject.org">Habari</xhtml:a>. And, for those of you
skimming ahead, yes, I'm quite aware of <xhtml:a href="http://github.com/mojombo/jekyll">Jekyll</xhtml:a>, thank you
anyways.</xhtml:p>
<xhtml:p>Why write something of my own? Well, of course, there's the fact
that I'm a developer, and have control issues. Then there's also
the fact that a blog is both a simple enough domain to allow easily
experimenting with new technology and paradigms, while
simultaneously providing a complex enough domain to expose
non-trivial issues.</xhtml:p>
<xhtml:p>When I started this project, it was a technology-centered
endeavor; I wanted to play with document databases such as <xhtml:a href="http://couchdb.apache.org/">CouchDB</xhtml:a> and <xhtml:a href="http://www.mongodb.org/">MongoDB</xhtml:a>, and with caching
technologies like <xhtml:a href="http://memcached.org">memcached</xhtml:a> and
<xhtml:a href="http://redis.io">redis</xhtml:a>.</xhtml:p>
<xhtml:p>Not long after I started, I also realized it was a great
playground for me to prototype ideas for <xhtml:a href="http://framework.zend.com/zf2">ZF2</xhtml:a>; in fact, the original DI
and MVC prototypes lived as branches of my blog. (My repository is
still named "zf2sandbox" to this day, though it technically houses
just my site.)</xhtml:p>
<xhtml:p>Over time, I had a few realizations. First, my <xhtml:em>actual</xhtml:em>
blog was suffering. I wasn't taking the time to perform security
updates, nor even normal upgrades, and was so far behind as to make
the process non-trivial, particularly as I had a custom theme, and
because I was proxying to my blog via a ZF app in order to
facilitate a cohesive site look-and-feel. I needed to either sink
time into upgrading, or finish my blog.</xhtml:p>
<xhtml:p>My second realization, however, was the more important one: I
wanted a platform where I could write how <xhtml:em>I</xhtml:em> want to write.
I am a keyboard-centric developer and computer user, and while I
love the web, I hate typing in its forms. Additionally, my posts
often take longer than a typical browser session -- which leaves me
either losing my work in a GUI admin, or having to write first in
my editor of choice, and then cut-and-paste it to the web forms.
Finally, I want versions I can easily browse with standard diffing
tools.</xhtml:p>
<xhtml:p>When it came down to it, my blog content is basically static.
Occasionally, I'll update a post, but it's rare. Comments are
really the only dynamic aspect of the blog... and what I had with
s9y was not cutting it, as I was getting more spam than I could
keep up with. New commenting platforms such as <xhtml:a href="http://livefyre.com">Livefyre</xhtml:a> and <xhtml:a href="http://disqus.com">Disqus</xhtml:a> provide more features than most
blogging platforms I know, and provide another side benefit:
because they are javascript-based, you can simply drop in a small
amount of markup into your post <xhtml:em>once</xhtml:em> -- meaning your pages
can be fully static!</xhtml:p>
<xhtml:p>Add these thoughts to the rise of static blogging platforms such
as the aforementioned Jekyll, and I had a kernel of an idea: take
the work I'd done already, and create a static blog generator.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[View Layers, Database Abstraction, Configuration, Oh, My!]]></title>
    <published>2012-03-05T22:32:45+0000</published>
    <updated>2012-03-05T22:32:45+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/zf2-beta3.html"/>
    <id>http://mwop.net/blog/zf2-beta3.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Late last week, the Zend Framework community <xhtml:a href="http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta3-Released">
2.0.0beta3</xhtml:a>, the latest iteration of the v2 framework. What have
we been busy doing the last couple months? In a nutshell, getting
dirty with view layers, database abstraction, and
configuration.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[ZF2 Modules You Can Use Today]]></title>
    <published>2012-02-08T16:31:47+0000</published>
    <updated>2012-02-08T16:31:47+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/zf2-modules-you-can-use-today.html"/>
    <id>http://mwop.net/blog/zf2-modules-you-can-use-today.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>One key new architectural feature of Zend Framework 2 is its new
module infrastructure. The basic idea behind modules is to allow
developers to both create and consume re-usable application
functionality -- anything from packaging common assets such as CSS
and JavaScript to providing MVC application classes.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Why Conventions Matter]]></title>
    <published>2012-01-12T03:58:28+0000</published>
    <updated>2012-01-12T03:58:28+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/why-conventions-matter.html"/>
    <id>http://mwop.net/blog/why-conventions-matter.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>When I started teaching myself scripting languages, I started
with Perl. One Perl motto is <xhtml:a href="http://en.wikipedia.org/wiki/TMTOWTDI">"TMTOWTDI"</xhtml:a> -- "There's
More Than One Way To Do It," and pronounced "tim-toady." The idea
is that there's likely multiple ways to accomplish the very same
thing, and the culture of the language encourages finding novel
ways to do things.</xhtml:p>
<xhtml:p>I've seen this principle used everywhere and in just about every
programming situation possible, applied to logical operations,
naming conventions, formatting, and even project structure.
Everyone has an opinion on these topics, and given free rein to
implement as they see fit, it's rare that two developers will come
up with the same conventions.</xhtml:p>
<xhtml:p>TMTOWTDI is an incredibly freeing and egalitarian principle.</xhtml:p>
<xhtml:p>Over the years, however, my love for TMTOWTDI has diminished
some. Freeing as it is, is also a driving force behind having
coding standards and conventions -- because when everyone does it
their own way, projects become quickly hard to maintain. Each
person finds themselves reformatting code to their own standards,
simply so they can read it and follow its flow.</xhtml:p>
<xhtml:p>Additionally, TMTOWTDI can actually be a foe of simple, elegant
solutions.</xhtml:p>
<xhtml:p>Why do I claim this?</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Getting started writing ZF2 modules]]></title>
    <published>2011-11-07T18:19:00+0000</published>
    <updated>2011-11-12T18:02:42+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/267-Getting-started-writing-ZF2-modules.html"/>
    <id>http://mwop.net/blog/267-Getting-started-writing-ZF2-modules.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>During <xhtml:a href="http://zendcon.com/">ZendCon</xhtml:a> this year, we
<xhtml:a href="http://framework.zend.com/zf2/blog/entry/Zend-Framework-2-0-0beta1-Released">
released 2.0.0beta1</xhtml:a> of <xhtml:a href="http://framework.zend.com">Zend
Framework</xhtml:a>. The key story in the release is the creation of a
new MVC layer, and to sweeten the story, the addition of a modular
application architecture.</xhtml:p>
<xhtml:p>"Modular? What's that mean?" For ZF2, "modular" means that your
application is built of one or more "modules". In a lexicon agreed
upon during our IRC meetings, a module is a collection of code and
other files that solves a specific atomic problem of the
application or website.</xhtml:p>
<xhtml:p>As an example, consider a typical corporate website in a
technical arena. You might have:</xhtml:p>
<xhtml:ul>
<xhtml:li>A home page</xhtml:li>
<xhtml:li>Product and other marketing pages</xhtml:li>
<xhtml:li>Some forums</xhtml:li>
<xhtml:li>A corporate blog</xhtml:li>
<xhtml:li>A knowledge base/FAQ area</xhtml:li>
<xhtml:li>Contact forms</xhtml:li>
</xhtml:ul>
<xhtml:p>These can be divided into discrete modules:</xhtml:p>
<xhtml:ul>
<xhtml:li>A "pages" modules for the home page, product, and marketing
pages</xhtml:li>
<xhtml:li>A "forum" module</xhtml:li>
<xhtml:li>A "blog" module</xhtml:li>
<xhtml:li>An "faq" or "kb" module</xhtml:li>
<xhtml:li>A "contact" module</xhtml:li>
</xhtml:ul>
<xhtml:p>Furthermore, if these are developed well and discretely, they
can be <xhtml:em>re-used</xhtml:em> between different applications!</xhtml:p>
<xhtml:p>So, let's dive into ZF2 modules!</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Using the ZF2 EventManager]]></title>
    <published>2011-09-12T20:45:13+0000</published>
    <updated>2011-10-06T19:58:39+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/266-Using-the-ZF2-EventManager.html"/>
    <id>http://mwop.net/blog/266-Using-the-ZF2-EventManager.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Earlier this year, I <xhtml:a href="http://weierophinney.net/matthew/archives/251-Aspects,-Filters,-and-Signals,-Oh,-My!.html">
wrote about Aspects, Intercepting Filters, Signal Slots, and
Events</xhtml:a>, in order to compare these similar approaches to
handling both asychronous programming as well as handling
cross-cutting application concerns in a cohesive way.</xhtml:p>
<xhtml:p>I took the research I did for that article, and applied it to
what was then a "SignalSlot" implementation within Zend Framework
2, and refactored that work into a new "EventManager" component.
This article is intended to get you up and running with it.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

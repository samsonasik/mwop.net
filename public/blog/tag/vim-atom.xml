<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: vim :: phly, boy, phly</title>
  <updated>2010-12-17T02:50:53-06:00</updated>
  <generator uri="http://framework.zend.com" version="2.0.0beta3">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/vim.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/vim-atom.xml"/>
  <id>http://mwop.net/blog/tag/vim.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Vim Toolbox, 2010 Edition]]></title>
    <published>2010-12-15T06:49:00-06:00</published>
    <updated>2010-12-17T02:50:53-06:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/249-Vim-Toolbox,-2010-Edition.html"/>
    <id>http://mwop.net/blog/249-Vim-Toolbox,-2010-Edition.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I've been using <xhtml:a href="http://www.vim.org/">Vim</xhtml:a> for close
to a decade. I've often said that <xhtml:em>"Unix is my IDE"</xhtml:em> --
because Vim is built in the Unix philosophy, allowing me to pipe
input into it, out of it, and every which way I want. It fits very
nicely with the Unix philosophy of doing one task well, and
allowing redirection. I've found it ideal for web development in
general and PHP development specifically -- in fact, I've had
excellent experiences in every language I've tried my hand at
developing in when using Vim.</xhtml:p>
<xhtml:p>Vim is also my chosen productivity suite. When I want to write a
document, I don't go into OO.o Writer or MS Word or some other word
processor; I open up a window and start typing. In most cases, I
can either cut and paste my work into other tools, or pipe it to
transformation tools. I worry about the <xhtml:em>content</xhtml:em> first, and
the <xhtml:em>presentation</xhtml:em> later... like any good MVC application.
;-)</xhtml:p>
<xhtml:p>Like any good tool, you have to invest time in it in order to
reap its benefits. My learning has, to date, fallen into three time
periods:</xhtml:p>
<xhtml:ul>
<xhtml:li>The initial months in which I first learned Vim, via vimtutor
and Steve Oualline's Vim book.</xhtml:li>
<xhtml:li>A period in 2006-2007 when I felt the need to make my coding
more efficient, and first started playing with exuberant-ctags and
omni-completion.</xhtml:li>
<xhtml:li>The last quarter of 2010 (yes, that's now) when I was
introduced to a number of new tools via Twitter.</xhtml:li>
</xhtml:ul>
<xhtml:p>So, this is my Vim Toolbox, 2010 edition.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Vimgrep and Vim Project]]></title>
    <published>2008-10-21T06:36:49-05:00</published>
    <updated>2008-10-22T20:55:03-05:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/194-Vimgrep-and-Vim-Project.html"/>
    <id>http://mwop.net/blog/194-Vimgrep-and-Vim-Project.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>Chris Hartjes today was <xhtml:a href="http://www.littlehart.net/atthekeyboard/2008/10/20/vim-programming-bounty-fuzzyfind-inside-files/">
on a quest for a "find in project" feature for Vim</xhtml:a>. "Find in
Project" was a feature of Textmate that he'd grown accustomed to
and was having trouble finding an equivalent for.</xhtml:p>
<xhtml:p>The funny thing is that Textmate is a newcomer, and, of course,
vim has had such a feature for years. The thing to remember with
vim, of course, is its unix roots; typically if you know the unix
command for doing something, you can find what you need in vim. In
this case, the key is the vimgrep plugin, which ships in the
standard vim distribution.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Vim Productivity Tips for PHP Developers]]></title>
    <published>2008-03-22T09:41:26-05:00</published>
    <updated>2008-03-25T10:39:35-05:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/164-Vim-Productivity-Tips-for-PHP-Developers.html"/>
    <id>http://mwop.net/blog/164-Vim-Productivity-Tips-for-PHP-Developers.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I use <xhtml:a href="http://www.vim.org/">Vim</xhtml:a> for all my editing
needs -- TODO lists, email, presentation outlines, coding in any
language... everything. So, I thought I'd start sharing some of my
vim habits and tools with others, particularly those that pertain
to using Vim with PHP.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[exuberant ctags with PHP in Vim]]></title>
    <published>2007-01-31T13:20:00-06:00</published>
    <updated>2010-03-25T15:18:59-05:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/134-exuberant-ctags-with-PHP-in-Vim.html"/>
    <id>http://mwop.net/blog/134-exuberant-ctags-with-PHP-in-Vim.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>One reason I've heard PHP developers use for adopting an IDE
when developing is the ability to click on a class or function name
and jump to the declaration. Sounds like magic, and it's definitely
something I've desired.</xhtml:p>
<xhtml:p>One way I get around it is by adopting PEAR coding standards for
naming my classes. Since they define a one-to-one mapping of class
name to the file system (substitute the underscore character ('_')
with the directory separator), I can usually very quickly and
easily open a class file, particularly if I start in the base
directory of the project install.</xhtml:p>
<xhtml:p>Today, however, I found <xhtml:a href="http://ctags.sourceforge.net">exuberant ctags</xhtml:a>, a library which
can be used to generate an index file mapping language objects to
source files and the line in the source file where they are
declared. Contrary to its name, it's not just for the C language;
it currently supports 33 different programming languages, including
PHP.</xhtml:p>
<xhtml:p>I decided to try it out on the Zend Framework core library
today. At first run, it was pretty useful. However, it was only
mapping classes, and, in addition, only those defined with the
single word 'class' -- abstract classes and interfaces were
entirely left out. So, I looked into the documentation to see if I
could change the behaviour.</xhtml:p>
<xhtml:p>And, being a Unix program, of course I could. First off, you can
add functions to the items it indexes with a simple flag.
Additionally, you can use POSIX regular expressions to refine what
it searches.</xhtml:p>
<xhtml:p>I whipped up the following script to create my tags index:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="bash" xml:lang="bash">
#!/bin/bash
cd /path/to/framework/library
exec ctags-exuberant -f ~/.vim/mytags/framework \
-h \".php\" -R \
--exclude=\"\.svn\" \
--totals=yes \
--tag-relative=yes \
--PHP-kinds=+cf \
--regex-PHP='/abstract class ([^ ]*)/\1/c/' \
--regex-PHP='/interface ([^ ]*)/\1/c/' \
--regex-PHP='/(public |static |abstract |protected |private )+function ([^ (]*)/\2/f/'
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>This script creates the tag index in the file
<xhtml:kbd>$HOME/.vim/mytags/framework</xhtml:kbd>. It scans for PHP files
recursively through the tree, excluding any files found in a
<xhtml:kbd>.svn</xhtml:kbd> directory (I'm using a checkout from the subversion
repository). The file paths in the index are created relative to
the tags file; this was important, because if this wasn't provided,
vim was unable to jump to the file, as it couldn't find it.
<xhtml:kbd>--PHP-kinds=+cf</xhtml:kbd> tells it to index classes and functions.
Next, I've got three regular expressions. The first tells it to
match classes beginning with 'abstract class' as classes. The
second tells it to match interfaces as classes. The last is so that
PHP 5 methods, which begin with a visibility operator, to be
matched as functions.</xhtml:p>
<xhtml:p>Once the index file is generated (it takes less than a second),
all you need to do in vim is tell it to load it: <xhtml:kbd>:set
tags=~/.vim/mytags/framework</xhtml:kbd>. At this point, you can do all
sorts of fun stuff. Place the cursor on a class name or method
name, anywhere in it, and hit <xhtml:kbd>Ctrl-]</xhtml:kbd>, and you'll jump to
the file and line of its declaration; <xhtml:kbd>Ctrl-T</xhtml:kbd> then takes
you back. If you change the invocation to <xhtml:kbd>Ctrl-W ]</xhtml:kbd>, it
will split the current window and open the declaration in the new
pane. (If you're familiar with how help works with Vim, this should
seem pretty familiar.)</xhtml:p>
<xhtml:p>One more reason to stick with Vim for your PHP editing needs.
:-)</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

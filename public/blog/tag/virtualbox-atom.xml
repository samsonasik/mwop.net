<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: virtualbox :: phly, boy, phly</title>
  <updated>2009-01-17T15:43:40+0000</updated>
  <generator uri="http://framework.zend.com" version="2.0.2">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/virtualbox.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/virtualbox-atom.xml"/>
  <id>http://mwop.net/blog/tag/virtualbox.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[VirtualBox Networking]]></title>
    <published>2009-01-17T15:43:40+0000</published>
    <updated>2009-01-17T15:43:40+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/205-VirtualBox-Networking.html"/>
    <id>http://mwop.net/blog/205-VirtualBox-Networking.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>I use Linux on the desktop (currently <xhtml:a href="http://www.ubuntu.com/">Ubuntu</xhtml:a>), but occasionally need to use
Windows for things like webinars, OS-specific testing, etc. I
started using <xhtml:a href="http://virtualbox.org/">VirtualBox</xhtml:a> for
virtualization around six months ago, and have been reasonably
satisfied; Windows boots quickly, and everything "just works." That
is, until yesterday.</xhtml:p>
<xhtml:p>I was given a linux VM image running a web server and some
applications I needed to review. On top of that, I needed to do so
over WebEx, so that I could share my screen with somebody else.
This meant I needed the following to work:</xhtml:p>
<xhtml:ol>
<xhtml:li>Internet access for my Windows VM</xhtml:li>
<xhtml:li>Access to my linux VM from my Windows VM</xhtml:li>
<xhtml:li>Ideally, access to both guest VMs from my linux host</xhtml:li>
<xhtml:li>Ideally, internet access for my linux host</xhtml:li>
</xhtml:ol>
<xhtml:p>Since I'd only ever used one VM image at a time before this, I'd
never had any issues; I could use NAT networking in VirtualBox, and
have communication between my host and guest, as well as internet
access for both. But NAT access does not allow the VMs to
communicate with each other -- in fact, both received the same
exact same IP address from my host, which meant that I had internet
access from both, both could ping the host, but the host could not
access either machine, and neither could access each other.</xhtml:p>
<xhtml:p>I did some research, and started reading on using network
bridges, something I'd tried once before without success.
Fortunately, the very first literature I started reading this time
pointed out the reason why I'd failed before: network bridges over
wireless adapters do not work, and I was using my wifi. I briefly
considered using a wired connection, but realized that this was not
an option: there are times I may need this sort of setup when I am
unable to use a wired connection.</xhtml:p>
<xhtml:p>I then found an article that detailed how to setup Host
Interface networking with VirtualBox. Host Interface networking was
added in the 2.1.x series of VirtualBox, and basically allows you
to use your host machine as a network gateway for your guest
machines. The VirtualBox binaries available in Ubuntu are 2.0.x...
so I had to uninstall them and download the official binaries from
the VirtualBox site.</xhtml:p>
<xhtml:p>Setting up Host Interface networking worked for case 2 only;
somehow, when it was active, my routing got completely borked. So,
I did more research. The next thing I found suggested I needed to
setup one or more <xhtml:a href="http://vtun.sourceforge.net/tun/faq.html">virtual network
devices</xhtml:a> (TAP), which would allow each virtual machine to have
its own IP address, and communicate over the same network, while
using the wifi adapter in my host machine as a gateway to the
internet.</xhtml:p>
<xhtml:p>All the instructions I found setup a separate TAP interface for
each virtual machine. I quickly discovered two things: first, I had
to setup IP masquerading in my host's iptables rules so that the
VMs would have access to the internet, and second, that while this
would solve cases 2-4, the VMs still couldn't talk to each other.
In the end, I found that I needed to setup a single TAP interface,
and have all the VMs use this as their Host Interface -- and
everything then worked. Almost. The other trick I discovered was
that the TAP address should be on a private network that you're not
a member of already -- including the private network space your
router might use. The instructions I followed setup the network in
the 10.0.1.X network, but this conflicted with my DSL modem, which
was assigned a 10.0.0.X address, and meant that the guest machines
had no access to the outside world; switching to 192.168.168.X
fixed all issues.</xhtml:p>
<xhtml:p>Here are the step-by-step instructions (linux host):</xhtml:p>
<xhtml:ul>
<xhtml:li><xhtml:b>On the host:</xhtml:b>
<xhtml:ul>
<xhtml:li>Make sure you have uml-utilities installed
<xhtml:ul>
<xhtml:li>On Debian-based systems, "sudo aptitude install
uml-utilities"</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li>Create a virtual network interface
<xhtml:ul>
<xhtml:li>"sudo tunctl -t tap0 -u $USER" (where $USER is the user
initiating the VirtualBox sessions
<xhtml:ul>
<xhtml:li>Make sure the user is in the vboxusers group:
<xhtml:ul>
<xhtml:li>Edit /etc/group, look for the "vboxusers" entry, and ensure
$USER is listed as a member of the group.</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li>Make sure the vboxusers group has rights to tun devices:
<xhtml:ul>
<xhtml:li>"sudo chgrp vboxusers /dev/net/tun"</xhtml:li>
<xhtml:li>"sudo chmod 660 /dev/net/tun"</xhtml:li>
</xhtml:ul>
</xhtml:li>
</xhtml:ul>
</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li>Enable the network interface and assign it an IP address
<xhtml:ul>
<xhtml:li>Make sure the IP is not on a netmask in use elsewhere in your
networking; I used 192.168.168.1, which did not conflict with
anything.</xhtml:li>
<xhtml:li>"sudo ifconfig tap0 192.168.168.1"</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li>Set up NAT forwarding:
<xhtml:ul>
<xhtml:li>"sudo iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE"
<xhtml:ul>
<xhtml:li>Substitute the appropriate network interface based on what
you're using on your machine.</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li>"sudo sysctl -w net.ipv4.ip_forward=1"</xhtml:li>
</xhtml:ul>
</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li><xhtml:b>On your guest machines:</xhtml:b>
<xhtml:ul>
<xhtml:li>Setup TCP/IP networking to use static IP addresses in the
network you've defined for the virtual adapter on the host. For
example, if you used 192.168.168.1 on your host:
<xhtml:dl>
<xhtml:dt>Address:</xhtml:dt>
<xhtml:dd>192.168.168.[UNIQUE]</xhtml:dd>
<xhtml:dt>Netmask:</xhtml:dt>
<xhtml:dd>255.255.255.0</xhtml:dd>
<xhtml:dt>Gateway:</xhtml:dt>
<xhtml:dd>192.168.168.1</xhtml:dd>
</xhtml:dl>
</xhtml:li>
</xhtml:ul>
</xhtml:li>
<xhtml:li>Assign DNS servers based on what you're using on your linux
host. Check /etc/resolv.conf if you're unsure.</xhtml:li>
</xhtml:ul>
<xhtml:p>Now, one caveat: your TAP device will disappear when you restart
your host box. To solve this, I added the following lines to my
/etc/rc.local:</xhtml:p>
<xhtml:pre>
echo -n "Setting up tap0 interface..."
tunctl -t tap0 -u matthew
ifconfig tap0 192.168.168.1
iptables -t nat -A POSTROUTING -o wlan0 -j MASQUERADE
sysctl -w net.ipv4.ip_forward=1
echo "DONE!"
</xhtml:pre>
<xhtml:p>This ensures that the TAP device is setup, and also that IP
masquerading is enabled at boot time.</xhtml:p>
<xhtml:p>I'm writing this mainly for myself, but also hoping that it will
save others the many hours of experimentation I had to go through
to find the write combination of settings.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

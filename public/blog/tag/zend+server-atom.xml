<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: zend server :: phly, boy, phly</title>
  <updated>2009-12-17T15:49:20+0000</updated>
  <generator uri="http://framework.zend.com" version="2.0.3">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/zend+server.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/zend+server-atom.xml"/>
  <id>http://mwop.net/blog/tag/zend+server.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Real-time ZF Monitoring via Zend Server]]></title>
    <published>2009-12-10T20:51:22+0000</published>
    <updated>2009-12-17T15:49:20+0000</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/229-Real-time-ZF-Monitoring-via-Zend-Server.html"/>
    <id>http://mwop.net/blog/229-Real-time-ZF-Monitoring-via-Zend-Server.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>When keeping tabs on your ZF applications, it's often difficult
to separate application errors from general PHP errors, and if you
aggregate them in the same location as your web server errors, this
can become more difficult still.</xhtml:p>
<xhtml:p>Additionally, PHP's error reporting doesn't provide a ton of
context, even when reporting uncaught exceptions -- typically
you'll only get a cryptic exception message, and what file and line
emitted it.</xhtml:p>
<xhtml:p>Zend Server's Monitor extension has some capabilities for
providing more context, and does much of this by default: request
and environment settings available when the error was logged, the
function name and arguments provided, and a full backtrace are
available for you to inspect. Additionally, the Monitor extension
includes an API that allows you to trigger custom Monitor events,
and you can provide additional context when doing so -- such as
passing objects or arrays that may help provide context when
debugging.</xhtml:p>
<xhtml:p style="text-align: center;"><xhtml:img src="/uploads/zend.server.event.png" border="0"/></xhtml:p>
<xhtml:p>To tie into this feature, we've developed a new
<xhtml:code>Zend_Log</xhtml:code> writer,
<xhtml:code>Zend_Log_Writer_ZendMonitor</xhtml:code>, that will emit such
custom events. In addition, some modifications were made to the
<xhtml:code>Zend_Log</xhtml:code> API to allow passing extra contextual
information to log writers.</xhtml:p>
<xhtml:p>As an example, you could do the following:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
$log = new Zend_Log(new Zend_Log_Writer_ZendMonitor());
$log-&gt;crit('Exception occurred processing login', $e);

// or:
$log-&gt;crit('Exception occurred processing login', array(
    'request'   =&gt; $request, // Request object
    'exception' =&gt; $e,       // Exception
));
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Zend Server's GUI would then present a tab, "Custom", that
includes the extra arguments passed; by default, if just an object
is passed, the information will be returned under the key "info".
Passing an associative array is incredibly useful, as it allows you
to provide detailed contextual information.</xhtml:p>
<xhtml:p style="text-align: center;"><xhtml:img src="/uploads/zend.server.custom.info.png" border="0"/></xhtml:p>
<xhtml:p>One use case for this feature is to report application
exceptions via the <xhtml:code>ErrorController</xhtml:code>. This can then
provide some great feedback via your Zend Server GUI; you can
filter based on a "Rule Name" of "Custom Event", and further on
criteria such as Severity to determine when and why your
application is hitting the <xhtml:code>ErrorController</xhtml:code> -- and
hopefully reduce such occurrences.</xhtml:p>
<xhtml:p>We thought this might make a good default use case, and have
provided some code generation surrounding it in
<xhtml:code>Zend_Tool</xhtml:code>. The <xhtml:code>ErrorController</xhtml:code> will now
check to see if a Log resource is available, and if so, write to
it.</xhtml:p>
<xhtml:p>To make this happen, we've also written a new Log bootstrap
resource that piggy-backs on some additional new functionality: a
new <xhtml:code>factory()</xhtml:code> method in <xhtml:code>Zend_Log</xhtml:code>. This
allows you to create <xhtml:code>Zend_Log</xhtml:code> instances from
configuration, with one or more writers and configured filters.
Enabling Zend Monitor logging via the <xhtml:code>ErrorController</xhtml:code>
is now as simple as adding a single line to your configuration:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="ini" xml:lang="ini">
resources.log.zendmonitor.writerName = \"ZendMonitor\"
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>Note: you can log to <xhtml:em>any</xhtml:em> logger, or multiple loggers if
desired.</xhtml:p>
<xhtml:p>If, within your controllers, you want to log other events, you
can do so by simply grabbing the bootstrap object and then the Log
resource:</xhtml:p>
<xhtml:div class="example">
<xhtml:pre>
<xhtml:code lang="php" xml:lang="php">
$bootstrap = $this-&gt;getInvokeArg('bootstrap')
if ($bootstrap-&gt;hasResource('Log')) {
    $log = $bootstrap-&gt;getResource('Log');
    $log-&gt;info(/* ... */);
}
</xhtml:code>
</xhtml:pre></xhtml:div>
<xhtml:p>This kind of simple integration leads to some fantastic benefits
for Zend Framework users that are using Zend Server, and it's
incredibly cheap to implement (the ZendMonitor logger acts as a
null logger when the Monitor extension is not present). What other
uses can you find to put it to?</xhtml:p>
<xhtml:p><xhtml:em>Note: this functionality is available now via the Zend
Framework subversion repository, in trunk. It will be made
available in a stable release with the upcoming 1.10
release.</xhtml:em></xhtml:p>
<xhtml:p><xhtml:strong>Update:</xhtml:strong> I'd like to point out that the
bootstrap resource was made possible by contributions of two
<xhtml:a href="http://ibuildings.com">ibuildings</xhtml:a> contributors, Martin
Roest and Mark van der Velden, who contributed code that makes it
possible to instantiate log instances via a new
<xhtml:code>factory()</xhtml:code> method.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>

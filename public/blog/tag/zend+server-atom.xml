<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Tag: zend server :: phly, boy, phly</title>
  <updated>2009-12-17T09:49:20-06:00</updated>
  <generator uri="http://framework.zend.com" version="2.0.0beta4">Zend_Feed_Writer</generator>
  <link rel="alternate" type="text/html" href="http://mwop.net/blog/tag/zend+server.html"/>
  <link rel="self" type="application/atom+xml" href="http://mwop.net/blog/tag/zend+server-atom.xml"/>
  <id>http://mwop.net/blog/tag/zend+server.html</id>
  <entry xmlns:xhtml="http://www.w3.org/1999/xhtml">
    <title type="html"><![CDATA[Real-time ZF Monitoring via Zend Server]]></title>
    <published>2009-12-10T14:51:22-06:00</published>
    <updated>2009-12-17T09:49:20-06:00</updated>
    <link rel="alternate" type="text/html" href="http://mwop.net/blog/229-Real-time-ZF-Monitoring-via-Zend-Server.html"/>
    <id>http://mwop.net/blog/229-Real-time-ZF-Monitoring-via-Zend-Server.html</id>
    <author>
      <name>Matthew Weier O'Phinney</name>
      <email>me@mwop.net</email>
      <uri>http://mwop.net</uri>
    </author>
    <content xmlns:xhtml="http://www.w3.org/1999/xhtml" type="xhtml">
      <xhtml:div xmlns:xhtml="http://www.w3.org/1999/xhtml"><xhtml:p>When keeping tabs on your ZF applications, it's often difficult
to separate application errors from general PHP errors, and if you
aggregate them in the same location as your web server errors, this
can become more difficult still.</xhtml:p>
<xhtml:p>Additionally, PHP's error reporting doesn't provide a ton of
context, even when reporting uncaught exceptions -- typically
you'll only get a cryptic exception message, and what file and line
emitted it.</xhtml:p>
<xhtml:p>Zend Server's Monitor extension has some capabilities for
providing more context, and does much of this by default: request
and environment settings available when the error was logged, the
function name and arguments provided, and a full backtrace are
available for you to inspect. Additionally, the Monitor extension
includes an API that allows you to trigger custom Monitor events,
and you can provide additional context when doing so -- such as
passing objects or arrays that may help provide context when
debugging.</xhtml:p>
</xhtml:div>
    </content>
  </entry>
</feed>
